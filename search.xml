<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2023/03/17/test/"/>
      <url>/2023/03/17/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2023/03/17/CTF%20-%20Misc/GIF%E5%9B%BE%E7%89%87%E6%8B%86%E5%88%86&amp;%E6%8B%BC%E5%9B%BE/"/>
      <url>/2023/03/17/CTF%20-%20Misc/GIF%E5%9B%BE%E7%89%87%E6%8B%86%E5%88%86&amp;%E6%8B%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><hr><h3 id="拆分并直接展示"><a href="#拆分并直接展示" class="headerlink" title="拆分并直接展示"></a>拆分并直接展示</h3><ul><li>在线网站：<a href="https://tu.sioe.cn/gj/fenjie/">GIF动态图片分解，多帧动态图分解成多张静态图片</a></li></ul><h3 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h3><ul><li>在线网站：<a href="https://uutool.cn/gif2img/">在线GIF图片帧拆分工具 - UU在线工具</a></li></ul><h3 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h3><ul><li>下载：<a href="https://imagemagick.org/script/download.php#windows">图像魔术 – 下载</a></li><li>使用：<ol><li>到需要拼接的图片目录下，调用 <code>cmd</code></li><li>使用命令：<code>magick montage *.png -tile &lt;10x10&gt; -geometry +0+0 flag.png</code> 【10x10表示拼成横竖10张的图】</li></ol></li></ul><hr><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><hr><h3 id="convert"><a href="#convert" class="headerlink" title="convert"></a>convert</h3><ul><li>使用：<code>convert &lt;.gif文件名&gt; &lt;输出路径/flag.png&gt;</code></li></ul><h3 id="montage"><a href="#montage" class="headerlink" title="montage"></a>montage</h3><ul><li>下载安装：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> graphicsmagick-imagemagick-compat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用：<code>montage *.png -tile &lt;10x10&gt; -geometry +0+0 flag.png</code> 【10x10表示拼成横竖10张的图】</li></ul><h3 id="gaps"><a href="#gaps" class="headerlink" title="gaps"></a>gaps</h3><ul><li>下载安装：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/nemanja-m/gaps.git<span class="token builtin class-name">cd</span> gaps  pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt  <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-tk  pip <span class="token function">install</span> <span class="token parameter variable">-e</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E8%B5%B0%E8%BF%B7%E5%AE%AB/"/>
      <url>/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E8%B5%B0%E8%BF%B7%E5%AE%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="Python版"><a href="#Python版" class="headerlink" title="Python版"></a>Python版</h2><hr><ul><li><strong>特点</strong><ol><li>给出迷宫，起始位置和终点位置，输出走迷宫的路径</li><li>迷宫中 0 代表路，1 代表墙壁</li></ol></li></ul><hr><ul><li><strong>代码</strong><pre class="line-numbers language-python" data-language="python"><code class="language-python">maze <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    usedmap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 生成与迷宫相同规格的全0列表，用来记录已经走过的位置  </span>  sti <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 初始位置的横坐标  </span>stj <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 初始位置的纵坐标  </span>edi <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment"># 终点位置的横坐标  </span>edj <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment"># 终点位置的纵坐标  </span>flag <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 走迷宫  </span>    <span class="token keyword">global</span> flag      <span class="token keyword">if</span> x <span class="token operator">==</span> edi <span class="token keyword">and</span> y <span class="token operator">==</span> edj<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>          <span class="token keyword">return</span>      <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往下走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'s'</span>  <span class="token comment"># 向下走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往上走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'w'</span>  <span class="token comment"># 向上走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往右走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'d'</span>  <span class="token comment"># 向右走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 可以往左走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'a'</span>  <span class="token comment"># 向左走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 遇到死胡同，回退到标记的地方  </span>    dfs<span class="token punctuation">(</span>sti<span class="token punctuation">,</span> stj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E5%B0%8F%E7%AB%AF%E5%BA%8F%20int%20-%20%E9%80%86%E5%90%91%20string%20%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E5%B0%8F%E7%AB%AF%E5%BA%8F%20int%20-%20%E9%80%86%E5%90%91%20string%20%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="C-版"><a href="#C-版" class="headerlink" title="C++版"></a>C++版</h2><hr><ul><li><strong>特点</strong><ol><li>将小端序存放的 int型 数据转换为正序，并将结果存放到 string字符串 buffer 中</li><li>&#x3D;&#x3D;若 num 位数超长，将类型改为 <strong>int64</strong>&#x3D;&#x3D;</li></ol></li></ul><hr><ul><li>参数：</li></ul><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>num</code></td><td>小端序存放的 <code>int</code> 型数</td></tr><tr><td><code>width_num</code></td><td>小端序存放的 <code>int</code> 型数据对应的 十六进制数 除去 <code>&#39;0x&#39;</code> 后的长度</td></tr><tr><td><code>buffer</code></td><td>字符串 <code>buffer</code> 的长度，可根据 <code>width_num / width_buffer</code> 得出</td></tr><tr><td><code>width_buffer</code></td><td><code>buffer[]</code> 的每一个元素需要存放的 <code>num</code> 中的 十六进制数 的个数，即：将 <code>num</code> 分成 <code>width_buffer</code> 个 十六进制数 为一组</td></tr></tbody></table><hr><ul><li><strong>头文件</strong><ol><li><code>#include &lt;sstream&gt;</code></li></ol></li></ul><hr><ul><li><strong>代码</strong><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">little_endian</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width_num<span class="token punctuation">,</span> <span class="token keyword">int</span> buffer_length<span class="token punctuation">,</span> <span class="token keyword">int</span> width_buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>width_num <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width_num <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width_num<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span>    string buffer <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> width_num<span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span> index <span class="token operator">-=</span> width_buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>width_buffer<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> width_buffer<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 将width_buffer长度的字符串转换为十进制数，存放到sum</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>width_buffer<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index <span class="token operator">=</span> index <span class="token operator">-</span> width_buffer<span class="token punctuation">;</span>   <span class="token comment">// 因为前面修改了index，后面还要用index控制循环，所以这里将其还原</span>        buffer <span class="token operator">+=</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 将字符sum逆向存储到 buffer字符串</span>        buffer_length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> buffer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E5%8F%AF%E6%8D%A2%E7%A0%81%E8%A1%A8%E7%9A%84%20Base64%20%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
      <url>/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E5%8F%AF%E6%8D%A2%E7%A0%81%E8%A1%A8%E7%9A%84%20Base64%20%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Python版（简洁脚本）"><a href="#Python版（简洁脚本）" class="headerlink" title="Python版（简洁脚本）"></a>Python版（简洁脚本）</h2><hr><ul><li><strong>特点</strong><ol><li>可以更换加密的码表</li><li>快捷，直接使用即可</li></ol></li></ul><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong><br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> string<span class="token comment"># str1表示更换码表后的待解密字符串</span>str1 <span class="token operator">=</span> <span class="token string">"x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q"</span><span class="token comment"># string1表示更换后的码表</span>string1 <span class="token operator">=</span> <span class="token string">"ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/"</span><span class="token comment"># string2表示原始码表</span>string2 <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token comment"># 将str1还原成原始码表加密后的内容，存放在str2中</span>str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Base64解密，base64.b64decode()的结果为 bytes 类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2><h2 id="Python版（完整系统）"><a href="#Python版（完整系统）" class="headerlink" title="Python版（完整系统）"></a>Python版（完整系统）</h2><hr><ul><li><strong>特点</strong><ol><li>可以更换加密的码表</li><li>支持加密和解密</li></ol></li></ul><hr><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong><br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span>s <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment"># 原始码表</span><span class="token keyword">def</span> <span class="token function">my_base64_encode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(bin_str)</span>    <span class="token comment"># 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment"># 不够三倍数，需补齐的次数</span>    nums <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        <span class="token comment"># 每次取三个字符的二进制</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>            nums <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>                temp_list <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'0'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment"># print(temp_str)</span>        <span class="token comment"># 将三个8字节的二进制转换为4个十进制</span>        temp_str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># print(temp_str_list)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">:</span>            temp_str_list <span class="token operator">=</span> temp_str_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">-</span> nums<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> temp_str_list<span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    outputs <span class="token operator">+=</span> nums <span class="token operator">*</span> <span class="token string">'='</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_base64_decode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token string">'='</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>6&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(bin_str)</span>    <span class="token comment"># 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    nums <span class="token operator">=</span> inputs<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment"># print(temp_str)</span>        <span class="token comment"># 补足8位字节</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str <span class="token operator">=</span> temp_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> nums <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment"># 将四个6字节的二进制转换为三个字符</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"     可更换码表的 Base64 加解密系统       "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*      1. 加密           2. 解密      *"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>select <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"是否更换加密的码表? (yes or no) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token keyword">or</span> select <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"在这里输入码表: "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....done, 已更改!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"码表未做更改!"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"选择要进行的操作? (1:加密 or 2:解密) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"1:加密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入明文以加密: "</span><span class="token punctuation">)</span>    my_base64_encode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"2"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"2:解密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入密文以解密: "</span><span class="token punctuation">)</span>    my_base64_decode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....bye"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E5%B0%8F%E7%AB%AF%E5%BA%8F%20int%20-%20%E9%80%86%E5%90%91%20int%20&amp;%20char%20%E6%95%B0%E7%BB%84/"/>
      <url>/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E5%B0%8F%E7%AB%AF%E5%BA%8F%20int%20-%20%E9%80%86%E5%90%91%20int%20&amp;%20char%20%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="C-版"><a href="#C-版" class="headerlink" title="C++版"></a>C++版</h2><hr><ul><li><strong>特点</strong>  <ol><li>将小端序存放的 int型 数据转换为正序，并将结果存放到 int型 的 buffer数组 中 </li><li>&#x3D;&#x3D;若 num 位数超长，将类型改为 <em>int64</em>&#x3D;&#x3D;</li><li>&#x3D;&#x3D;若要保存到 <em>char</em> 数组，直接将 <em>int buffer</em> 改为 <em>char buffer</em> 即可&#x3D;&#x3D;</li></ol></li></ul><hr><ul><li><strong>参数</strong></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>num</code></td><td align="left">小端序存放的 <code>int</code> 型数据&lt;&#x2F;span&gt;</td></tr><tr><td align="left"><code>width_num</code></td><td align="left">小端序存放的 <code>int</code> 型数据对应的 十六进制数 除去 <code>&#39;0x&#39;</code> 后的长度<br></td></tr><tr><td align="left"><code>buffer</code></td><td align="left">用来保存处理结果的 <code>int</code> 型 数组 <code>buffer[]</code>，<code>buffer[]</code> 是 <code>num</code> 的逆向顺序</td></tr><tr><td align="left"><code>buffer_length</code></td><td align="left"><code>buffer[]</code> 的长度，可根据 <code>width_num / width_buffer </code>得出</td></tr><tr><td align="left"><code>width_buffer</code></td><td align="left"><code>buffer[]</code> 的每一个元素需要存放的 <code>num</code> 中的 十六进制数 的个数，即：将 <code>num</code> 分成 <code>width_buffer</code> 个 十六进制数 为一组</td></tr></tbody></table><hr><ul><li><strong>头文件</strong><ol><li><code>#include &lt;sstream&gt;</code></li></ol></li></ul><hr><ul><li><strong>代码</strong><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">little_endian</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width_num<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> buffer_length<span class="token punctuation">,</span> <span class="token keyword">int</span> width_buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>width_num <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width_num <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width_num<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> index <span class="token operator">+</span> width_buffer <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> index <span class="token operator">+=</span> width_buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>width_buffer<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> width_buffer<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 将width_buffer长度的字符串转换为十进制数，存放到sum</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>width_buffer<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index <span class="token operator">=</span> index <span class="token operator">-</span> width_buffer<span class="token punctuation">;</span>   <span class="token comment">// 因为前面修改了index，后面还要用index控制循环，所以这里将其还原</span>        buffer<span class="token punctuation">[</span>buffer_length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 将十进制数sum逆向存储到 buffer[]</span>        buffer_length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%20string%20-%20%E5%8D%81%E8%BF%9B%E5%88%B6%20int/"/>
      <url>/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%20string%20-%20%E5%8D%81%E8%BF%9B%E5%88%B6%20int/</url>
      
        <content type="html"><![CDATA[<h2 id="C-版"><a href="#C-版" class="headerlink" title="C++版"></a>C++版</h2><hr><ul><li><strong>特点</strong><ol><li>将 <code>string</code> 类型 的十六进制数 <code>s</code>，从下标 <code>index</code> 的位置开始（包括 <code>&#39;0x&#39;</code>），长度为 <code>length</code> 的部分，转换为十进制数 <code>sum</code></li></ol></li></ul><hr><ul><li><strong>头文件</strong><ol><li><code>#include &lt;math.h&gt;</code></li></ol></li></ul><hr><ul><li><strong>代码</strong><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">string_to_dec</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%20int%20-%20%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%20string/"/>
      <url>/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%20int%20-%20%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%20string/</url>
      
        <content type="html"><![CDATA[<h2 id="C-普通版："><a href="#C-普通版：" class="headerlink" title="C++普通版："></a>C++普通版：</h2><hr><ul><li><strong>特点</strong><ol><li>以 <code>&#39;0x&#39;</code> 开头</li><li>转换后的数，位数都要相同，高位不足的补 <code>0</code></li><li><code>num</code> 为待转换的十进制数，<code>width</code> 为转换后的十六进制数的位数，不包括 <code>&#39;0x&#39;</code></li><li>结果以字符串形式输出</li></ol></li></ul><hr><ul><li><strong>代码</strong><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>string <span class="token function">int_to_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>width <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>    s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="C-递归版："><a href="#C-递归版：" class="headerlink" title="C++递归版："></a>C++递归版：</h2><hr><ul><li><strong>特点</strong><ol><li>开头不包含 <code>&#39;0x&#39;</code></li><li>不要求位数相同</li><li>结果以字符数组形式输出</li></ol></li></ul><hr><ul><li><strong>代码</strong><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">int_to_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span>  this_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>this_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>            <span class="token comment">//递归结束条件</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment">//当前数转换成字符放入字符串</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'a'</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>this_index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">//字符串结束标志</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">int_to_string</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//递归调用</span>    this_index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">//字符串索引+1</span>    num <span class="token operator">%=</span> <span class="token number">16</span><span class="token punctuation">;</span>           <span class="token comment">//计算当前值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment">//当前数转换成字符放入字符串</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Python版："><a href="#Python版：" class="headerlink" title="Python版："></a>Python版：</h2><hr><ol><li><strong>代码</strong><pre class="line-numbers language-python" data-language="python"><code class="language-python">tmp <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>length <span class="token operator">=</span> width<span class="token operator">+</span><span class="token number">2</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token string">'0x'</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">*</span><span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/RC4%20%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
      <url>/2023/03/17/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/RC4%20%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Python版（简洁脚本）"><a href="#Python版（简洁脚本）" class="headerlink" title="Python版（简洁脚本）"></a>Python版（简洁脚本）</h2><hr><ul><li><strong>特点</strong><ol><li>利用 Python 库快捷实现 RC4 算法</li><li>Key 表示 RC4 的密钥，Str 表示待加解密的内容（bytes型）</li></ol></li></ul><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong><br><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> ARC4flag <span class="token operator">=</span> ARC4<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>Key<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>Str<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></h2><h2 id="Python版（具体实现）"><a href="#Python版（具体实现）" class="headerlink" title="Python版（具体实现）"></a>Python版（具体实现）</h2><hr><ul><li><strong>特点</strong><ol><li>包含具体实现流程</li></ol></li></ul><hr><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong><br><pre class="line-numbers language-python" data-language="python"><code class="language-python">Str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment"># 待加解密的内容</span>Key <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment"># 密钥key</span>flag <span class="token operator">=</span> <span class="token string">""</span>   <span class="token comment"># 存放加解密后的结果</span><span class="token comment"># ---------- rc4_init ----------</span>s_box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 定义 s 盒</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 生成初始 s 盒</span>    s_box<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment">#   T[i] = K[i mod len(Key)]    # 这个算法里没有 T[i]，下面会解释</span>t <span class="token operator">=</span> <span class="token number">0</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 打乱 s 盒顺序</span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>Key<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>     <span class="token comment"># j = (j + S[i] + T[i]) mod 256</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">1</span>               <span class="token comment"># 这里引入的 t 加一个 if 条件其实就是为了做 t = i % len(Key)</span>    <span class="token keyword">if</span> t <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment"># Key[t] 配合 t = i % len(Key) 就是实现了 T[i] = K[i mod len(Key)]</span>        t <span class="token operator">=</span> <span class="token number">0</span>               <span class="token comment"># 小细节写法不同而已，大致思路是一样的</span><span class="token comment"># ---------- rc4_crypt ----------</span>i <span class="token operator">=</span> <span class="token number">0</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>      <span class="token comment"># &amp; 0xff 是为了做 % 256，两者效果相同</span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    t <span class="token operator">=</span> <span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token comment"># &amp; 0xff 是为了做 % 256，两者效果相同</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>Str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> s_box<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment"># 明文异或得密文，密文异或得明文</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/x86%E6%B1%87%E7%BC%96/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%84/"/>
      <url>/2023/03/17/x86%E6%B1%87%E7%BC%96/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>![[x86汇编_计算机结构1.jpg]]<br>![[x86汇编_计算机结构2.jpg]]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/x86%E6%B1%87%E7%BC%96/%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/03/17/x86%E6%B1%87%E7%BC%96/%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>![[x86汇编_程序1.jpg]]<br>![[x86汇编_程序2.jpg]]<br>![[x86汇编_程序3.jpg]]<br>![[x86汇编_程序4.jpg]]<br>![[x86汇编_程序5.jpg]]<br>![[x86汇编_程序6.jpg]]<br>![[x86汇编_程序7.jpg]]<br>![[x86汇编_程序8.jpg]]<br>![[x86汇编_程序9.jpg]]<br>![[x86汇编_程序10.jpg]]<br>![[x86汇编_程序11.jpg]]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/x86%E6%B1%87%E7%BC%96/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/03/17/x86%E6%B1%87%E7%BC%96/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>![[x86汇编_指令系统1.jpg]]<br>![[x86汇编_指令系统2.jpg]]<br>![[x86汇编_指令系统3.jpg]]<br>![[x86汇编_指令系统4.jpg]]<br>![[x86汇编_指令系统5.jpg]]<br>![[x86汇编_指令系统6.jpg]]<br>![[x86汇编_指令系统7.jpg]]<br>![[x86汇编_指令系统8.jpg]]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/x86%E6%B1%87%E7%BC%96/%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/"/>
      <url>/2023/03/17/x86%E6%B1%87%E7%BC%96/%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>![[x86汇编_寻址方式1.jpg]]<br>![[x86汇编_寻址方式2.jpg]]<br>![[x86汇编_寻址方式3.jpg]]<br>![[x86汇编_寻址方式4.jpg]]<br>![[x86汇编_寻址方式5.jpg]]<br>![[x86汇编_寻址方式6.jpg]]<br>![[x86汇编_寻址方式7.jpg]]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/x86%E6%B1%87%E7%BC%96/%E5%AF%84%E5%AD%98%E5%99%A8/"/>
      <url>/2023/03/17/x86%E6%B1%87%E7%BC%96/%E5%AF%84%E5%AD%98%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>![[x86汇编_寄存器1.jpg]]<br>![[x86汇编_寄存器2.jpg]]<br>![[x86汇编_寄存器3.jpg]]<br>![[x86汇编_寄存器4.jpg]]<br>![[x86汇编_寄存器5.jpg]]<br>![[x86汇编_寄存器6.jpg]]<br>![[x86汇编_寄存器7.jpg]]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/x86%E6%B1%87%E7%BC%96/%E5%9C%B0%E5%9D%80/"/>
      <url>/2023/03/17/x86%E6%B1%87%E7%BC%96/%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>![[x86汇编_地址1.jpg]]<br>![[x86汇编_地址2.jpg]]<br>![[x86汇编_地址3.jpg]]<br>![[x86汇编_地址4.jpg]]<br>![[x86汇编_地址5.jpg]]<br>![[x86汇编_地址6.jpg]]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/Linux/GCC%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
      <url>/2023/03/17/Linux/GCC%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="GCC编译主要包括四个阶段"><a href="#GCC编译主要包括四个阶段" class="headerlink" title="GCC编译主要包括四个阶段"></a>GCC编译主要包括四个阶段</h2><ul><li><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><ul><li>主要是处理源代码中以 <code>&quot;#&quot;</code> 开头的预处理指令，比如 <code>#include</code>、<code>#define</code> 等，将其置换后直接插入程序文本中，得到另一个 C程序，通常以 <code>.i</code> 作为扩展名<ol><li>递归处理 <code>#include</code> 预处理指令，将对应文件的内容复制到该指令的位置</li><li>删除所有的 <code>#define</code> 指令，并在其被引用的位置递归地展开所有的宏</li><li>处理所有的条件预处理指令，如：<code>#if</code>、<code>#ifdef</code>、<code>#elif</code>、<code>#else</code>、<code>#endif</code> 等</li><li>删除所有的注释</li><li>添加行号和文件名标识</li></ol></li></ul></li><li><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ul><li>将预处理文件进行一系列的词法分析、语法分析、语义分析以及优化，最终生成汇编代码，通常以 <code>.s</code> 作为扩展名</li><li>GCC 默认使用 <code>AT&amp;T</code> 格式的汇编语言，添加编译选项 <code>-masm = intel</code> 可以指定为 <code>intel</code> 格式</li><li>编译选项 <code>-fno-asynchronous-unwind-tables</code> 用于生成没有 cfi 宏的汇编指令，提高可读性</li><li>若 <code>printf()</code> 只有单一参数，GCC 的优化策略会将其替换成 <code>puts()</code> 以提高性能</li></ul></li><li><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><ul><li>汇编器根据汇编指令与机器指令对照表进行翻译，通常以 <code>.o</code> 作为扩展名</li><li>此时的 <code>.o</code> 文件是一个可重定位文件，可以使用 <code>objdump -sd &lt;文件名.o&gt; -M intel</code> 查看其内容</li><li>由于此时还未进行链接，文件符号中的虚拟地址无法确定</li></ul></li><li><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li>GCC 默认为动态链接（添加编译选项 <code>- static</code> 可指定使用静态编译）</li><li>将目标文件及其依赖库进行链接，生成可执行文件。包括：地址和空间分配、符号绑定、重定位等</li><li>链接操作由链接器（ld.so）完成，然后就会得到一个可执行文件，其包含了大量的库文件</li><li>链接完成后，上一步无法确定的虚拟地址就被修正为实际的符号地址，可以被加载到内存中正常执行</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/CTF%20-%20Reverse_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-BabyXor/"/>
      <url>/2023/03/17/CTF%20-%20Reverse_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-BabyXor/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/CTF%20-%20Reverse_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-BABYRE/"/>
      <url>/2023/03/17/CTF%20-%20Reverse_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-BABYRE/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/CTF%20-%20Reverse/OllyDBG%20%E5%92%8C%20GDB/OllyDBG%E7%95%8C%E9%9D%A2/"/>
      <url>/2023/03/17/CTF%20-%20Reverse/OllyDBG%20%E5%92%8C%20GDB/OllyDBG%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="初始界面为：”LCG-主线程，模块”-窗口"><a href="#初始界面为：”LCG-主线程，模块”-窗口" class="headerlink" title="初始界面为：”LCG - 主线程，模块” 窗口"></a>初始界面为：”LCG - 主线程，模块” 窗口</h2><p>![[OllyDBG和GDB_OllyDBG界面1.png]]</p><h3 id="反汇编窗口"><a href="#反汇编窗口" class="headerlink" title="反汇编窗口"></a>反汇编窗口</h3><ul><li>载入程序后，窗口内显示的是程序反汇编后的源代码</li></ul><h3 id="信息窗口"><a href="#信息窗口" class="headerlink" title="信息窗口"></a>信息窗口</h3><ul><li>进行动态调试时，窗口内会显示出当前代码行的各个寄存器的信息，或者API函数的调用、跳转等信息，可以用来辅助了解当前代码行的寄存器的运行情况</li></ul><h3 id="数据窗口"><a href="#数据窗口" class="headerlink" title="数据窗口"></a>数据窗口</h3><ul><li>默认以十六进制的方式显示内存中的数据</li></ul><h3 id="寄存器窗口"><a href="#寄存器窗口" class="headerlink" title="寄存器窗口"></a>寄存器窗口</h3><ul><li>动态显示CPU各个寄存器的内容，包括数据寄存器、指针及变址寄存器、段寄存器，以及控制寄存器中的程序状态字寄存器</li></ul><h3 id="堆栈窗口"><a href="#堆栈窗口" class="headerlink" title="堆栈窗口"></a>堆栈窗口</h3><ul><li>显示堆栈的内容。调用API函数或子程序时，通过查看堆栈可以知道传递的参数等信息</li></ul><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><ul><li>在原本的 OD 中是没有命令行的，这个是一个外置的插件，可以方便地在动态调试时输入命令。一般来说，主要是输入下断点或者清除断点的命令。“命令行命令.txt”文件中有详细的命令及功能介绍，大家可以查看</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/CTF%20-%20Reverse/OllyDBG%20%E5%92%8C%20GDB/OllyDBG%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/03/17/CTF%20-%20Reverse/OllyDBG%20%E5%92%8C%20GDB/OllyDBG%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/CTF%20-%20Reverse/OllyDBG%20%E5%92%8C%20GDB/GDB%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/03/17/CTF%20-%20Reverse/OllyDBG%20%E5%92%8C%20GDB/GDB%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>操作</th><th>指令</th></tr></thead><tbody><tr><td><strong>调试程序</strong></td><td><code>gdb &lt;文件名&gt;</code></td></tr><tr><td><strong>下断点</strong></td><td><code>b &lt;函数名&gt;</code></td></tr><tr><td><strong>删除断点</strong></td><td><code>d</code></td></tr><tr><td><strong>执行程序</strong></td><td><code>r</code></td></tr><tr><td><strong>单步执行</strong></td><td><code>n</code></td></tr><tr><td><strong>直接执行到程序结束</strong></td><td><code>c</code></td></tr><tr><td><strong>查看寄存器的值</strong></td><td><code>i r &lt;寄存器名&gt;</code></td></tr><tr><td><strong>修改寄存器的值</strong></td><td><code>set $&lt;寄存器名&gt; = &lt;修改的值&gt;</code></td></tr><tr><td><strong>退出调试</strong></td><td><code>q</code></td></tr><tr><td><strong>单步执行，遇到函数会进入</strong></td><td><code>s</code></td></tr><tr><td><strong>将当前程序执行流跳转到指定行或地址</strong></td><td><code>j</code></td></tr><tr><td><strong>打印变量或寄存器值</strong></td><td><code>p</code></td></tr><tr><td><strong>运行到指定行停下来</strong></td><td><code>u</code></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/CTF%20-%20Reverse/IDA/%E6%B1%87%E7%BC%96%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/03/17/CTF%20-%20Reverse/IDA/%E6%B1%87%E7%BC%96%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="在字符串最后，用“0”表示结束"><a href="#在字符串最后，用“0”表示结束" class="headerlink" title="在字符串最后，用“0”表示结束"></a>在字符串最后，用“0”表示结束</h2><ul><li><strong>Format 的内容：”Welcome The System\nPlease Input Key:”</strong><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402100</span> <span class="token number">57</span> <span class="token number">65</span> <span class="token number">6</span>C <span class="token number">63</span> <span class="token number">6F</span> <span class="token number">6</span>D <span class="token number">65</span> <span class="token number">20</span> <span class="token number">54</span> <span class="token number">68</span><span class="token operator">+</span> Format db <span class="token char">'Welcome The System'</span> <span class="token punctuation">,</span> <span class="token number">0</span>Ah <span class="token punctuation">;</span>     DATA XREF<span class="token operator">:</span> _main<span class="token operator">+</span><span class="token number">28</span>↑o<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402100</span> <span class="token number">65</span> <span class="token number">20</span> <span class="token number">53</span> <span class="token number">79</span> <span class="token number">73</span> <span class="token number">74</span> <span class="token number">65</span> <span class="token number">6</span>D <span class="token number">0</span>A <span class="token number">50</span><span class="token operator">+</span> db <span class="token char">'Please Input Key:'</span> <span class="token punctuation">,</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><strong>byte_402150 的内容：<code>2a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6</code><br>byte_402151 的内容：<code>a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6</code></strong><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402150</span> <span class="token punctuation">;</span> <span class="token keyword">char</span> byte_402150<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402150</span> <span class="token number">32</span> byte_402150 db <span class="token char">'2'</span> <span class="token punctuation">;</span>      DATA XREF<span class="token operator">:</span> sub_401090<span class="token operator">:</span>loc_4010CC↑r<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402151</span> <span class="token punctuation">;</span> <span class="token keyword">char</span> byte_402151<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402151</span> <span class="token number">61</span> byte_402151 db <span class="token char">'a'</span> <span class="token punctuation">;</span>      DATA XREF<span class="token operator">:</span> sub_401090<span class="token operator">:</span>loc_4010E9↑r<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402152</span> <span class="token number">34</span> <span class="token number">39</span> <span class="token number">66</span> <span class="token number">36</span> <span class="token number">39</span> <span class="token number">63</span> <span class="token number">33</span> <span class="token number">38</span> <span class="token number">33</span> <span class="token number">39</span><span class="token operator">+</span>a49f69c38395cde db '<span class="token number">49f</span><span class="token number">69</span>c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6' <span class="token punctuation">,</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="定义字符串时，用-dup-开辟未初始化的空间"><a href="#定义字符串时，用-dup-开辟未初始化的空间" class="headerlink" title="定义字符串时，用 dup(?) 开辟未初始化的空间"></a>定义字符串时，用 <code>dup(?)</code> 开辟未初始化的空间</h2><p>![[CTF - Reverse_IDA——汇编知识1.png]]</p><ul><li><strong><code>str2 db 68h dup(?)</code> 是指开辟一个 68h 长度的空间，且不进行初始化</strong></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/CTF%20-%20Reverse/IDA/IDA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2023/03/17/CTF%20-%20Reverse/IDA/IDA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td><strong>查看字符串</strong></td><td>Shift + F12</td></tr><tr><td><strong>反汇编</strong></td><td>F5</td></tr><tr><td><strong>快速查看16进制数的ASCii码对应的字符</strong></td><td>r</td></tr><tr><td><strong>在反汇编后的界面中写下注释</strong></td><td>；</td></tr><tr><td><strong>在反编译后伪代码的界面中写下注释</strong></td><td>&#x2F;</td></tr><tr><td><strong>查看、隐藏变量的类型</strong></td><td>\</td></tr><tr><td><strong>对着某个函数、变量按该快捷键，查看它的交叉引用</strong></td><td>x</td></tr><tr><td><strong>直接跳转到某个地址</strong></td><td>g</td></tr><tr><td><strong>更改变量的名称</strong></td><td>n</td></tr><tr><td><strong>拍摄IDA快照</strong></td><td>ctrl + shift + w</td></tr><tr><td><strong>嵌入脚本</strong></td><td>shift + F2</td></tr><tr><td><strong>文本搜索字符串</strong></td><td>alt + t</td></tr><tr><td><strong>将数据转换为16 进制</strong></td><td>h</td></tr><tr><td><strong>获取数组的数据</strong></td><td>shift + e</td></tr><tr><td><strong>对数据db&#x2F;dw&#x2F;dd之间进行切换</strong></td><td>d</td></tr><tr><td><strong>转化为函数</strong></td><td>p</td></tr><tr><td><strong>将数据转化为代码</strong></td><td>c</td></tr><tr><td><strong>将数据转化为字符串</strong></td><td>a</td></tr><tr><td><strong>将代码转换为数据</strong></td><td>u</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/CTF%20-%20Reverse/%E5%B0%86%E5%87%BD%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%BA%E6%95%B0%E7%BB%84%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C/"/>
      <url>/2023/03/17/CTF%20-%20Reverse/%E5%B0%86%E5%87%BD%E6%95%B0%E5%8A%A0%E5%AF%86%E4%B8%BA%E6%95%B0%E7%BB%84%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/CTF%20-%20Pwn_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-CGfsb/"/>
      <url>/2023/03/17/CTF%20-%20Pwn_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-CGfsb/</url>
      
        <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/e41a0f684d0e497f87bb309f91737e4d">攻防世界-CGfsb</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br>![[攻防世界-CGfsb1.png]]<br>32位 小端序，开启了金丝雀、栈不可执行</p></li><li><p>尝试执行：<br>![[攻防世界-CGfsb2.png]]</p></li><li><p>在 IDA 中分析：<br>![[攻防世界-CGfsb3.png]]</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/17/CTF%20-%20Misc/%E9%9F%B3%E9%A2%91%E9%9A%90%E5%86%99/"/>
      <url>/2023/03/17/CTF%20-%20Misc/%E9%9F%B3%E9%A2%91%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="wav-隐写"><a href="#wav-隐写" class="headerlink" title="wav 隐写"></a>wav 隐写</h2><blockquote><p>音频分析软件 Audacity 下载地址：<a href="https://www.audacityteam.org/">Audacity ® | Free</a></p><p>音频隐写软件 DeepSound 下载地址：<a href="http://www.jpinsoft.net/deepsound/download.aspx">DeepSound -&gt; Download</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
