<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>加密算法的函数特征</title>
      <link href="/2023/03/17/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%81/"/>
      <url>/2023/03/17/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E5%BE%81/</url>
      
        <content type="html"><![CDATA[<h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><blockquote><p>转换步骤：<br>第1步，将待转换的字符串，每 3个字节分为一组，每个字节占 8bit，共 24个二进制位<br>第2步，将上面的 24个二进制位，每 6个字节做为一组，共分为 4组（<em>若最后一组字符数不足三个，用 ‘&#x3D;’ 补充</em>）<br>第3步，在每组前面添加两个 0，每组由 6个变为 8个二进制位，总共 32个二进制位，即 4个字节<br>第4步，根据 Base64 编码对照表获得对应的值</p><p><strong>Base64 &amp; Base32 &amp; Base16</strong><br><em><strong>Base64</strong></em> 就是用每 6位二进制（2的6次幂就是64）来表示一个字符，因此称为 Base64<br>同理：<em><strong>Base32</strong></em> 就是用 5位二进制（2的5次幂就是32），<em><strong>Base16</strong></em> 就是用 4位二进制（2的4次幂就是16）</p><p><strong>原始 Base64 码表</strong>：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code></p><p><strong>Base64 为什么使用 3个字节作为一组呢？</strong><br>因为 6 和 8 的最小公倍数为 24，三个字节正好 24个二进制位，每 6bit 为一组，恰好能够分为 4组</p><p><strong>base64算法解码过程</strong><br>去掉所有的等号，查表将字符转为二进制的索引值，最后每 8位一组计算 ASCii 码还原字符，<mark>不足 8位则丢弃</mark></p></blockquote><hr><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>Base64 要用到 Base64码表，可以在程序中找到连续的字符串：ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;</li><li>根据 Base64 加密原理，代码中必然存在<mark>根据余数个数判断是否添加等号</mark>的代码<br>字符 ‘&#x3D;’ 的 ASCii 码：61（0x3D），也有可能直接索引码表里面的 ‘&#x3D;’</li><li>识别代码中对数据的左移右移操作<br><code>((a[0] &amp; 3) &lt;&lt; 4) | (a[1] &gt;&gt; 4 )</code> 和 <code>(16 * (a[0] &amp; 3)) | (a[1] / 16)</code> 是等价操作，都表示取 <code>a[0]</code> 后 2位与 <code>a[1]</code> 前 4位拼接，是 Base64 中的常见操作</li><li>最主要的是理解编码解码原理，比如编码时通常都会用 3个字节一组来处理比特位数据</li></ol><hr><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>以下图的表格为示例，具体分析一下整个过程：<br>![[加密算法的函数特征1.jpeg]]</p><ol><li>第1步，根据 ‘M’、’a’、’n’ 对应的 ASCii 码值分别为 77，97，110，对应的二进制值是：01001101、01100001、01101110，由此组成一个 24位的二进制字符串</li><li>第2步，如图红色框，将 24位每 6位二进制位一组分成 4组</li><li>第3步，在上面每一组前面补两个 0，扩展成 32个二进制位：<mark>00</mark>010011、<mark>00</mark>010110、<mark>00</mark>000101、<mark>00</mark>101110</li><li>第4步，四组 8bit 分别对应的值（ <strong>Base64 编码索引</strong>）为：19、22、5、46，在 Base64 编码表中进行查找，分别对应：’T’、’W’、’F’、’u’，因此 “Man” 经过 Base64 编码之后就变为：”TWFu”</li></ol><p><strong>位数不足的情况</strong><br>位数不足用 ‘&#x3D;’ 补充，总共有两种情况：</p><ol><li>最后一组只有一个字符</li><li>最后一组有两个字符<br>![[加密算法的函数特征2.png]]</li></ol><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>__fastcall <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// eax  </span>    <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-54h]  </span>    <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-50h]  </span>    <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-4Ch]  </span>    <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-4Ch]  </span>    <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp-4Ch]  </span>    <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-48h]  </span>    <span class="token keyword">int</span> v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp-44h]  </span>    <span class="token keyword">char</span> src<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-40h]  </span>    <span class="token keyword">unsigned</span> __int64 v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+68h] [rbp-8h]  </span>        v16 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// a1为输入的字符串  </span>    v14 <span class="token operator">=</span> v1 <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// v14为输入字符串长度除3以后的余数  </span>    v13 <span class="token operator">=</span> v1 <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>   <span class="token comment">// v13为3个一组的字符组合数量  </span>    <span class="token function">memset</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x30uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v8 <span class="token operator">&lt;</span> v13 <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v2 <span class="token operator">=</span> v10<span class="token punctuation">;</span>        v11 <span class="token operator">=</span> v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 第一个：a1[0]右移2位，取前6位作为索引值，查找对应字符</span>        src<span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            v3 <span class="token operator">=</span> v11<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">// 第二个：a1[0]取后2位与a1[1]的前4位拼接    </span>        src<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 第三个：a1[1]取后4位与a1[2]的前2位拼接，查找对应字符    </span>        src<span class="token punctuation">[</span>v11<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          v4 <span class="token operator">=</span> v11 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            v10 <span class="token operator">=</span> v11 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">// 第四个：a1[2]取后6位作为索引，查找对应字符  </span>        src<span class="token punctuation">[</span>v4<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            v9 <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token operator">++</span>v8<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v14 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token comment">// 余数为1，则需要添加两个等号    </span>        src<span class="token punctuation">[</span>v10<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">"=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v14 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>   <span class="token comment">// 余数为2，则需要添加1个等号      </span>        v5 <span class="token operator">=</span> v10<span class="token punctuation">;</span>            v12 <span class="token operator">=</span> v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            v6 <span class="token operator">=</span> v12<span class="token operator">++</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v12<span class="token punctuation">]</span> <span class="token operator">=</span> base64_table<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v9 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            src<span class="token punctuation">[</span>v12 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'='</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">strcpy</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><blockquote><p>RC4 是对称加密算法，通过密钥 key 和 S盒生成密钥流，明文逐字节异或 S盒，同时 S盒也会发生改变<br>加密与解密使用了相同的函数和密钥 K，加密的强度主要来源于密钥的安全性，密钥泄露能直接解密出明文</p><p><mark>【相关 Writeup 见 攻防世界-crypt、攻防世界-ereere】</mark></p></blockquote><hr><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li>RC4 加密算法属于流加密算法，包括<strong>初始化函数</strong>和<strong>加解密函数</strong></li><li><strong>初始化函数</strong>中有两个 256循环，第一个循环给 s 盒初始化为 0 - 255，第二个循环根据密钥 key 对 s 盒 swap</li><li><strong>加解密函数</strong>中有一个 256循环，使明文和 s 盒异或生成密文</li></ol><hr><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><h4 id="初始化部分"><a href="#初始化部分" class="headerlink" title="初始化部分"></a>初始化部分</h4><ul><li>初始化长度为 256 的 S 盒。第一个 for 循环将 0 到 255 的互不重复的元素装入 S 盒；第二个 for 循环根据密钥 key 打乱 S 盒，i 确保 S-box 的每个元素都得到处理，j 保证 S-box 的搅乱是随机的</li><li>不同的 S-box 在经过伪随机子密码生成算法的处理后可以得到不同的子密钥序列，将 S-box 和明文进行 xor 运算，得到密文，解密过程也完全相同</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rc4_init</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> k<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//临时向量 k</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> Len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Len = strlen(key)，密钥的长度</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//打乱s表</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="加解密部分"><a href="#加解密部分" class="headerlink" title="加解密部分"></a>加解密部分</h4><ul><li>每收到一个字节，就进行循环。通过一定的算法定位 S 盒中的一个元素，并与输入字节异或，得到 k；同时，循环中还改变了 S 盒</li><li>如果输入的是明文，输出的就是密文；如果输入的是密文，输出的就是明文</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token comment">//Len = strlen(key)，密钥的长度</span>    <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">rc4_init</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-24h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-20h]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-1Ch]</span>  _DWORD <span class="token operator">*</span>v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-18h]</span>  <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    v9<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">//循环给 s 盒赋值</span>  v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    <span class="token comment">//循环根据密钥 key 对 s 盒进行 swap</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">//Ⅰ、Ⅱ、Ⅲ 交换v9[j]和v9[v7]的值</span>    v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅰ</span>    v7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> v6<span class="token punctuation">)</span> <span class="token operator">+</span> v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>    v9<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅱ</span>    v9<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>    <span class="token comment">//Ⅲ</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v6 <span class="token operator">>=</span> a3 <span class="token punctuation">)</span>      v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>_DWORD <span class="token operator">*</span>__fastcall <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  _DWORD <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-28h]</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+4h] [rbp-24h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+8h] [rbp-20h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-1Ch]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-18h]</span>  _DWORD <span class="token operator">*</span>v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-10h]</span>  v5 <span class="token operator">=</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span>  v6 <span class="token operator">=</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> a1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a3<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">//Ⅰ、Ⅱ、Ⅲ、Ⅳ 交换v9[v5]和v9[v6]的值</span>    v5 <span class="token operator">=</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅰ</span>    v7 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span><span class="token punctuation">;</span>    v6 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">+</span> v6<span class="token punctuation">)</span><span class="token punctuation">;</span>    v8 <span class="token operator">=</span> v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Ⅱ</span>    v9<span class="token punctuation">[</span>v5<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>    <span class="token comment">//Ⅲ</span>    v9<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>    <span class="token comment">//Ⅳ</span>    <span class="token operator">*</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^=</span> <span class="token function">LOBYTE</span><span class="token punctuation">(</span>v9<span class="token punctuation">[</span><span class="token punctuation">(</span>v8 <span class="token operator">+</span> v7<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span>a1 <span class="token operator">=</span> v5<span class="token punctuation">;</span>  result <span class="token operator">=</span> a1<span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编知识</title>
      <link href="/2023/03/17/%E6%B1%87%E7%BC%96%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/03/17/%E6%B1%87%E7%BC%96%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="在字符串最后，用“0”表示结束"><a href="#在字符串最后，用“0”表示结束" class="headerlink" title="在字符串最后，用“0”表示结束"></a>在字符串最后，用“0”表示结束</h2><ul><li><strong>Format 的内容：”Welcome The System\nPlease Input Key:”</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402100</span> <span class="token number">57</span> <span class="token number">65</span> <span class="token number">6</span>C <span class="token number">63</span> <span class="token number">6F</span> <span class="token number">6</span>D <span class="token number">65</span> <span class="token number">20</span> <span class="token number">54</span> <span class="token number">68</span><span class="token operator">+</span> Format db <span class="token char">'Welcome The System'</span> <span class="token punctuation">,</span> <span class="token number">0</span>Ah <span class="token punctuation">;</span>     DATA XREF<span class="token operator">:</span> _main<span class="token operator">+</span><span class="token number">28</span>↑o<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402100</span> <span class="token number">65</span> <span class="token number">20</span> <span class="token number">53</span> <span class="token number">79</span> <span class="token number">73</span> <span class="token number">74</span> <span class="token number">65</span> <span class="token number">6</span>D <span class="token number">0</span>A <span class="token number">50</span><span class="token operator">+</span> db <span class="token char">'Please Input Key:'</span> <span class="token punctuation">,</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>byte_402150 的内容：<code>2a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6</code><br>byte_402151 的内容：<code>a49f69c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6</code></strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402150</span> <span class="token punctuation">;</span> <span class="token keyword">char</span> byte_402150<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402150</span> <span class="token number">32</span> byte_402150 db <span class="token char">'2'</span> <span class="token punctuation">;</span>      DATA XREF<span class="token operator">:</span> sub_401090<span class="token operator">:</span>loc_4010CC↑r<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402151</span> <span class="token punctuation">;</span> <span class="token keyword">char</span> byte_402151<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402151</span> <span class="token number">61</span> byte_402151 db <span class="token char">'a'</span> <span class="token punctuation">;</span>      DATA XREF<span class="token operator">:</span> sub_401090<span class="token operator">:</span>loc_4010E9↑r<span class="token punctuation">.</span>rdata<span class="token operator">:</span><span class="token number">00402152</span> <span class="token number">34</span> <span class="token number">39</span> <span class="token number">66</span> <span class="token number">36</span> <span class="token number">39</span> <span class="token number">63</span> <span class="token number">33</span> <span class="token number">38</span> <span class="token number">33</span> <span class="token number">39</span><span class="token operator">+</span>a49f69c38395cde db '<span class="token number">49f</span><span class="token number">69</span>c38395cde96d6de96d6f4e025484954d6195448def6e2dad67786e21d5adae6' <span class="token punctuation">,</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义字符串时，用-dup-开辟未初始化的空间"><a href="#定义字符串时，用-dup-开辟未初始化的空间" class="headerlink" title="定义字符串时，用 dup(?) 开辟未初始化的空间"></a>定义字符串时，用 <code>dup(?)</code> 开辟未初始化的空间</h2><p><img src="https://s2.loli.net/2023/03/17/r6BYOSP5G7vDb8A.png" alt="CTF - Reverse_IDA——汇编知识1.png"></p><ul><li><strong><code>str2 db 68h dup(?)</code> 是指开辟一个 68h 长度的空间，且不进行初始化</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA命名前缀的含义</title>
      <link href="/2023/03/17/IDA%E5%91%BD%E5%90%8D%E5%89%8D%E7%BC%80%E7%9A%84%E5%90%AB%E4%B9%89/"/>
      <url>/2023/03/17/IDA%E5%91%BD%E5%90%8D%E5%89%8D%E7%BC%80%E7%9A%84%E5%90%AB%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h2 id="IDA-命名前缀的含义"><a href="#IDA-命名前缀的含义" class="headerlink" title="IDA 命名前缀的含义"></a>IDA 命名前缀的含义</h2><blockquote><p>IDA 会自动生成假名字，用于表示子函数、程序地址和数据，根据不同的类型和值，假名字有不同的前缀</p></blockquote><hr><table><thead><tr><th>前缀</th><th>意义</th></tr></thead><tbody><tr><td><strong>sub_</strong></td><td>指令和子函数起点</td></tr><tr><td>locret_</td><td>返回指令</td></tr><tr><td><strong>loc_</strong></td><td>指令</td></tr><tr><td><strong>off_</strong></td><td>数据，包含偏移量</td></tr><tr><td><strong>seg_</strong></td><td>数据，包含段地址值</td></tr><tr><td>asc_</td><td>数据，ASCII字符串</td></tr><tr><td><strong>byte_</strong></td><td>数据，字节（或字节数组）</td></tr><tr><td><strong>word_</strong></td><td>数据，16位数据（或字数组）</td></tr><tr><td><strong>dword_</strong></td><td>数据，32位数据（或双字数组）</td></tr><tr><td><strong>qword_</strong></td><td>数据，64位数据（或4字数组）</td></tr><tr><td>flt_</td><td>浮点数据，32位（或浮点数组）</td></tr><tr><td>dbl_</td><td>浮点数，64位（或双精度数组）</td></tr><tr><td>tbyte_</td><td>浮点数，80位（或扩展精度浮点数）</td></tr><tr><td>stru_</td><td>结构体(或结构体数组)</td></tr><tr><td>algn_</td><td>对齐指示</td></tr><tr><td><strong>unk_</strong></td><td>未处理字节</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA快捷键</title>
      <link href="/2023/03/17/IDA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2023/03/17/IDA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>作用</th><th>快捷键</th></tr></thead><tbody><tr><td><strong>查看字符串</strong></td><td>Shift + F12</td></tr><tr><td><strong>反汇编</strong></td><td>F5</td></tr><tr><td><strong>快速查看16进制数的ASCii码对应的字符</strong></td><td>r</td></tr><tr><td><strong>在反汇编后的界面中写下注释</strong></td><td>；</td></tr><tr><td><strong>在反编译后伪代码的界面中写下注释</strong></td><td>&#x2F;</td></tr><tr><td><strong>查看、隐藏变量的类型</strong></td><td>\</td></tr><tr><td><strong>对着某个函数、变量按该快捷键，查看它的交叉引用</strong></td><td>x</td></tr><tr><td><strong>直接跳转到某个地址</strong></td><td>g</td></tr><tr><td><strong>更改变量的名称</strong></td><td>n</td></tr><tr><td><strong>拍摄IDA快照</strong></td><td>ctrl + shift + w</td></tr><tr><td><strong>嵌入脚本</strong></td><td>shift + F2</td></tr><tr><td><strong>文本搜索字符串</strong></td><td>alt + t</td></tr><tr><td><strong>将数据转换为16 进制</strong></td><td>h</td></tr><tr><td><strong>获取数组的数据</strong></td><td>shift + e</td></tr><tr><td><strong>对数据db&#x2F;dw&#x2F;dd之间进行切换</strong></td><td>d</td></tr><tr><td><strong>转化为函数</strong></td><td>p</td></tr><tr><td><strong>将数据转化为代码</strong></td><td>c</td></tr><tr><td><strong>将数据转化为字符串</strong></td><td>a</td></tr><tr><td><strong>将代码转换为数据</strong></td><td>u</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REVERSE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
